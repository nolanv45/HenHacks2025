{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport { set as e } from \"../../../../../../core/libs/gl-matrix-2/math/vec2.js\";\nimport { create as t } from \"../../../../../../core/libs/gl-matrix-2/factories/vec2f64.js\";\nimport { s as r } from \"../../../../../../chunks/vec42.js\";\nimport { create as a } from \"../../../../../../core/libs/gl-matrix-2/factories/vec4f64.js\";\nimport { FoamIntensity as o } from \"./FoamRendering.glsl.js\";\nimport { ReadShadowMapPassParameters as m } from \"./ReadShadowMap.glsl.js\";\nimport { Float2PassUniform as s } from \"../../shaderModules/Float2PassUniform.js\";\nimport { Float4PassUniform as v } from \"../../shaderModules/Float4PassUniform.js\";\nimport { glsl as l } from \"../../shaderModules/glsl.js\";\nimport { Texture2DPassUniform as i } from \"../../shaderModules/Texture2DPassUniform.js\";\nfunction u(t) {\n  t.fragment.uniforms.add(new i(\"texWaveNormal\", e => e.waveNormal), new i(\"texWavePerturbation\", e => e.wavePerturbation), new v(\"waveParams\", e => r(c, e.waveStrength, e.waveTextureRepeat, e.flowStrength, e.flowOffset)), new s(\"waveDirection\", t => e(n, t.waveDirection[0] * t.waveVelocity, t.waveDirection[1] * t.waveVelocity))), t.include(o), t.fragment.code.add(l`const vec2  FLOW_JUMP = vec2(6.0/25.0, 5.0/24.0);\nvec2 textureDenormalized2D(sampler2D _tex, vec2 _uv) {\nreturn 2.0 * texture(_tex, _uv).rg - 1.0;\n}\nfloat sampleNoiseTexture(vec2 _uv) {\nreturn texture(texWavePerturbation, _uv).b;\n}\nvec3 textureDenormalized3D(sampler2D _tex, vec2 _uv) {\nreturn 2.0 * texture(_tex, _uv).rgb - 1.0;\n}\nfloat computeProgress(vec2 uv, float time) {\nreturn fract(time);\n}\nfloat computeWeight(vec2 uv, float time) {\nfloat progress = computeProgress(uv, time);\nreturn 1.0 - abs(1.0 - 2.0 * progress);\n}\nvec3 computeUVPerturbedWeigth(sampler2D texFlow, vec2 uv, float time, float phaseOffset) {\nfloat flowStrength = waveParams[2];\nfloat flowOffset = waveParams[3];\nvec2 flowVector = textureDenormalized2D(texFlow, uv) * flowStrength;\nfloat progress = computeProgress(uv, time + phaseOffset);\nfloat weight = computeWeight(uv, time + phaseOffset);\nvec2 result = uv;\nresult -= flowVector * (progress + flowOffset);\nresult += phaseOffset;\nresult += (time - progress) * FLOW_JUMP;\nreturn vec3(result, weight);\n}\nconst float TIME_NOISE_TEXTURE_REPEAT = 0.3737;\nconst float TIME_NOISE_STRENGTH = 7.77;\nvec3 getWaveLayer(sampler2D _texNormal, sampler2D _dudv, vec2 _uv, vec2 _waveDir, float time) {\nfloat waveStrength = waveParams[0];\nvec2 waveMovement = time * -_waveDir;\nfloat timeNoise = sampleNoiseTexture(_uv * TIME_NOISE_TEXTURE_REPEAT) * TIME_NOISE_STRENGTH;\nvec3 uv_A = computeUVPerturbedWeigth(_dudv, _uv + waveMovement, time + timeNoise, 0.0);\nvec3 uv_B = computeUVPerturbedWeigth(_dudv, _uv + waveMovement, time + timeNoise, 0.5);\nvec3 normal_A = textureDenormalized3D(_texNormal, uv_A.xy) * uv_A.z;\nvec3 normal_B = textureDenormalized3D(_texNormal, uv_B.xy) * uv_B.z;\nvec3 mixNormal = normalize(normal_A + normal_B);\nmixNormal.xy *= waveStrength;\nmixNormal.z = sqrt(1.0 - dot(mixNormal.xy, mixNormal.xy));\nreturn mixNormal;\n}\nvec4 getSurfaceNormalAndFoam(vec2 _uv, float _time) {\nfloat waveTextureRepeat = waveParams[1];\nvec3 normal = getWaveLayer(texWaveNormal, texWavePerturbation, _uv * waveTextureRepeat, waveDirection, _time);\nfloat foam  = normals2FoamIntensity(normal, waveParams[0]);\nreturn vec4(normal, foam);\n}`);\n}\nclass f extends m {}\nconst c = a(),\n  n = t();\nexport { u as WaterDistortion, f as WaterDistortionPassParameters };","map":{"version":3,"names":["set","e","create","t","s","r","a","FoamIntensity","o","ReadShadowMapPassParameters","m","Float2PassUniform","Float4PassUniform","v","glsl","l","Texture2DPassUniform","i","u","fragment","uniforms","add","waveNormal","wavePerturbation","c","waveStrength","waveTextureRepeat","flowStrength","flowOffset","n","waveDirection","waveVelocity","include","code","f","WaterDistortion","WaterDistortionPassParameters"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/WaterDistortion.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{set as e}from\"../../../../../../core/libs/gl-matrix-2/math/vec2.js\";import{create as t}from\"../../../../../../core/libs/gl-matrix-2/factories/vec2f64.js\";import{s as r}from\"../../../../../../chunks/vec42.js\";import{create as a}from\"../../../../../../core/libs/gl-matrix-2/factories/vec4f64.js\";import{FoamIntensity as o}from\"./FoamRendering.glsl.js\";import{ReadShadowMapPassParameters as m}from\"./ReadShadowMap.glsl.js\";import{Float2PassUniform as s}from\"../../shaderModules/Float2PassUniform.js\";import{Float4PassUniform as v}from\"../../shaderModules/Float4PassUniform.js\";import{glsl as l}from\"../../shaderModules/glsl.js\";import{Texture2DPassUniform as i}from\"../../shaderModules/Texture2DPassUniform.js\";function u(t){t.fragment.uniforms.add(new i(\"texWaveNormal\",(e=>e.waveNormal)),new i(\"texWavePerturbation\",(e=>e.wavePerturbation)),new v(\"waveParams\",(e=>r(c,e.waveStrength,e.waveTextureRepeat,e.flowStrength,e.flowOffset))),new s(\"waveDirection\",(t=>e(n,t.waveDirection[0]*t.waveVelocity,t.waveDirection[1]*t.waveVelocity)))),t.include(o),t.fragment.code.add(l`const vec2  FLOW_JUMP = vec2(6.0/25.0, 5.0/24.0);\nvec2 textureDenormalized2D(sampler2D _tex, vec2 _uv) {\nreturn 2.0 * texture(_tex, _uv).rg - 1.0;\n}\nfloat sampleNoiseTexture(vec2 _uv) {\nreturn texture(texWavePerturbation, _uv).b;\n}\nvec3 textureDenormalized3D(sampler2D _tex, vec2 _uv) {\nreturn 2.0 * texture(_tex, _uv).rgb - 1.0;\n}\nfloat computeProgress(vec2 uv, float time) {\nreturn fract(time);\n}\nfloat computeWeight(vec2 uv, float time) {\nfloat progress = computeProgress(uv, time);\nreturn 1.0 - abs(1.0 - 2.0 * progress);\n}\nvec3 computeUVPerturbedWeigth(sampler2D texFlow, vec2 uv, float time, float phaseOffset) {\nfloat flowStrength = waveParams[2];\nfloat flowOffset = waveParams[3];\nvec2 flowVector = textureDenormalized2D(texFlow, uv) * flowStrength;\nfloat progress = computeProgress(uv, time + phaseOffset);\nfloat weight = computeWeight(uv, time + phaseOffset);\nvec2 result = uv;\nresult -= flowVector * (progress + flowOffset);\nresult += phaseOffset;\nresult += (time - progress) * FLOW_JUMP;\nreturn vec3(result, weight);\n}\nconst float TIME_NOISE_TEXTURE_REPEAT = 0.3737;\nconst float TIME_NOISE_STRENGTH = 7.77;\nvec3 getWaveLayer(sampler2D _texNormal, sampler2D _dudv, vec2 _uv, vec2 _waveDir, float time) {\nfloat waveStrength = waveParams[0];\nvec2 waveMovement = time * -_waveDir;\nfloat timeNoise = sampleNoiseTexture(_uv * TIME_NOISE_TEXTURE_REPEAT) * TIME_NOISE_STRENGTH;\nvec3 uv_A = computeUVPerturbedWeigth(_dudv, _uv + waveMovement, time + timeNoise, 0.0);\nvec3 uv_B = computeUVPerturbedWeigth(_dudv, _uv + waveMovement, time + timeNoise, 0.5);\nvec3 normal_A = textureDenormalized3D(_texNormal, uv_A.xy) * uv_A.z;\nvec3 normal_B = textureDenormalized3D(_texNormal, uv_B.xy) * uv_B.z;\nvec3 mixNormal = normalize(normal_A + normal_B);\nmixNormal.xy *= waveStrength;\nmixNormal.z = sqrt(1.0 - dot(mixNormal.xy, mixNormal.xy));\nreturn mixNormal;\n}\nvec4 getSurfaceNormalAndFoam(vec2 _uv, float _time) {\nfloat waveTextureRepeat = waveParams[1];\nvec3 normal = getWaveLayer(texWaveNormal, texWavePerturbation, _uv * waveTextureRepeat, waveDirection, _time);\nfloat foam  = normals2FoamIntensity(normal, waveParams[0]);\nreturn vec4(normal, foam);\n}`)}class f extends m{}const c=a(),n=t();export{u as WaterDistortion,f as WaterDistortionPassParameters};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAAOA,GAAG,IAAIC,CAAC,QAAK,sDAAsD;AAAC,SAAOC,MAAM,IAAIC,CAAC,QAAK,8DAA8D;AAAC,SAAOC,CAAC,IAAIC,CAAC,QAAK,mCAAmC;AAAC,SAAOH,MAAM,IAAII,CAAC,QAAK,8DAA8D;AAAC,SAAOC,aAAa,IAAIC,CAAC,QAAK,yBAAyB;AAAC,SAAOC,2BAA2B,IAAIC,CAAC,QAAK,yBAAyB;AAAC,SAAOC,iBAAiB,IAAIP,CAAC,QAAK,0CAA0C;AAAC,SAAOQ,iBAAiB,IAAIC,CAAC,QAAK,0CAA0C;AAAC,SAAOC,IAAI,IAAIC,CAAC,QAAK,6BAA6B;AAAC,SAAOC,oBAAoB,IAAIC,CAAC,QAAK,6CAA6C;AAAC,SAASC,CAACA,CAACf,CAAC,EAAC;EAACA,CAAC,CAACgB,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAIJ,CAAC,CAAC,eAAe,EAAEhB,CAAC,IAAEA,CAAC,CAACqB,UAAW,CAAC,EAAC,IAAIL,CAAC,CAAC,qBAAqB,EAAEhB,CAAC,IAAEA,CAAC,CAACsB,gBAAiB,CAAC,EAAC,IAAIV,CAAC,CAAC,YAAY,EAAEZ,CAAC,IAAEI,CAAC,CAACmB,CAAC,EAACvB,CAAC,CAACwB,YAAY,EAACxB,CAAC,CAACyB,iBAAiB,EAACzB,CAAC,CAAC0B,YAAY,EAAC1B,CAAC,CAAC2B,UAAU,CAAE,CAAC,EAAC,IAAIxB,CAAC,CAAC,eAAe,EAAED,CAAC,IAAEF,CAAC,CAAC4B,CAAC,EAAC1B,CAAC,CAAC2B,aAAa,CAAC,CAAC,CAAC,GAAC3B,CAAC,CAAC4B,YAAY,EAAC5B,CAAC,CAAC2B,aAAa,CAAC,CAAC,CAAC,GAAC3B,CAAC,CAAC4B,YAAY,CAAE,CAAC,CAAC,EAAC5B,CAAC,CAAC6B,OAAO,CAACxB,CAAC,CAAC,EAACL,CAAC,CAACgB,QAAQ,CAACc,IAAI,CAACZ,GAAG,CAACN,CAAC;AACpjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC;AAAA;AAAC,MAAMmB,CAAC,SAASxB,CAAC;AAAE,MAAMc,CAAC,GAAClB,CAAC,CAAC,CAAC;EAACuB,CAAC,GAAC1B,CAAC,CAAC,CAAC;AAAC,SAAOe,CAAC,IAAIiB,eAAe,EAACD,CAAC,IAAIE,6BAA6B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}