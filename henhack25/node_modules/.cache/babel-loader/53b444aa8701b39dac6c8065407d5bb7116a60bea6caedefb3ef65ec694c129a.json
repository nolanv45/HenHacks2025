{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport { b as i, t } from \"./Geometry.js\";\nimport { P as s, m, c as h, g as x } from \"./Point2D.js\";\nclass n {\n  static construct(i, t, s, m) {\n    return new n(i, t, s, m);\n  }\n  constructor(i, t, s, m) {\n    this.m_EnvelopeType = 2, void 0 === i ? (this.xmin = Number.NaN, this.ymin = Number.NaN, this.xmax = Number.NaN, this.ymax = Number.NaN) : \"number\" == typeof i ? (this.xmin = i, this.ymin = t, this.xmax = s, this.ymax = m) : (this.xmin = i.xmin, this.ymin = i.ymin, this.xmax = i.xmax, this.ymax = i.ymax), this.normalize();\n  }\n  static constructEmpty() {\n    return new n(Number.NaN, Number.NaN, Number.NaN, Number.NaN);\n  }\n  clone() {\n    return new n(this);\n  }\n  assign(i) {\n    return this.xmin = i.xmin, this.xmax = i.xmax, this.ymin = i.ymin, this.ymax = i.ymax, this;\n  }\n  width() {\n    return this.xmax - this.xmin;\n  }\n  height() {\n    return this.ymax - this.ymin;\n  }\n  maxDimension() {\n    return Math.max(this.width(), this.height());\n  }\n  minDimension() {\n    return Math.min(this.width(), this.height());\n  }\n  sqrDiagonal() {\n    const i = this.width(),\n      t = this.height();\n    return i * i + t * t;\n  }\n  diagonal() {\n    return Math.sqrt(this.sqrDiagonal());\n  }\n  getCenterX() {\n    return .5 * (this.xmin + this.xmax);\n  }\n  getCenterY() {\n    return .5 * (this.ymin + this.ymax);\n  }\n  getCenter() {\n    return s.construct(this.getCenterX(), this.getCenterY());\n  }\n  queryCenter(i) {\n    i.x = .5 * (this.xmin + this.xmax), i.y = .5 * (this.ymin + this.ymax);\n  }\n  setEmpty() {\n    this.xmin = Number.NaN, this.ymin = Number.NaN, this.xmax = Number.NaN, this.ymax = Number.NaN;\n  }\n  setInfinite() {\n    this.xmin = Number.NEGATIVE_INFINITY, this.xmax = Number.POSITIVE_INFINITY, this.ymin = Number.NEGATIVE_INFINITY, this.ymax = Number.POSITIVE_INFINITY;\n  }\n  isDegenerate(i) {\n    return !this.isEmpty() && (this.width() <= i || this.height() <= i);\n  }\n  isZero() {\n    return !(this.isEmpty() || this.width() && this.height());\n  }\n  isEmpty() {\n    return Number.isNaN(this.xmin) || Number.isNaN(this.ymin) || Number.isNaN(this.xmax) || Number.isNaN(this.ymax);\n  }\n  mergeNeCoords(i, t) {\n    this.xmin > i ? this.xmin = i : this.xmax < i && (this.xmax = i), this.ymin > t ? this.ymin = t : this.ymax < t && (this.ymax = t);\n  }\n  mergeNe(i) {\n    this.mergeNeCoords(i.x, i.y);\n  }\n  mergeCoords(i, t) {\n    this.isEmpty() ? (this.xmin = i, this.ymin = t, this.xmax = i, this.ymax = t) : (this.xmin > i ? this.xmin = i : this.xmax < i && (this.xmax = i), this.ymin > t ? this.ymin = t : this.ymax < t && (this.ymax = t));\n  }\n  merge(i) {\n    this.mergeCoords(i.x, i.y);\n  }\n  mergeEnvelope2D(i) {\n    i.isEmpty() || (this.mergeCoords(i.xmin, i.ymin), this.mergeNeCoords(i.xmax, i.ymax));\n  }\n  mergePoints(i, t) {\n    for (let s = 0; s < t;) {\n      if (!this.isEmpty()) {\n        for (let m = s; m < t; m++) this.mergeNe(i[m]);\n        break;\n      }\n      this.setCoords(i[s]), s++;\n    }\n  }\n  mergePointsInterleaved(i, t, s) {\n    for (let m = 2 * t, h = m + 2 * s; m < h; m += 2) this.mergeCoords(i.read(m), i.read(m + 1));\n  }\n  inflateCoords(i, t) {\n    this.isEmpty() || (this.xmin -= i, this.xmax += i, this.ymin -= t, this.ymax += t, (this.xmin > this.xmax || this.ymin > this.ymax) && this.setEmpty());\n  }\n  getInflatedCoords(i, t) {\n    const s = this.clone();\n    return s.inflateCoords(i, t), s;\n  }\n  inflate(i) {\n    this.inflateCoords(i, i);\n  }\n  getInflated(i) {\n    const t = this.clone();\n    return t.inflateCoords(i, i), t;\n  }\n  zoom(i, t) {\n    this.isEmpty() || this.setCoords({\n      center: this.getCenter(),\n      width: i * this.width(),\n      height: t * this.height()\n    });\n  }\n  scale(i) {\n    i < 0 && this.setEmpty(), this.xmin *= i, this.xmax *= i, this.ymin *= i, this.ymax *= i;\n  }\n  equals(i, t) {\n    return !(!this.isEmpty() || !i.isEmpty()) || (t ? Math.abs(this.xmin - i.xmin) <= t && Math.abs(this.ymin - i.ymin) <= t && Math.abs(this.xmax - i.xmax) <= t && Math.abs(this.ymax - i.ymax) <= t : this.xmin === i.xmin && this.ymin === i.ymin && this.xmax === i.xmax && this.ymax === i.ymax);\n  }\n  setCoords(t) {\n    void 0 !== t.xmin ? (this.xmin = t.xmin, this.xmax = t.xmax, this.ymin = t.ymin, this.ymax = t.ymax) : void 0 !== t.x ? (this.xmin = t.x, this.xmax = t.x, this.ymin = t.y, this.ymax = t.y) : void 0 !== t.pt1 ? (this.xmin = t.pt1.x, this.ymin = t.pt1.y, this.xmax = t.pt2.x, this.ymax = t.pt2.y, this.normalize()) : void 0 !== t.env2D ? (this.xmin = t.env2D.xmin, this.xmax = t.env2D.xmax, this.ymin = t.env2D.ymin, this.ymax = t.env2D.ymax, this.normalize()) : void 0 !== t.pt ? (this.xmin = t.pt.x, this.xmax = t.pt.x, this.ymin = t.pt.y, this.ymax = t.pt.y) : void 0 !== t.center ? (this.xmin = t.center.x - .5 * t.width, this.xmax = this.xmin + t.width, this.ymin = t.center.y - .5 * t.height, this.ymax = this.ymin + t.height, this.normalize()) : i(\"unrecognized input type for setCoords\"), this.normalize();\n  }\n  queryIntervalX(i) {\n    this.isEmpty() ? i.setEmpty() : i.setCoords(this.xmin, this.xmax);\n  }\n  queryIntervalY(i) {\n    this.isEmpty() ? i.setEmpty() : i.setCoords(this.ymin, this.ymax);\n  }\n  setFromPoints(i, t) {\n    if (0 === t) return void this.setEmpty();\n    if (Array.isArray(i)) {\n      const s = i;\n      this.setCoords(s[0]);\n      for (let i = 1; i < t;) {\n        if (!this.isEmpty()) {\n          for (let m = i; m < t; m++) this.mergeNe(s[m]);\n          return;\n        }\n        this.setCoords(s[i]), i++;\n      }\n      return;\n    }\n    const s = i;\n    this.setCoords({\n      x: s[0],\n      y: s[1]\n    });\n    for (let m = 1, h = 2 * t; m < h; m += 2) {\n      if (!this.isEmpty()) {\n        for (let i = m, h = 2 * t; i < h; i += 2) this.mergeNeCoords(s[i], s[i + 1]);\n        return;\n      }\n      this.setCoords({\n        x: s[m],\n        y: s[m + 1]\n      }), m += 2;\n    }\n  }\n  normalize() {\n    let i = !1;\n    this.xmin <= this.xmax || ([this.xmin, this.xmax] = [this.xmax, this.xmin], i = !0), this.ymin <= this.ymax || ([this.ymin, this.ymax] = [this.ymax, this.ymin], i = !0), !i || this.xmin <= this.xmax && this.ymin <= this.ymax || this.setEmpty();\n  }\n  isValid() {\n    return this.isEmpty() || this.xmin <= this.xmax && this.ymin <= this.ymax;\n  }\n  getLowerLeft() {\n    return new s(this.xmin, this.ymin);\n  }\n  getLowerRight() {\n    return new s(this.xmax, this.ymin);\n  }\n  getUpperLeft() {\n    return new s(this.xmin, this.ymax);\n  }\n  getUpperRight() {\n    return new s(this.xmax, this.ymax);\n  }\n  move(i, t) {\n    this.isEmpty() || (this.xmin += i, this.ymin += t, this.xmax += i, this.ymax += t);\n  }\n  centerAtCoords(i, t) {\n    this.move(i - this.getCenterX(), t - this.getCenterY());\n  }\n  centerAt(i) {\n    this.centerAtCoords(i.x, i.y);\n  }\n  containsCoords(i, t) {\n    return i >= this.xmin && i <= this.xmax && t >= this.ymin && t <= this.ymax;\n  }\n  contains(i) {\n    return this.containsCoords(i.x, i.y);\n  }\n  containsEnvelope(i) {\n    return i.xmin >= this.xmin && i.xmax <= this.xmax && i.ymin >= this.ymin && i.ymax <= this.ymax;\n  }\n  containsExclusiveCoords(i, t) {\n    return i > this.xmin && i < this.xmax && t > this.ymin && t < this.ymax;\n  }\n  containsExclusive(i) {\n    return this.containsExclusiveCoords(i.x, i.y);\n  }\n  containsExclusiveEnvelope(i) {\n    return i.xmin > this.xmin && i.xmax < this.xmax && i.ymin > this.ymin && i.ymax < this.ymax;\n  }\n  isIntersecting(i) {\n    return (this.xmin <= i.xmin ? this.xmax >= i.xmin : i.xmax >= this.xmin) && (this.ymin <= i.ymin ? this.ymax >= i.ymin : i.ymax >= this.ymin);\n  }\n  isIntersectingNe(i) {\n    return (this.xmin <= i.xmin ? this.xmax >= i.xmin : i.xmax >= this.xmin) && (this.ymin <= i.ymin ? this.ymax >= i.ymin : i.ymax >= this.ymin);\n  }\n  intersect(i) {\n    if (this.isEmpty()) return !1;\n    if (i.isEmpty()) return this.setEmpty(), !1;\n    i.xmin > this.xmin && (this.xmin = i.xmin), i.xmax < this.xmax && (this.xmax = i.xmax), i.ymin > this.ymin && (this.ymin = i.ymin), i.ymax < this.ymax && (this.ymax = i.ymax);\n    const t = this.xmin <= this.xmax && this.ymin <= this.ymax;\n    return t || this.setEmpty(), t;\n  }\n  queryCorner(i) {\n    switch (3 & i) {\n      case 0:\n        return new s(this.xmin, this.ymin);\n      case 1:\n        return new s(this.xmin, this.ymax);\n      case 2:\n        return new s(this.xmax, this.ymax);\n      default:\n        return new s(this.xmax, this.ymin);\n    }\n  }\n  queryCorners(i) {\n    i[0].setCoords(this.xmin, this.ymin), i[1].setCoords(this.xmin, this.ymax), i[2].setCoords(this.xmax, this.ymax), i[3].setCoords(this.xmax, this.ymin);\n  }\n  queryCornersReversed(i) {\n    i[0].setCoords(this.xmin, this.ymin), i[1].setCoords(this.xmax, this.ymin), i[2].setCoords(this.xmax, this.ymax), i[3].setCoords(this.xmin, this.ymax);\n  }\n  reaspect(i, t) {\n    if (this.isEmpty()) return;\n    const s = i / t,\n      m = .5 * this.width(),\n      h = .5 * this.height() * s;\n    if (m <= h) {\n      const i = this.getCenterX();\n      this.xmin = i - h, this.xmax = i + h;\n    } else {\n      const i = m / s,\n        t = this.getCenterY();\n      this.ymin = t - i, this.ymax = t + i;\n    }\n    this.normalize();\n  }\n  getArea() {\n    return this.isEmpty() ? 0 : this.width() * this.height();\n  }\n  getLength() {\n    return this.isEmpty() ? 0 : 2 * (this.width() + this.height());\n  }\n  clipCode(i) {\n    return (i.x < this.xmin ? 1 : 0) | (i.x > this.xmax ? 1 : 0) << 1 | (i.y < this.ymin ? 1 : 0) << 2 | (i.y > this.ymax ? 1 : 0) << 3;\n  }\n  clipLine(i, t) {\n    let s = this.clipCode(i),\n      m = this.clipCode(t);\n    if (s & m) return 0;\n    if (!(s | m)) return 4;\n    const h = (s ? 1 : 0) | (m ? 2 : 0);\n    do {\n      const h = t.x - i.x,\n        x = t.y - i.y;\n      if (Math.abs(h) > Math.abs(x) ? s & n.XMASK ? (s & n.XLESSXMIN ? (i.y += x * (this.xmin - i.x) / h, i.x = this.xmin) : (i.y += x * (this.xmax - i.x) / h, i.x = this.xmax), s = this.clipCode(i)) : m & n.XMASK ? (m & n.XLESSXMIN ? (t.y += x * (this.xmin - t.x) / h, t.x = this.xmin) : (t.y += x * (this.xmax - t.x) / h, t.x = this.xmax), m = this.clipCode(t)) : s ? (s & n.YLESSYMIN ? (i.x += h * (this.ymin - i.y) / x, i.y = this.ymin) : (i.x += h * (this.ymax - i.y) / x, i.y = this.ymax), s = this.clipCode(i)) : (m & n.YLESSYMIN ? (t.x += h * (this.ymin - t.y) / x, t.y = this.ymin) : (t.x += h * (this.ymax - t.y) / x, t.y = this.ymax), m = this.clipCode(t)) : s & n.YMASK ? (s & n.YLESSYMIN ? (i.x += h * (this.ymin - i.y) / x, i.y = this.ymin) : (i.x += h * (this.ymax - i.y) / x, i.y = this.ymax), s = this.clipCode(i)) : m & n.YMASK ? (m & n.YLESSYMIN ? (t.x += h * (this.ymin - t.y) / x, t.y = this.ymin) : (t.x += h * (this.ymax - t.y) / x, t.y = this.ymax), m = this.clipCode(t)) : s ? (s & n.XLESSXMIN ? (i.y += x * (this.xmin - i.x) / h, i.x = this.xmin) : (i.y += x * (this.xmax - i.x) / h, i.x = this.xmax), s = this.clipCode(i)) : (m & n.XLESSXMIN ? (t.y += x * (this.xmin - t.x) / h, t.x = this.xmin) : (t.y += x * (this.xmax - t.x) / h, t.x = this.xmax), m = this.clipCode(t)), s & m) return 0;\n    } while (s | m);\n    return h;\n  }\n  distanceFromEnvelope(i) {\n    return Math.sqrt(this.sqrDistanceEnvelope(i, null, null));\n  }\n  distance(i) {\n    return Math.sqrt(this.sqrDistance(i));\n  }\n  sqrDistanceEnvelope(i, t, s) {\n    if (!t && !s) {\n      if (this.isEmpty() || i.isEmpty()) return Number.NaN;\n      let t,\n        s = 0,\n        m = 0;\n      return t = this.xmin - i.xmax, t > s && (s = t), t = this.ymin - i.ymax, t > m && (m = t), t = i.xmin - this.xmax, t > s && (s = t), t = i.ymin - this.ymax, t > m && (m = t), s * s + m * m;\n    }\n    if (this.isEmpty() || i.isEmpty()) return t && t.setNAN(), s && s.setNAN(), Number.NaN;\n    let m,\n      h = 0,\n      x = 0;\n    const n = Math.max(this.xmin, i.xmin),\n      e = Math.max(this.ymin, i.ymin);\n    return t && t.setCoords(n, e), s && s.setCoords(n, e), m = this.xmin - i.xmax, m > h && (h = m, t && (t.x = this.xmin), s && (s.x = i.xmax)), m = this.ymin - i.ymax, m > x && (x = m, t && (t.y = this.ymin), s && (s.y = i.ymax)), m = i.xmin - this.xmax, m > h && (h = m, t && (t.x = this.xmax), s && (s.x = i.xmin)), m = i.ymin - this.ymax, m > x && (x = m, t && (t.y = this.ymax), s && (s.y = i.ymin)), h * h + x * x;\n  }\n  sqrDistance(i, t) {\n    if (void 0 === t) {\n      if (this.isEmpty() || i.isNAN()) return Number.NaN;\n      let t,\n        s = 0,\n        m = 0;\n      return t = this.xmin - i.x, t > s && (s = t), t = this.ymin - i.y, t > m && (m = t), t = i.x - this.xmax, t > s && (s = t), t = i.y - this.ymax, t > m && (m = t), s * s + m * m;\n    }\n    if (this.isEmpty() || i.isNAN()) return t.setNAN(), Number.NaN;\n    t.assign(i);\n    let s,\n      m = 0,\n      h = 0;\n    return s = this.xmin - i.x, s > m && (m = s, t.x = this.xmin), s = this.ymin - i.y, s > h && (h = s, t.y = this.ymin), s = i.x - this.xmax, s > m && (m = s, t.x = this.xmax), s = i.y - this.ymax, s > h && (h = s, t.y = this.ymax), m * m + h * h;\n  }\n  sqrMaxMinDistanceEnvelope(i) {\n    if (this.isEmpty() || i.isEmpty()) return Number.NaN;\n    let t = Number.MAX_VALUE;\n    {\n      const m = s.sqrDistanceCoords(this.xmin, this.ymin, i.xmax, i.ymin),\n        h = s.sqrDistanceCoords(this.xmin, this.ymin, i.xmax, i.ymax),\n        x = s.sqrDistanceCoords(this.xmin, this.ymax, i.xmax, i.ymin),\n        n = s.sqrDistanceCoords(this.xmin, this.ymax, i.xmax, i.ymax),\n        e = Math.max(m, h),\n        a = Math.max(x, n),\n        r = Math.max(e, a);\n      t = Math.min(r, t);\n    }\n    {\n      const m = s.sqrDistanceCoords(this.xmin, this.ymin, i.xmin, i.ymax),\n        h = s.sqrDistanceCoords(this.xmin, this.ymin, i.xmax, i.ymax),\n        x = s.sqrDistanceCoords(this.xmax, this.ymin, i.xmin, i.ymax),\n        n = s.sqrDistanceCoords(this.xmax, this.ymin, i.xmax, i.ymax),\n        e = Math.max(m, h),\n        a = Math.max(x, n),\n        r = Math.max(e, a);\n      t = Math.min(r, t);\n    }\n    {\n      const m = s.sqrDistanceCoords(this.xmax, this.ymin, i.xmin, i.ymin),\n        h = s.sqrDistanceCoords(this.xmax, this.ymin, i.xmin, i.ymax),\n        x = s.sqrDistanceCoords(this.xmax, this.ymax, i.xmin, i.ymin),\n        n = s.sqrDistanceCoords(this.xmax, this.ymax, i.xmin, i.ymax),\n        e = Math.max(m, h),\n        a = Math.max(x, n),\n        r = Math.max(e, a);\n      t = Math.min(r, t);\n    }\n    {\n      const m = s.sqrDistanceCoords(this.xmin, this.ymax, i.xmin, i.ymin),\n        h = s.sqrDistanceCoords(this.xmin, this.ymax, i.xmax, i.ymin),\n        x = s.sqrDistanceCoords(this.xmax, this.ymax, i.xmin, i.ymin),\n        n = s.sqrDistanceCoords(this.xmax, this.ymax, i.xmax, i.ymin),\n        e = Math.max(m, h),\n        a = Math.max(x, n),\n        r = Math.max(e, a);\n      t = Math.min(r, t);\n    }\n    return t;\n  }\n  sqrMaxDistanceEnvelope(i) {\n    if (this.isEmpty() || i.isEmpty()) return Number.NaN;\n    let t = 0;\n    const h = m(s, 4);\n    this.queryCorners(h);\n    const x = m(s, 4);\n    i.queryCorners(x);\n    for (let m = 0; m < 4; m++) for (let i = 0; i < 4; i++) {\n      const n = s.sqrDistance(h[m], x[i]);\n      n > t && (t = n);\n    }\n    return t;\n  }\n  sqrMaxMinDistance(i) {\n    const t = s.sqrDistance(i, this.getLowerLeft()),\n      m = s.sqrDistance(i, this.getUpperLeft()),\n      h = s.sqrDistance(i, this.getLowerRight()),\n      x = s.sqrDistance(i, this.getUpperRight());\n    let n,\n      e = Math.max(t, m);\n    return n = Math.max(t, h), e > n && (e = n), n = Math.max(m, x), e > n && (e = n), n = Math.max(h, x), e > n && (e = n), e;\n  }\n  sqrMinDistance(i) {\n    if (this.contains(i)) return 0;\n    return this.sqrDistance(i);\n  }\n  sqrMaxDistance(i) {\n    let t = s.sqrDistance(i, this.getLowerLeft());\n    return t = Math.max(s.sqrDistance(i, this.getUpperLeft()), t), t = Math.max(s.sqrDistance(i, this.getUpperRight()), t), t = Math.max(s.sqrDistance(i, this.getLowerRight()), t), t;\n  }\n  snapToBoundary(i) {\n    if (i.isNAN()) return !1;\n    if (this.isEmpty()) return i.setNAN(), !0;\n    let t = !0;\n    if (i.x < this.xmin ? i.x = this.xmin : i.x > this.xmax ? i.x = this.xmax : t = !1, i.y < this.ymin ? i.y = this.ymin : i.y > this.ymax ? i.y = this.ymax : t = !1, t) return !0;\n    if (i.x === this.xmin || i.x === this.xmax || i.y === this.ymin || i.y === this.ymax) return !1;\n    const s = this.xmax - i.x,\n      m = i.x - this.xmin,\n      h = this.ymax - i.y,\n      x = i.y - this.ymin;\n    return Math.max(s, m) > Math.max(h, x) ? i.y = x < h ? this.ymin : this.ymax : i.x = m < s ? this.xmin : this.xmax, !0;\n  }\n  snapClip(i) {\n    const t = h(i.x, this.xmin, this.xmax),\n      m = h(i.y, this.ymin, this.ymax);\n    return s.construct(t, m);\n  }\n  boundaryDistance(i) {\n    if (this.isEmpty() || i.isNAN()) return Number.NaN;\n    if (i.x === this.xmin) return i.y - this.ymin;\n    const t = this.ymax - this.ymin,\n      m = this.xmax - this.xmin;\n    if (i.y === this.ymax) return t + i.x - this.xmin;\n    if (i.x === this.xmax) return t + m + this.ymax - i.y;\n    if (i.y === this.ymin) return 2 * t + m + this.xmax - i.x;\n    const h = new s();\n    return h.setCoordsPoint2D(i), this.snapToBoundary(h), this.boundaryDistance(h);\n  }\n  envelopeSide(i) {\n    if (this.isEmpty()) return -1;\n    let t = this.boundaryDistance(i);\n    const s = this.ymax - this.ymin,\n      m = this.xmax - this.xmin;\n    return t < s ? 0 : (t -= s) < m ? 1 : t - m < s ? 2 : 3;\n  }\n  querySide(i, s) {\n    switch (i) {\n      case 0:\n        s.constructFromCoords(this.xmin, this.ymin, this.xmin, this.ymax);\n        break;\n      case 1:\n        s.constructFromCoords(this.xmin, this.ymax, this.xmax, this.ymax);\n        break;\n      case 2:\n        s.constructFromCoords(this.xmax, this.ymax, this.xmax, this.ymin);\n        break;\n      case 3:\n        s.constructFromCoords(this.xmax, this.ymin, this.xmin, this.ymin);\n        break;\n      default:\n        t(\"query_side\");\n    }\n    return s;\n  }\n  isPointOnBoundary(i, t) {\n    return Math.abs(i.x - this.xmin) <= t || Math.abs(i.x - this.xmax) <= t || Math.abs(i.y - this.ymin) <= t || Math.abs(i.y - this.ymax) <= t;\n  }\n  calculateToleranceFromEnvelope() {\n    if (this.isEmpty()) return x();\n    return (Math.abs(this.xmin) + Math.abs(this.xmax) + Math.abs(this.ymin) + Math.abs(this.ymax) + 1) * x();\n  }\n  toString() {\n    return `[${this.xmin}, ${this.ymin}, ${this.xmax}, ${this.ymax}]`;\n  }\n}\nn.XLESSXMIN = 1, n.YLESSYMIN = 4, n.XMASK = 3, n.YMASK = 12;\nexport { n as Envelope2D };","map":{"version":3,"names":["b","i","t","P","s","m","c","h","g","x","n","construct","constructor","m_EnvelopeType","xmin","Number","NaN","ymin","xmax","ymax","normalize","constructEmpty","clone","assign","width","height","maxDimension","Math","max","minDimension","min","sqrDiagonal","diagonal","sqrt","getCenterX","getCenterY","getCenter","queryCenter","y","setEmpty","setInfinite","NEGATIVE_INFINITY","POSITIVE_INFINITY","isDegenerate","isEmpty","isZero","isNaN","mergeNeCoords","mergeNe","mergeCoords","merge","mergeEnvelope2D","mergePoints","setCoords","mergePointsInterleaved","read","inflateCoords","getInflatedCoords","inflate","getInflated","zoom","center","scale","equals","abs","pt1","pt2","env2D","pt","queryIntervalX","queryIntervalY","setFromPoints","Array","isArray","isValid","getLowerLeft","getLowerRight","getUpperLeft","getUpperRight","move","centerAtCoords","centerAt","containsCoords","contains","containsEnvelope","containsExclusiveCoords","containsExclusive","containsExclusiveEnvelope","isIntersecting","isIntersectingNe","intersect","queryCorner","queryCorners","queryCornersReversed","reaspect","getArea","getLength","clipCode","clipLine","XMASK","XLESSXMIN","YLESSYMIN","YMASK","distanceFromEnvelope","sqrDistanceEnvelope","distance","sqrDistance","setNAN","e","isNAN","sqrMaxMinDistanceEnvelope","MAX_VALUE","sqrDistanceCoords","a","r","sqrMaxDistanceEnvelope","sqrMaxMinDistance","sqrMinDistance","sqrMaxDistance","snapToBoundary","snapClip","boundaryDistance","setCoordsPoint2D","envelopeSide","querySide","constructFromCoords","isPointOnBoundary","calculateToleranceFromEnvelope","toString","Envelope2D"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/node_modules/@arcgis/core/chunks/Envelope2D.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{b as i,t}from\"./Geometry.js\";import{P as s,m,c as h,g as x}from\"./Point2D.js\";class n{static construct(i,t,s,m){return new n(i,t,s,m)}constructor(i,t,s,m){this.m_EnvelopeType=2,void 0===i?(this.xmin=Number.NaN,this.ymin=Number.NaN,this.xmax=Number.NaN,this.ymax=Number.NaN):\"number\"==typeof i?(this.xmin=i,this.ymin=t,this.xmax=s,this.ymax=m):(this.xmin=i.xmin,this.ymin=i.ymin,this.xmax=i.xmax,this.ymax=i.ymax),this.normalize()}static constructEmpty(){return new n(Number.NaN,Number.NaN,Number.NaN,Number.NaN)}clone(){return new n(this)}assign(i){return this.xmin=i.xmin,this.xmax=i.xmax,this.ymin=i.ymin,this.ymax=i.ymax,this}width(){return this.xmax-this.xmin}height(){return this.ymax-this.ymin}maxDimension(){return Math.max(this.width(),this.height())}minDimension(){return Math.min(this.width(),this.height())}sqrDiagonal(){const i=this.width(),t=this.height();return i*i+t*t}diagonal(){return Math.sqrt(this.sqrDiagonal())}getCenterX(){return.5*(this.xmin+this.xmax)}getCenterY(){return.5*(this.ymin+this.ymax)}getCenter(){return s.construct(this.getCenterX(),this.getCenterY())}queryCenter(i){i.x=.5*(this.xmin+this.xmax),i.y=.5*(this.ymin+this.ymax)}setEmpty(){this.xmin=Number.NaN,this.ymin=Number.NaN,this.xmax=Number.NaN,this.ymax=Number.NaN}setInfinite(){this.xmin=Number.NEGATIVE_INFINITY,this.xmax=Number.POSITIVE_INFINITY,this.ymin=Number.NEGATIVE_INFINITY,this.ymax=Number.POSITIVE_INFINITY}isDegenerate(i){return!this.isEmpty()&&(this.width()<=i||this.height()<=i)}isZero(){return!(this.isEmpty()||this.width()&&this.height())}isEmpty(){return Number.isNaN(this.xmin)||Number.isNaN(this.ymin)||Number.isNaN(this.xmax)||Number.isNaN(this.ymax)}mergeNeCoords(i,t){this.xmin>i?this.xmin=i:this.xmax<i&&(this.xmax=i),this.ymin>t?this.ymin=t:this.ymax<t&&(this.ymax=t)}mergeNe(i){this.mergeNeCoords(i.x,i.y)}mergeCoords(i,t){this.isEmpty()?(this.xmin=i,this.ymin=t,this.xmax=i,this.ymax=t):(this.xmin>i?this.xmin=i:this.xmax<i&&(this.xmax=i),this.ymin>t?this.ymin=t:this.ymax<t&&(this.ymax=t))}merge(i){this.mergeCoords(i.x,i.y)}mergeEnvelope2D(i){i.isEmpty()||(this.mergeCoords(i.xmin,i.ymin),this.mergeNeCoords(i.xmax,i.ymax))}mergePoints(i,t){for(let s=0;s<t;){if(!this.isEmpty()){for(let m=s;m<t;m++)this.mergeNe(i[m]);break}this.setCoords(i[s]),s++}}mergePointsInterleaved(i,t,s){for(let m=2*t,h=m+2*s;m<h;m+=2)this.mergeCoords(i.read(m),i.read(m+1))}inflateCoords(i,t){this.isEmpty()||(this.xmin-=i,this.xmax+=i,this.ymin-=t,this.ymax+=t,(this.xmin>this.xmax||this.ymin>this.ymax)&&this.setEmpty())}getInflatedCoords(i,t){const s=this.clone();return s.inflateCoords(i,t),s}inflate(i){this.inflateCoords(i,i)}getInflated(i){const t=this.clone();return t.inflateCoords(i,i),t}zoom(i,t){this.isEmpty()||this.setCoords({center:this.getCenter(),width:i*this.width(),height:t*this.height()})}scale(i){i<0&&this.setEmpty(),this.xmin*=i,this.xmax*=i,this.ymin*=i,this.ymax*=i}equals(i,t){return!(!this.isEmpty()||!i.isEmpty())||(t?Math.abs(this.xmin-i.xmin)<=t&&Math.abs(this.ymin-i.ymin)<=t&&Math.abs(this.xmax-i.xmax)<=t&&Math.abs(this.ymax-i.ymax)<=t:this.xmin===i.xmin&&this.ymin===i.ymin&&this.xmax===i.xmax&&this.ymax===i.ymax)}setCoords(t){void 0!==t.xmin?(this.xmin=t.xmin,this.xmax=t.xmax,this.ymin=t.ymin,this.ymax=t.ymax):void 0!==t.x?(this.xmin=t.x,this.xmax=t.x,this.ymin=t.y,this.ymax=t.y):void 0!==t.pt1?(this.xmin=t.pt1.x,this.ymin=t.pt1.y,this.xmax=t.pt2.x,this.ymax=t.pt2.y,this.normalize()):void 0!==t.env2D?(this.xmin=t.env2D.xmin,this.xmax=t.env2D.xmax,this.ymin=t.env2D.ymin,this.ymax=t.env2D.ymax,this.normalize()):void 0!==t.pt?(this.xmin=t.pt.x,this.xmax=t.pt.x,this.ymin=t.pt.y,this.ymax=t.pt.y):void 0!==t.center?(this.xmin=t.center.x-.5*t.width,this.xmax=this.xmin+t.width,this.ymin=t.center.y-.5*t.height,this.ymax=this.ymin+t.height,this.normalize()):i(\"unrecognized input type for setCoords\"),this.normalize()}queryIntervalX(i){this.isEmpty()?i.setEmpty():i.setCoords(this.xmin,this.xmax)}queryIntervalY(i){this.isEmpty()?i.setEmpty():i.setCoords(this.ymin,this.ymax)}setFromPoints(i,t){if(0===t)return void this.setEmpty();if(Array.isArray(i)){const s=i;this.setCoords(s[0]);for(let i=1;i<t;){if(!this.isEmpty()){for(let m=i;m<t;m++)this.mergeNe(s[m]);return}this.setCoords(s[i]),i++}return}const s=i;this.setCoords({x:s[0],y:s[1]});for(let m=1,h=2*t;m<h;m+=2){if(!this.isEmpty()){for(let i=m,h=2*t;i<h;i+=2)this.mergeNeCoords(s[i],s[i+1]);return}this.setCoords({x:s[m],y:s[m+1]}),m+=2}}normalize(){let i=!1;this.xmin<=this.xmax||([this.xmin,this.xmax]=[this.xmax,this.xmin],i=!0),this.ymin<=this.ymax||([this.ymin,this.ymax]=[this.ymax,this.ymin],i=!0),!i||this.xmin<=this.xmax&&this.ymin<=this.ymax||this.setEmpty()}isValid(){return this.isEmpty()||this.xmin<=this.xmax&&this.ymin<=this.ymax}getLowerLeft(){return new s(this.xmin,this.ymin)}getLowerRight(){return new s(this.xmax,this.ymin)}getUpperLeft(){return new s(this.xmin,this.ymax)}getUpperRight(){return new s(this.xmax,this.ymax)}move(i,t){this.isEmpty()||(this.xmin+=i,this.ymin+=t,this.xmax+=i,this.ymax+=t)}centerAtCoords(i,t){this.move(i-this.getCenterX(),t-this.getCenterY())}centerAt(i){this.centerAtCoords(i.x,i.y)}containsCoords(i,t){return i>=this.xmin&&i<=this.xmax&&t>=this.ymin&&t<=this.ymax}contains(i){return this.containsCoords(i.x,i.y)}containsEnvelope(i){return i.xmin>=this.xmin&&i.xmax<=this.xmax&&i.ymin>=this.ymin&&i.ymax<=this.ymax}containsExclusiveCoords(i,t){return i>this.xmin&&i<this.xmax&&t>this.ymin&&t<this.ymax}containsExclusive(i){return this.containsExclusiveCoords(i.x,i.y)}containsExclusiveEnvelope(i){return i.xmin>this.xmin&&i.xmax<this.xmax&&i.ymin>this.ymin&&i.ymax<this.ymax}isIntersecting(i){return(this.xmin<=i.xmin?this.xmax>=i.xmin:i.xmax>=this.xmin)&&(this.ymin<=i.ymin?this.ymax>=i.ymin:i.ymax>=this.ymin)}isIntersectingNe(i){return(this.xmin<=i.xmin?this.xmax>=i.xmin:i.xmax>=this.xmin)&&(this.ymin<=i.ymin?this.ymax>=i.ymin:i.ymax>=this.ymin)}intersect(i){if(this.isEmpty())return!1;if(i.isEmpty())return this.setEmpty(),!1;i.xmin>this.xmin&&(this.xmin=i.xmin),i.xmax<this.xmax&&(this.xmax=i.xmax),i.ymin>this.ymin&&(this.ymin=i.ymin),i.ymax<this.ymax&&(this.ymax=i.ymax);const t=this.xmin<=this.xmax&&this.ymin<=this.ymax;return t||this.setEmpty(),t}queryCorner(i){switch(3&i){case 0:return new s(this.xmin,this.ymin);case 1:return new s(this.xmin,this.ymax);case 2:return new s(this.xmax,this.ymax);default:return new s(this.xmax,this.ymin)}}queryCorners(i){i[0].setCoords(this.xmin,this.ymin),i[1].setCoords(this.xmin,this.ymax),i[2].setCoords(this.xmax,this.ymax),i[3].setCoords(this.xmax,this.ymin)}queryCornersReversed(i){i[0].setCoords(this.xmin,this.ymin),i[1].setCoords(this.xmax,this.ymin),i[2].setCoords(this.xmax,this.ymax),i[3].setCoords(this.xmin,this.ymax)}reaspect(i,t){if(this.isEmpty())return;const s=i/t,m=.5*this.width(),h=.5*this.height()*s;if(m<=h){const i=this.getCenterX();this.xmin=i-h,this.xmax=i+h}else{const i=m/s,t=this.getCenterY();this.ymin=t-i,this.ymax=t+i}this.normalize()}getArea(){return this.isEmpty()?0:this.width()*this.height()}getLength(){return this.isEmpty()?0:2*(this.width()+this.height())}clipCode(i){return(i.x<this.xmin?1:0)|(i.x>this.xmax?1:0)<<1|(i.y<this.ymin?1:0)<<2|(i.y>this.ymax?1:0)<<3}clipLine(i,t){let s=this.clipCode(i),m=this.clipCode(t);if(s&m)return 0;if(!(s|m))return 4;const h=(s?1:0)|(m?2:0);do{const h=t.x-i.x,x=t.y-i.y;if(Math.abs(h)>Math.abs(x)?s&n.XMASK?(s&n.XLESSXMIN?(i.y+=x*(this.xmin-i.x)/h,i.x=this.xmin):(i.y+=x*(this.xmax-i.x)/h,i.x=this.xmax),s=this.clipCode(i)):m&n.XMASK?(m&n.XLESSXMIN?(t.y+=x*(this.xmin-t.x)/h,t.x=this.xmin):(t.y+=x*(this.xmax-t.x)/h,t.x=this.xmax),m=this.clipCode(t)):s?(s&n.YLESSYMIN?(i.x+=h*(this.ymin-i.y)/x,i.y=this.ymin):(i.x+=h*(this.ymax-i.y)/x,i.y=this.ymax),s=this.clipCode(i)):(m&n.YLESSYMIN?(t.x+=h*(this.ymin-t.y)/x,t.y=this.ymin):(t.x+=h*(this.ymax-t.y)/x,t.y=this.ymax),m=this.clipCode(t)):s&n.YMASK?(s&n.YLESSYMIN?(i.x+=h*(this.ymin-i.y)/x,i.y=this.ymin):(i.x+=h*(this.ymax-i.y)/x,i.y=this.ymax),s=this.clipCode(i)):m&n.YMASK?(m&n.YLESSYMIN?(t.x+=h*(this.ymin-t.y)/x,t.y=this.ymin):(t.x+=h*(this.ymax-t.y)/x,t.y=this.ymax),m=this.clipCode(t)):s?(s&n.XLESSXMIN?(i.y+=x*(this.xmin-i.x)/h,i.x=this.xmin):(i.y+=x*(this.xmax-i.x)/h,i.x=this.xmax),s=this.clipCode(i)):(m&n.XLESSXMIN?(t.y+=x*(this.xmin-t.x)/h,t.x=this.xmin):(t.y+=x*(this.xmax-t.x)/h,t.x=this.xmax),m=this.clipCode(t)),s&m)return 0}while(s|m);return h}distanceFromEnvelope(i){return Math.sqrt(this.sqrDistanceEnvelope(i,null,null))}distance(i){return Math.sqrt(this.sqrDistance(i))}sqrDistanceEnvelope(i,t,s){if(!t&&!s){if(this.isEmpty()||i.isEmpty())return Number.NaN;let t,s=0,m=0;return t=this.xmin-i.xmax,t>s&&(s=t),t=this.ymin-i.ymax,t>m&&(m=t),t=i.xmin-this.xmax,t>s&&(s=t),t=i.ymin-this.ymax,t>m&&(m=t),s*s+m*m}if(this.isEmpty()||i.isEmpty())return t&&t.setNAN(),s&&s.setNAN(),Number.NaN;let m,h=0,x=0;const n=Math.max(this.xmin,i.xmin),e=Math.max(this.ymin,i.ymin);return t&&t.setCoords(n,e),s&&s.setCoords(n,e),m=this.xmin-i.xmax,m>h&&(h=m,t&&(t.x=this.xmin),s&&(s.x=i.xmax)),m=this.ymin-i.ymax,m>x&&(x=m,t&&(t.y=this.ymin),s&&(s.y=i.ymax)),m=i.xmin-this.xmax,m>h&&(h=m,t&&(t.x=this.xmax),s&&(s.x=i.xmin)),m=i.ymin-this.ymax,m>x&&(x=m,t&&(t.y=this.ymax),s&&(s.y=i.ymin)),h*h+x*x}sqrDistance(i,t){if(void 0===t){if(this.isEmpty()||i.isNAN())return Number.NaN;let t,s=0,m=0;return t=this.xmin-i.x,t>s&&(s=t),t=this.ymin-i.y,t>m&&(m=t),t=i.x-this.xmax,t>s&&(s=t),t=i.y-this.ymax,t>m&&(m=t),s*s+m*m}if(this.isEmpty()||i.isNAN())return t.setNAN(),Number.NaN;t.assign(i);let s,m=0,h=0;return s=this.xmin-i.x,s>m&&(m=s,t.x=this.xmin),s=this.ymin-i.y,s>h&&(h=s,t.y=this.ymin),s=i.x-this.xmax,s>m&&(m=s,t.x=this.xmax),s=i.y-this.ymax,s>h&&(h=s,t.y=this.ymax),m*m+h*h}sqrMaxMinDistanceEnvelope(i){if(this.isEmpty()||i.isEmpty())return Number.NaN;let t=Number.MAX_VALUE;{const m=s.sqrDistanceCoords(this.xmin,this.ymin,i.xmax,i.ymin),h=s.sqrDistanceCoords(this.xmin,this.ymin,i.xmax,i.ymax),x=s.sqrDistanceCoords(this.xmin,this.ymax,i.xmax,i.ymin),n=s.sqrDistanceCoords(this.xmin,this.ymax,i.xmax,i.ymax),e=Math.max(m,h),a=Math.max(x,n),r=Math.max(e,a);t=Math.min(r,t)}{const m=s.sqrDistanceCoords(this.xmin,this.ymin,i.xmin,i.ymax),h=s.sqrDistanceCoords(this.xmin,this.ymin,i.xmax,i.ymax),x=s.sqrDistanceCoords(this.xmax,this.ymin,i.xmin,i.ymax),n=s.sqrDistanceCoords(this.xmax,this.ymin,i.xmax,i.ymax),e=Math.max(m,h),a=Math.max(x,n),r=Math.max(e,a);t=Math.min(r,t)}{const m=s.sqrDistanceCoords(this.xmax,this.ymin,i.xmin,i.ymin),h=s.sqrDistanceCoords(this.xmax,this.ymin,i.xmin,i.ymax),x=s.sqrDistanceCoords(this.xmax,this.ymax,i.xmin,i.ymin),n=s.sqrDistanceCoords(this.xmax,this.ymax,i.xmin,i.ymax),e=Math.max(m,h),a=Math.max(x,n),r=Math.max(e,a);t=Math.min(r,t)}{const m=s.sqrDistanceCoords(this.xmin,this.ymax,i.xmin,i.ymin),h=s.sqrDistanceCoords(this.xmin,this.ymax,i.xmax,i.ymin),x=s.sqrDistanceCoords(this.xmax,this.ymax,i.xmin,i.ymin),n=s.sqrDistanceCoords(this.xmax,this.ymax,i.xmax,i.ymin),e=Math.max(m,h),a=Math.max(x,n),r=Math.max(e,a);t=Math.min(r,t)}return t}sqrMaxDistanceEnvelope(i){if(this.isEmpty()||i.isEmpty())return Number.NaN;let t=0;const h=m(s,4);this.queryCorners(h);const x=m(s,4);i.queryCorners(x);for(let m=0;m<4;m++)for(let i=0;i<4;i++){const n=s.sqrDistance(h[m],x[i]);n>t&&(t=n)}return t}sqrMaxMinDistance(i){const t=s.sqrDistance(i,this.getLowerLeft()),m=s.sqrDistance(i,this.getUpperLeft()),h=s.sqrDistance(i,this.getLowerRight()),x=s.sqrDistance(i,this.getUpperRight());let n,e=Math.max(t,m);return n=Math.max(t,h),e>n&&(e=n),n=Math.max(m,x),e>n&&(e=n),n=Math.max(h,x),e>n&&(e=n),e}sqrMinDistance(i){if(this.contains(i))return 0;return this.sqrDistance(i)}sqrMaxDistance(i){let t=s.sqrDistance(i,this.getLowerLeft());return t=Math.max(s.sqrDistance(i,this.getUpperLeft()),t),t=Math.max(s.sqrDistance(i,this.getUpperRight()),t),t=Math.max(s.sqrDistance(i,this.getLowerRight()),t),t}snapToBoundary(i){if(i.isNAN())return!1;if(this.isEmpty())return i.setNAN(),!0;let t=!0;if(i.x<this.xmin?i.x=this.xmin:i.x>this.xmax?i.x=this.xmax:t=!1,i.y<this.ymin?i.y=this.ymin:i.y>this.ymax?i.y=this.ymax:t=!1,t)return!0;if(i.x===this.xmin||i.x===this.xmax||i.y===this.ymin||i.y===this.ymax)return!1;const s=this.xmax-i.x,m=i.x-this.xmin,h=this.ymax-i.y,x=i.y-this.ymin;return Math.max(s,m)>Math.max(h,x)?i.y=x<h?this.ymin:this.ymax:i.x=m<s?this.xmin:this.xmax,!0}snapClip(i){const t=h(i.x,this.xmin,this.xmax),m=h(i.y,this.ymin,this.ymax);return s.construct(t,m)}boundaryDistance(i){if(this.isEmpty()||i.isNAN())return Number.NaN;if(i.x===this.xmin)return i.y-this.ymin;const t=this.ymax-this.ymin,m=this.xmax-this.xmin;if(i.y===this.ymax)return t+i.x-this.xmin;if(i.x===this.xmax)return t+m+this.ymax-i.y;if(i.y===this.ymin)return 2*t+m+this.xmax-i.x;const h=new s;return h.setCoordsPoint2D(i),this.snapToBoundary(h),this.boundaryDistance(h)}envelopeSide(i){if(this.isEmpty())return-1;let t=this.boundaryDistance(i);const s=this.ymax-this.ymin,m=this.xmax-this.xmin;return t<s?0:(t-=s)<m?1:t-m<s?2:3}querySide(i,s){switch(i){case 0:s.constructFromCoords(this.xmin,this.ymin,this.xmin,this.ymax);break;case 1:s.constructFromCoords(this.xmin,this.ymax,this.xmax,this.ymax);break;case 2:s.constructFromCoords(this.xmax,this.ymax,this.xmax,this.ymin);break;case 3:s.constructFromCoords(this.xmax,this.ymin,this.xmin,this.ymin);break;default:t(\"query_side\")}return s}isPointOnBoundary(i,t){return Math.abs(i.x-this.xmin)<=t||Math.abs(i.x-this.xmax)<=t||Math.abs(i.y-this.ymin)<=t||Math.abs(i.y-this.ymax)<=t}calculateToleranceFromEnvelope(){if(this.isEmpty())return x();return(Math.abs(this.xmin)+Math.abs(this.xmax)+Math.abs(this.ymin)+Math.abs(this.ymax)+1)*x()}toString(){return`[${this.xmin}, ${this.ymin}, ${this.xmax}, ${this.ymax}]`}}n.XLESSXMIN=1,n.YLESSYMIN=4,n.XMASK=3,n.YMASK=12;export{n as Envelope2D};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAAOA,CAAC,IAAIC,CAAC,EAACC,CAAC,QAAK,eAAe;AAAC,SAAOC,CAAC,IAAIC,CAAC,EAACC,CAAC,EAACC,CAAC,IAAIC,CAAC,EAACC,CAAC,IAAIC,CAAC,QAAK,cAAc;AAAC,MAAMC,CAAC;EAAC,OAAOC,SAASA,CAACV,CAAC,EAACC,CAAC,EAACE,CAAC,EAACC,CAAC,EAAC;IAAC,OAAO,IAAIK,CAAC,CAACT,CAAC,EAACC,CAAC,EAACE,CAAC,EAACC,CAAC,CAAC;EAAA;EAACO,WAAWA,CAACX,CAAC,EAACC,CAAC,EAACE,CAAC,EAACC,CAAC,EAAC;IAAC,IAAI,CAACQ,cAAc,GAAC,CAAC,EAAC,KAAK,CAAC,KAAGZ,CAAC,IAAE,IAAI,CAACa,IAAI,GAACC,MAAM,CAACC,GAAG,EAAC,IAAI,CAACC,IAAI,GAACF,MAAM,CAACC,GAAG,EAAC,IAAI,CAACE,IAAI,GAACH,MAAM,CAACC,GAAG,EAAC,IAAI,CAACG,IAAI,GAACJ,MAAM,CAACC,GAAG,IAAE,QAAQ,IAAE,OAAOf,CAAC,IAAE,IAAI,CAACa,IAAI,GAACb,CAAC,EAAC,IAAI,CAACgB,IAAI,GAACf,CAAC,EAAC,IAAI,CAACgB,IAAI,GAACd,CAAC,EAAC,IAAI,CAACe,IAAI,GAACd,CAAC,KAAG,IAAI,CAACS,IAAI,GAACb,CAAC,CAACa,IAAI,EAAC,IAAI,CAACG,IAAI,GAAChB,CAAC,CAACgB,IAAI,EAAC,IAAI,CAACC,IAAI,GAACjB,CAAC,CAACiB,IAAI,EAAC,IAAI,CAACC,IAAI,GAAClB,CAAC,CAACkB,IAAI,CAAC,EAAC,IAAI,CAACC,SAAS,CAAC,CAAC;EAAA;EAAC,OAAOC,cAAcA,CAAA,EAAE;IAAC,OAAO,IAAIX,CAAC,CAACK,MAAM,CAACC,GAAG,EAACD,MAAM,CAACC,GAAG,EAACD,MAAM,CAACC,GAAG,EAACD,MAAM,CAACC,GAAG,CAAC;EAAA;EAACM,KAAKA,CAAA,EAAE;IAAC,OAAO,IAAIZ,CAAC,CAAC,IAAI,CAAC;EAAA;EAACa,MAAMA,CAACtB,CAAC,EAAC;IAAC,OAAO,IAAI,CAACa,IAAI,GAACb,CAAC,CAACa,IAAI,EAAC,IAAI,CAACI,IAAI,GAACjB,CAAC,CAACiB,IAAI,EAAC,IAAI,CAACD,IAAI,GAAChB,CAAC,CAACgB,IAAI,EAAC,IAAI,CAACE,IAAI,GAAClB,CAAC,CAACkB,IAAI,EAAC,IAAI;EAAA;EAACK,KAAKA,CAAA,EAAE;IAAC,OAAO,IAAI,CAACN,IAAI,GAAC,IAAI,CAACJ,IAAI;EAAA;EAACW,MAAMA,CAAA,EAAE;IAAC,OAAO,IAAI,CAACN,IAAI,GAAC,IAAI,CAACF,IAAI;EAAA;EAACS,YAAYA,CAAA,EAAE;IAAC,OAAOC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACJ,KAAK,CAAC,CAAC,EAAC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;EAAA;EAACI,YAAYA,CAAA,EAAE;IAAC,OAAOF,IAAI,CAACG,GAAG,CAAC,IAAI,CAACN,KAAK,CAAC,CAAC,EAAC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;EAAA;EAACM,WAAWA,CAAA,EAAE;IAAC,MAAM9B,CAAC,GAAC,IAAI,CAACuB,KAAK,CAAC,CAAC;MAACtB,CAAC,GAAC,IAAI,CAACuB,MAAM,CAAC,CAAC;IAAC,OAAOxB,CAAC,GAACA,CAAC,GAACC,CAAC,GAACA,CAAC;EAAA;EAAC8B,QAAQA,CAAA,EAAE;IAAC,OAAOL,IAAI,CAACM,IAAI,CAAC,IAAI,CAACF,WAAW,CAAC,CAAC,CAAC;EAAA;EAACG,UAAUA,CAAA,EAAE;IAAC,OAAM,EAAE,IAAE,IAAI,CAACpB,IAAI,GAAC,IAAI,CAACI,IAAI,CAAC;EAAA;EAACiB,UAAUA,CAAA,EAAE;IAAC,OAAM,EAAE,IAAE,IAAI,CAAClB,IAAI,GAAC,IAAI,CAACE,IAAI,CAAC;EAAA;EAACiB,SAASA,CAAA,EAAE;IAAC,OAAOhC,CAAC,CAACO,SAAS,CAAC,IAAI,CAACuB,UAAU,CAAC,CAAC,EAAC,IAAI,CAACC,UAAU,CAAC,CAAC,CAAC;EAAA;EAACE,WAAWA,CAACpC,CAAC,EAAC;IAACA,CAAC,CAACQ,CAAC,GAAC,EAAE,IAAE,IAAI,CAACK,IAAI,GAAC,IAAI,CAACI,IAAI,CAAC,EAACjB,CAAC,CAACqC,CAAC,GAAC,EAAE,IAAE,IAAI,CAACrB,IAAI,GAAC,IAAI,CAACE,IAAI,CAAC;EAAA;EAACoB,QAAQA,CAAA,EAAE;IAAC,IAAI,CAACzB,IAAI,GAACC,MAAM,CAACC,GAAG,EAAC,IAAI,CAACC,IAAI,GAACF,MAAM,CAACC,GAAG,EAAC,IAAI,CAACE,IAAI,GAACH,MAAM,CAACC,GAAG,EAAC,IAAI,CAACG,IAAI,GAACJ,MAAM,CAACC,GAAG;EAAA;EAACwB,WAAWA,CAAA,EAAE;IAAC,IAAI,CAAC1B,IAAI,GAACC,MAAM,CAAC0B,iBAAiB,EAAC,IAAI,CAACvB,IAAI,GAACH,MAAM,CAAC2B,iBAAiB,EAAC,IAAI,CAACzB,IAAI,GAACF,MAAM,CAAC0B,iBAAiB,EAAC,IAAI,CAACtB,IAAI,GAACJ,MAAM,CAAC2B,iBAAiB;EAAA;EAACC,YAAYA,CAAC1C,CAAC,EAAC;IAAC,OAAM,CAAC,IAAI,CAAC2C,OAAO,CAAC,CAAC,KAAG,IAAI,CAACpB,KAAK,CAAC,CAAC,IAAEvB,CAAC,IAAE,IAAI,CAACwB,MAAM,CAAC,CAAC,IAAExB,CAAC,CAAC;EAAA;EAAC4C,MAAMA,CAAA,EAAE;IAAC,OAAM,EAAE,IAAI,CAACD,OAAO,CAAC,CAAC,IAAE,IAAI,CAACpB,KAAK,CAAC,CAAC,IAAE,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;EAAA;EAACmB,OAAOA,CAAA,EAAE;IAAC,OAAO7B,MAAM,CAAC+B,KAAK,CAAC,IAAI,CAAChC,IAAI,CAAC,IAAEC,MAAM,CAAC+B,KAAK,CAAC,IAAI,CAAC7B,IAAI,CAAC,IAAEF,MAAM,CAAC+B,KAAK,CAAC,IAAI,CAAC5B,IAAI,CAAC,IAAEH,MAAM,CAAC+B,KAAK,CAAC,IAAI,CAAC3B,IAAI,CAAC;EAAA;EAAC4B,aAAaA,CAAC9C,CAAC,EAACC,CAAC,EAAC;IAAC,IAAI,CAACY,IAAI,GAACb,CAAC,GAAC,IAAI,CAACa,IAAI,GAACb,CAAC,GAAC,IAAI,CAACiB,IAAI,GAACjB,CAAC,KAAG,IAAI,CAACiB,IAAI,GAACjB,CAAC,CAAC,EAAC,IAAI,CAACgB,IAAI,GAACf,CAAC,GAAC,IAAI,CAACe,IAAI,GAACf,CAAC,GAAC,IAAI,CAACiB,IAAI,GAACjB,CAAC,KAAG,IAAI,CAACiB,IAAI,GAACjB,CAAC,CAAC;EAAA;EAAC8C,OAAOA,CAAC/C,CAAC,EAAC;IAAC,IAAI,CAAC8C,aAAa,CAAC9C,CAAC,CAACQ,CAAC,EAACR,CAAC,CAACqC,CAAC,CAAC;EAAA;EAACW,WAAWA,CAAChD,CAAC,EAACC,CAAC,EAAC;IAAC,IAAI,CAAC0C,OAAO,CAAC,CAAC,IAAE,IAAI,CAAC9B,IAAI,GAACb,CAAC,EAAC,IAAI,CAACgB,IAAI,GAACf,CAAC,EAAC,IAAI,CAACgB,IAAI,GAACjB,CAAC,EAAC,IAAI,CAACkB,IAAI,GAACjB,CAAC,KAAG,IAAI,CAACY,IAAI,GAACb,CAAC,GAAC,IAAI,CAACa,IAAI,GAACb,CAAC,GAAC,IAAI,CAACiB,IAAI,GAACjB,CAAC,KAAG,IAAI,CAACiB,IAAI,GAACjB,CAAC,CAAC,EAAC,IAAI,CAACgB,IAAI,GAACf,CAAC,GAAC,IAAI,CAACe,IAAI,GAACf,CAAC,GAAC,IAAI,CAACiB,IAAI,GAACjB,CAAC,KAAG,IAAI,CAACiB,IAAI,GAACjB,CAAC,CAAC,CAAC;EAAA;EAACgD,KAAKA,CAACjD,CAAC,EAAC;IAAC,IAAI,CAACgD,WAAW,CAAChD,CAAC,CAACQ,CAAC,EAACR,CAAC,CAACqC,CAAC,CAAC;EAAA;EAACa,eAAeA,CAAClD,CAAC,EAAC;IAACA,CAAC,CAAC2C,OAAO,CAAC,CAAC,KAAG,IAAI,CAACK,WAAW,CAAChD,CAAC,CAACa,IAAI,EAACb,CAAC,CAACgB,IAAI,CAAC,EAAC,IAAI,CAAC8B,aAAa,CAAC9C,CAAC,CAACiB,IAAI,EAACjB,CAAC,CAACkB,IAAI,CAAC,CAAC;EAAA;EAACiC,WAAWA,CAACnD,CAAC,EAACC,CAAC,EAAC;IAAC,KAAI,IAAIE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACF,CAAC,GAAE;MAAC,IAAG,CAAC,IAAI,CAAC0C,OAAO,CAAC,CAAC,EAAC;QAAC,KAAI,IAAIvC,CAAC,GAACD,CAAC,EAACC,CAAC,GAACH,CAAC,EAACG,CAAC,EAAE,EAAC,IAAI,CAAC2C,OAAO,CAAC/C,CAAC,CAACI,CAAC,CAAC,CAAC;QAAC;MAAK;MAAC,IAAI,CAACgD,SAAS,CAACpD,CAAC,CAACG,CAAC,CAAC,CAAC,EAACA,CAAC,EAAE;IAAA;EAAC;EAACkD,sBAAsBA,CAACrD,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;IAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,GAACH,CAAC,EAACK,CAAC,GAACF,CAAC,GAAC,CAAC,GAACD,CAAC,EAACC,CAAC,GAACE,CAAC,EAACF,CAAC,IAAE,CAAC,EAAC,IAAI,CAAC4C,WAAW,CAAChD,CAAC,CAACsD,IAAI,CAAClD,CAAC,CAAC,EAACJ,CAAC,CAACsD,IAAI,CAAClD,CAAC,GAAC,CAAC,CAAC,CAAC;EAAA;EAACmD,aAAaA,CAACvD,CAAC,EAACC,CAAC,EAAC;IAAC,IAAI,CAAC0C,OAAO,CAAC,CAAC,KAAG,IAAI,CAAC9B,IAAI,IAAEb,CAAC,EAAC,IAAI,CAACiB,IAAI,IAAEjB,CAAC,EAAC,IAAI,CAACgB,IAAI,IAAEf,CAAC,EAAC,IAAI,CAACiB,IAAI,IAAEjB,CAAC,EAAC,CAAC,IAAI,CAACY,IAAI,GAAC,IAAI,CAACI,IAAI,IAAE,IAAI,CAACD,IAAI,GAAC,IAAI,CAACE,IAAI,KAAG,IAAI,CAACoB,QAAQ,CAAC,CAAC,CAAC;EAAA;EAACkB,iBAAiBA,CAACxD,CAAC,EAACC,CAAC,EAAC;IAAC,MAAME,CAAC,GAAC,IAAI,CAACkB,KAAK,CAAC,CAAC;IAAC,OAAOlB,CAAC,CAACoD,aAAa,CAACvD,CAAC,EAACC,CAAC,CAAC,EAACE,CAAC;EAAA;EAACsD,OAAOA,CAACzD,CAAC,EAAC;IAAC,IAAI,CAACuD,aAAa,CAACvD,CAAC,EAACA,CAAC,CAAC;EAAA;EAAC0D,WAAWA,CAAC1D,CAAC,EAAC;IAAC,MAAMC,CAAC,GAAC,IAAI,CAACoB,KAAK,CAAC,CAAC;IAAC,OAAOpB,CAAC,CAACsD,aAAa,CAACvD,CAAC,EAACA,CAAC,CAAC,EAACC,CAAC;EAAA;EAAC0D,IAAIA,CAAC3D,CAAC,EAACC,CAAC,EAAC;IAAC,IAAI,CAAC0C,OAAO,CAAC,CAAC,IAAE,IAAI,CAACS,SAAS,CAAC;MAACQ,MAAM,EAAC,IAAI,CAACzB,SAAS,CAAC,CAAC;MAACZ,KAAK,EAACvB,CAAC,GAAC,IAAI,CAACuB,KAAK,CAAC,CAAC;MAACC,MAAM,EAACvB,CAAC,GAAC,IAAI,CAACuB,MAAM,CAAC;IAAC,CAAC,CAAC;EAAA;EAACqC,KAAKA,CAAC7D,CAAC,EAAC;IAACA,CAAC,GAAC,CAAC,IAAE,IAAI,CAACsC,QAAQ,CAAC,CAAC,EAAC,IAAI,CAACzB,IAAI,IAAEb,CAAC,EAAC,IAAI,CAACiB,IAAI,IAAEjB,CAAC,EAAC,IAAI,CAACgB,IAAI,IAAEhB,CAAC,EAAC,IAAI,CAACkB,IAAI,IAAElB,CAAC;EAAA;EAAC8D,MAAMA,CAAC9D,CAAC,EAACC,CAAC,EAAC;IAAC,OAAM,EAAE,CAAC,IAAI,CAAC0C,OAAO,CAAC,CAAC,IAAE,CAAC3C,CAAC,CAAC2C,OAAO,CAAC,CAAC,CAAC,KAAG1C,CAAC,GAACyB,IAAI,CAACqC,GAAG,CAAC,IAAI,CAAClD,IAAI,GAACb,CAAC,CAACa,IAAI,CAAC,IAAEZ,CAAC,IAAEyB,IAAI,CAACqC,GAAG,CAAC,IAAI,CAAC/C,IAAI,GAAChB,CAAC,CAACgB,IAAI,CAAC,IAAEf,CAAC,IAAEyB,IAAI,CAACqC,GAAG,CAAC,IAAI,CAAC9C,IAAI,GAACjB,CAAC,CAACiB,IAAI,CAAC,IAAEhB,CAAC,IAAEyB,IAAI,CAACqC,GAAG,CAAC,IAAI,CAAC7C,IAAI,GAAClB,CAAC,CAACkB,IAAI,CAAC,IAAEjB,CAAC,GAAC,IAAI,CAACY,IAAI,KAAGb,CAAC,CAACa,IAAI,IAAE,IAAI,CAACG,IAAI,KAAGhB,CAAC,CAACgB,IAAI,IAAE,IAAI,CAACC,IAAI,KAAGjB,CAAC,CAACiB,IAAI,IAAE,IAAI,CAACC,IAAI,KAAGlB,CAAC,CAACkB,IAAI,CAAC;EAAA;EAACkC,SAASA,CAACnD,CAAC,EAAC;IAAC,KAAK,CAAC,KAAGA,CAAC,CAACY,IAAI,IAAE,IAAI,CAACA,IAAI,GAACZ,CAAC,CAACY,IAAI,EAAC,IAAI,CAACI,IAAI,GAAChB,CAAC,CAACgB,IAAI,EAAC,IAAI,CAACD,IAAI,GAACf,CAAC,CAACe,IAAI,EAAC,IAAI,CAACE,IAAI,GAACjB,CAAC,CAACiB,IAAI,IAAE,KAAK,CAAC,KAAGjB,CAAC,CAACO,CAAC,IAAE,IAAI,CAACK,IAAI,GAACZ,CAAC,CAACO,CAAC,EAAC,IAAI,CAACS,IAAI,GAAChB,CAAC,CAACO,CAAC,EAAC,IAAI,CAACQ,IAAI,GAACf,CAAC,CAACoC,CAAC,EAAC,IAAI,CAACnB,IAAI,GAACjB,CAAC,CAACoC,CAAC,IAAE,KAAK,CAAC,KAAGpC,CAAC,CAAC+D,GAAG,IAAE,IAAI,CAACnD,IAAI,GAACZ,CAAC,CAAC+D,GAAG,CAACxD,CAAC,EAAC,IAAI,CAACQ,IAAI,GAACf,CAAC,CAAC+D,GAAG,CAAC3B,CAAC,EAAC,IAAI,CAACpB,IAAI,GAAChB,CAAC,CAACgE,GAAG,CAACzD,CAAC,EAAC,IAAI,CAACU,IAAI,GAACjB,CAAC,CAACgE,GAAG,CAAC5B,CAAC,EAAC,IAAI,CAAClB,SAAS,CAAC,CAAC,IAAE,KAAK,CAAC,KAAGlB,CAAC,CAACiE,KAAK,IAAE,IAAI,CAACrD,IAAI,GAACZ,CAAC,CAACiE,KAAK,CAACrD,IAAI,EAAC,IAAI,CAACI,IAAI,GAAChB,CAAC,CAACiE,KAAK,CAACjD,IAAI,EAAC,IAAI,CAACD,IAAI,GAACf,CAAC,CAACiE,KAAK,CAAClD,IAAI,EAAC,IAAI,CAACE,IAAI,GAACjB,CAAC,CAACiE,KAAK,CAAChD,IAAI,EAAC,IAAI,CAACC,SAAS,CAAC,CAAC,IAAE,KAAK,CAAC,KAAGlB,CAAC,CAACkE,EAAE,IAAE,IAAI,CAACtD,IAAI,GAACZ,CAAC,CAACkE,EAAE,CAAC3D,CAAC,EAAC,IAAI,CAACS,IAAI,GAAChB,CAAC,CAACkE,EAAE,CAAC3D,CAAC,EAAC,IAAI,CAACQ,IAAI,GAACf,CAAC,CAACkE,EAAE,CAAC9B,CAAC,EAAC,IAAI,CAACnB,IAAI,GAACjB,CAAC,CAACkE,EAAE,CAAC9B,CAAC,IAAE,KAAK,CAAC,KAAGpC,CAAC,CAAC2D,MAAM,IAAE,IAAI,CAAC/C,IAAI,GAACZ,CAAC,CAAC2D,MAAM,CAACpD,CAAC,GAAC,EAAE,GAACP,CAAC,CAACsB,KAAK,EAAC,IAAI,CAACN,IAAI,GAAC,IAAI,CAACJ,IAAI,GAACZ,CAAC,CAACsB,KAAK,EAAC,IAAI,CAACP,IAAI,GAACf,CAAC,CAAC2D,MAAM,CAACvB,CAAC,GAAC,EAAE,GAACpC,CAAC,CAACuB,MAAM,EAAC,IAAI,CAACN,IAAI,GAAC,IAAI,CAACF,IAAI,GAACf,CAAC,CAACuB,MAAM,EAAC,IAAI,CAACL,SAAS,CAAC,CAAC,IAAEnB,CAAC,CAAC,uCAAuC,CAAC,EAAC,IAAI,CAACmB,SAAS,CAAC,CAAC;EAAA;EAACiD,cAAcA,CAACpE,CAAC,EAAC;IAAC,IAAI,CAAC2C,OAAO,CAAC,CAAC,GAAC3C,CAAC,CAACsC,QAAQ,CAAC,CAAC,GAACtC,CAAC,CAACoD,SAAS,CAAC,IAAI,CAACvC,IAAI,EAAC,IAAI,CAACI,IAAI,CAAC;EAAA;EAACoD,cAAcA,CAACrE,CAAC,EAAC;IAAC,IAAI,CAAC2C,OAAO,CAAC,CAAC,GAAC3C,CAAC,CAACsC,QAAQ,CAAC,CAAC,GAACtC,CAAC,CAACoD,SAAS,CAAC,IAAI,CAACpC,IAAI,EAAC,IAAI,CAACE,IAAI,CAAC;EAAA;EAACoD,aAAaA,CAACtE,CAAC,EAACC,CAAC,EAAC;IAAC,IAAG,CAAC,KAAGA,CAAC,EAAC,OAAO,KAAK,IAAI,CAACqC,QAAQ,CAAC,CAAC;IAAC,IAAGiC,KAAK,CAACC,OAAO,CAACxE,CAAC,CAAC,EAAC;MAAC,MAAMG,CAAC,GAACH,CAAC;MAAC,IAAI,CAACoD,SAAS,CAACjD,CAAC,CAAC,CAAC,CAAC,CAAC;MAAC,KAAI,IAAIH,CAAC,GAAC,CAAC,EAACA,CAAC,GAACC,CAAC,GAAE;QAAC,IAAG,CAAC,IAAI,CAAC0C,OAAO,CAAC,CAAC,EAAC;UAAC,KAAI,IAAIvC,CAAC,GAACJ,CAAC,EAACI,CAAC,GAACH,CAAC,EAACG,CAAC,EAAE,EAAC,IAAI,CAAC2C,OAAO,CAAC5C,CAAC,CAACC,CAAC,CAAC,CAAC;UAAC;QAAM;QAAC,IAAI,CAACgD,SAAS,CAACjD,CAAC,CAACH,CAAC,CAAC,CAAC,EAACA,CAAC,EAAE;MAAA;MAAC;IAAM;IAAC,MAAMG,CAAC,GAACH,CAAC;IAAC,IAAI,CAACoD,SAAS,CAAC;MAAC5C,CAAC,EAACL,CAAC,CAAC,CAAC,CAAC;MAACkC,CAAC,EAAClC,CAAC,CAAC,CAAC;IAAC,CAAC,CAAC;IAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACE,CAAC,GAAC,CAAC,GAACL,CAAC,EAACG,CAAC,GAACE,CAAC,EAACF,CAAC,IAAE,CAAC,EAAC;MAAC,IAAG,CAAC,IAAI,CAACuC,OAAO,CAAC,CAAC,EAAC;QAAC,KAAI,IAAI3C,CAAC,GAACI,CAAC,EAACE,CAAC,GAAC,CAAC,GAACL,CAAC,EAACD,CAAC,GAACM,CAAC,EAACN,CAAC,IAAE,CAAC,EAAC,IAAI,CAAC8C,aAAa,CAAC3C,CAAC,CAACH,CAAC,CAAC,EAACG,CAAC,CAACH,CAAC,GAAC,CAAC,CAAC,CAAC;QAAC;MAAM;MAAC,IAAI,CAACoD,SAAS,CAAC;QAAC5C,CAAC,EAACL,CAAC,CAACC,CAAC,CAAC;QAACiC,CAAC,EAAClC,CAAC,CAACC,CAAC,GAAC,CAAC;MAAC,CAAC,CAAC,EAACA,CAAC,IAAE,CAAC;IAAA;EAAC;EAACe,SAASA,CAAA,EAAE;IAAC,IAAInB,CAAC,GAAC,CAAC,CAAC;IAAC,IAAI,CAACa,IAAI,IAAE,IAAI,CAACI,IAAI,KAAG,CAAC,IAAI,CAACJ,IAAI,EAAC,IAAI,CAACI,IAAI,CAAC,GAAC,CAAC,IAAI,CAACA,IAAI,EAAC,IAAI,CAACJ,IAAI,CAAC,EAACb,CAAC,GAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAACgB,IAAI,IAAE,IAAI,CAACE,IAAI,KAAG,CAAC,IAAI,CAACF,IAAI,EAAC,IAAI,CAACE,IAAI,CAAC,GAAC,CAAC,IAAI,CAACA,IAAI,EAAC,IAAI,CAACF,IAAI,CAAC,EAAChB,CAAC,GAAC,CAAC,CAAC,CAAC,EAAC,CAACA,CAAC,IAAE,IAAI,CAACa,IAAI,IAAE,IAAI,CAACI,IAAI,IAAE,IAAI,CAACD,IAAI,IAAE,IAAI,CAACE,IAAI,IAAE,IAAI,CAACoB,QAAQ,CAAC,CAAC;EAAA;EAACmC,OAAOA,CAAA,EAAE;IAAC,OAAO,IAAI,CAAC9B,OAAO,CAAC,CAAC,IAAE,IAAI,CAAC9B,IAAI,IAAE,IAAI,CAACI,IAAI,IAAE,IAAI,CAACD,IAAI,IAAE,IAAI,CAACE,IAAI;EAAA;EAACwD,YAAYA,CAAA,EAAE;IAAC,OAAO,IAAIvE,CAAC,CAAC,IAAI,CAACU,IAAI,EAAC,IAAI,CAACG,IAAI,CAAC;EAAA;EAAC2D,aAAaA,CAAA,EAAE;IAAC,OAAO,IAAIxE,CAAC,CAAC,IAAI,CAACc,IAAI,EAAC,IAAI,CAACD,IAAI,CAAC;EAAA;EAAC4D,YAAYA,CAAA,EAAE;IAAC,OAAO,IAAIzE,CAAC,CAAC,IAAI,CAACU,IAAI,EAAC,IAAI,CAACK,IAAI,CAAC;EAAA;EAAC2D,aAAaA,CAAA,EAAE;IAAC,OAAO,IAAI1E,CAAC,CAAC,IAAI,CAACc,IAAI,EAAC,IAAI,CAACC,IAAI,CAAC;EAAA;EAAC4D,IAAIA,CAAC9E,CAAC,EAACC,CAAC,EAAC;IAAC,IAAI,CAAC0C,OAAO,CAAC,CAAC,KAAG,IAAI,CAAC9B,IAAI,IAAEb,CAAC,EAAC,IAAI,CAACgB,IAAI,IAAEf,CAAC,EAAC,IAAI,CAACgB,IAAI,IAAEjB,CAAC,EAAC,IAAI,CAACkB,IAAI,IAAEjB,CAAC,CAAC;EAAA;EAAC8E,cAAcA,CAAC/E,CAAC,EAACC,CAAC,EAAC;IAAC,IAAI,CAAC6E,IAAI,CAAC9E,CAAC,GAAC,IAAI,CAACiC,UAAU,CAAC,CAAC,EAAChC,CAAC,GAAC,IAAI,CAACiC,UAAU,CAAC,CAAC,CAAC;EAAA;EAAC8C,QAAQA,CAAChF,CAAC,EAAC;IAAC,IAAI,CAAC+E,cAAc,CAAC/E,CAAC,CAACQ,CAAC,EAACR,CAAC,CAACqC,CAAC,CAAC;EAAA;EAAC4C,cAAcA,CAACjF,CAAC,EAACC,CAAC,EAAC;IAAC,OAAOD,CAAC,IAAE,IAAI,CAACa,IAAI,IAAEb,CAAC,IAAE,IAAI,CAACiB,IAAI,IAAEhB,CAAC,IAAE,IAAI,CAACe,IAAI,IAAEf,CAAC,IAAE,IAAI,CAACiB,IAAI;EAAA;EAACgE,QAAQA,CAAClF,CAAC,EAAC;IAAC,OAAO,IAAI,CAACiF,cAAc,CAACjF,CAAC,CAACQ,CAAC,EAACR,CAAC,CAACqC,CAAC,CAAC;EAAA;EAAC8C,gBAAgBA,CAACnF,CAAC,EAAC;IAAC,OAAOA,CAAC,CAACa,IAAI,IAAE,IAAI,CAACA,IAAI,IAAEb,CAAC,CAACiB,IAAI,IAAE,IAAI,CAACA,IAAI,IAAEjB,CAAC,CAACgB,IAAI,IAAE,IAAI,CAACA,IAAI,IAAEhB,CAAC,CAACkB,IAAI,IAAE,IAAI,CAACA,IAAI;EAAA;EAACkE,uBAAuBA,CAACpF,CAAC,EAACC,CAAC,EAAC;IAAC,OAAOD,CAAC,GAAC,IAAI,CAACa,IAAI,IAAEb,CAAC,GAAC,IAAI,CAACiB,IAAI,IAAEhB,CAAC,GAAC,IAAI,CAACe,IAAI,IAAEf,CAAC,GAAC,IAAI,CAACiB,IAAI;EAAA;EAACmE,iBAAiBA,CAACrF,CAAC,EAAC;IAAC,OAAO,IAAI,CAACoF,uBAAuB,CAACpF,CAAC,CAACQ,CAAC,EAACR,CAAC,CAACqC,CAAC,CAAC;EAAA;EAACiD,yBAAyBA,CAACtF,CAAC,EAAC;IAAC,OAAOA,CAAC,CAACa,IAAI,GAAC,IAAI,CAACA,IAAI,IAAEb,CAAC,CAACiB,IAAI,GAAC,IAAI,CAACA,IAAI,IAAEjB,CAAC,CAACgB,IAAI,GAAC,IAAI,CAACA,IAAI,IAAEhB,CAAC,CAACkB,IAAI,GAAC,IAAI,CAACA,IAAI;EAAA;EAACqE,cAAcA,CAACvF,CAAC,EAAC;IAAC,OAAM,CAAC,IAAI,CAACa,IAAI,IAAEb,CAAC,CAACa,IAAI,GAAC,IAAI,CAACI,IAAI,IAAEjB,CAAC,CAACa,IAAI,GAACb,CAAC,CAACiB,IAAI,IAAE,IAAI,CAACJ,IAAI,MAAI,IAAI,CAACG,IAAI,IAAEhB,CAAC,CAACgB,IAAI,GAAC,IAAI,CAACE,IAAI,IAAElB,CAAC,CAACgB,IAAI,GAAChB,CAAC,CAACkB,IAAI,IAAE,IAAI,CAACF,IAAI,CAAC;EAAA;EAACwE,gBAAgBA,CAACxF,CAAC,EAAC;IAAC,OAAM,CAAC,IAAI,CAACa,IAAI,IAAEb,CAAC,CAACa,IAAI,GAAC,IAAI,CAACI,IAAI,IAAEjB,CAAC,CAACa,IAAI,GAACb,CAAC,CAACiB,IAAI,IAAE,IAAI,CAACJ,IAAI,MAAI,IAAI,CAACG,IAAI,IAAEhB,CAAC,CAACgB,IAAI,GAAC,IAAI,CAACE,IAAI,IAAElB,CAAC,CAACgB,IAAI,GAAChB,CAAC,CAACkB,IAAI,IAAE,IAAI,CAACF,IAAI,CAAC;EAAA;EAACyE,SAASA,CAACzF,CAAC,EAAC;IAAC,IAAG,IAAI,CAAC2C,OAAO,CAAC,CAAC,EAAC,OAAM,CAAC,CAAC;IAAC,IAAG3C,CAAC,CAAC2C,OAAO,CAAC,CAAC,EAAC,OAAO,IAAI,CAACL,QAAQ,CAAC,CAAC,EAAC,CAAC,CAAC;IAACtC,CAAC,CAACa,IAAI,GAAC,IAAI,CAACA,IAAI,KAAG,IAAI,CAACA,IAAI,GAACb,CAAC,CAACa,IAAI,CAAC,EAACb,CAAC,CAACiB,IAAI,GAAC,IAAI,CAACA,IAAI,KAAG,IAAI,CAACA,IAAI,GAACjB,CAAC,CAACiB,IAAI,CAAC,EAACjB,CAAC,CAACgB,IAAI,GAAC,IAAI,CAACA,IAAI,KAAG,IAAI,CAACA,IAAI,GAAChB,CAAC,CAACgB,IAAI,CAAC,EAAChB,CAAC,CAACkB,IAAI,GAAC,IAAI,CAACA,IAAI,KAAG,IAAI,CAACA,IAAI,GAAClB,CAAC,CAACkB,IAAI,CAAC;IAAC,MAAMjB,CAAC,GAAC,IAAI,CAACY,IAAI,IAAE,IAAI,CAACI,IAAI,IAAE,IAAI,CAACD,IAAI,IAAE,IAAI,CAACE,IAAI;IAAC,OAAOjB,CAAC,IAAE,IAAI,CAACqC,QAAQ,CAAC,CAAC,EAACrC,CAAC;EAAA;EAACyF,WAAWA,CAAC1F,CAAC,EAAC;IAAC,QAAO,CAAC,GAACA,CAAC;MAAE,KAAK,CAAC;QAAC,OAAO,IAAIG,CAAC,CAAC,IAAI,CAACU,IAAI,EAAC,IAAI,CAACG,IAAI,CAAC;MAAC,KAAK,CAAC;QAAC,OAAO,IAAIb,CAAC,CAAC,IAAI,CAACU,IAAI,EAAC,IAAI,CAACK,IAAI,CAAC;MAAC,KAAK,CAAC;QAAC,OAAO,IAAIf,CAAC,CAAC,IAAI,CAACc,IAAI,EAAC,IAAI,CAACC,IAAI,CAAC;MAAC;QAAQ,OAAO,IAAIf,CAAC,CAAC,IAAI,CAACc,IAAI,EAAC,IAAI,CAACD,IAAI,CAAC;IAAA;EAAC;EAAC2E,YAAYA,CAAC3F,CAAC,EAAC;IAACA,CAAC,CAAC,CAAC,CAAC,CAACoD,SAAS,CAAC,IAAI,CAACvC,IAAI,EAAC,IAAI,CAACG,IAAI,CAAC,EAAChB,CAAC,CAAC,CAAC,CAAC,CAACoD,SAAS,CAAC,IAAI,CAACvC,IAAI,EAAC,IAAI,CAACK,IAAI,CAAC,EAAClB,CAAC,CAAC,CAAC,CAAC,CAACoD,SAAS,CAAC,IAAI,CAACnC,IAAI,EAAC,IAAI,CAACC,IAAI,CAAC,EAAClB,CAAC,CAAC,CAAC,CAAC,CAACoD,SAAS,CAAC,IAAI,CAACnC,IAAI,EAAC,IAAI,CAACD,IAAI,CAAC;EAAA;EAAC4E,oBAAoBA,CAAC5F,CAAC,EAAC;IAACA,CAAC,CAAC,CAAC,CAAC,CAACoD,SAAS,CAAC,IAAI,CAACvC,IAAI,EAAC,IAAI,CAACG,IAAI,CAAC,EAAChB,CAAC,CAAC,CAAC,CAAC,CAACoD,SAAS,CAAC,IAAI,CAACnC,IAAI,EAAC,IAAI,CAACD,IAAI,CAAC,EAAChB,CAAC,CAAC,CAAC,CAAC,CAACoD,SAAS,CAAC,IAAI,CAACnC,IAAI,EAAC,IAAI,CAACC,IAAI,CAAC,EAAClB,CAAC,CAAC,CAAC,CAAC,CAACoD,SAAS,CAAC,IAAI,CAACvC,IAAI,EAAC,IAAI,CAACK,IAAI,CAAC;EAAA;EAAC2E,QAAQA,CAAC7F,CAAC,EAACC,CAAC,EAAC;IAAC,IAAG,IAAI,CAAC0C,OAAO,CAAC,CAAC,EAAC;IAAO,MAAMxC,CAAC,GAACH,CAAC,GAACC,CAAC;MAACG,CAAC,GAAC,EAAE,GAAC,IAAI,CAACmB,KAAK,CAAC,CAAC;MAACjB,CAAC,GAAC,EAAE,GAAC,IAAI,CAACkB,MAAM,CAAC,CAAC,GAACrB,CAAC;IAAC,IAAGC,CAAC,IAAEE,CAAC,EAAC;MAAC,MAAMN,CAAC,GAAC,IAAI,CAACiC,UAAU,CAAC,CAAC;MAAC,IAAI,CAACpB,IAAI,GAACb,CAAC,GAACM,CAAC,EAAC,IAAI,CAACW,IAAI,GAACjB,CAAC,GAACM,CAAC;IAAA,CAAC,MAAI;MAAC,MAAMN,CAAC,GAACI,CAAC,GAACD,CAAC;QAACF,CAAC,GAAC,IAAI,CAACiC,UAAU,CAAC,CAAC;MAAC,IAAI,CAAClB,IAAI,GAACf,CAAC,GAACD,CAAC,EAAC,IAAI,CAACkB,IAAI,GAACjB,CAAC,GAACD,CAAC;IAAA;IAAC,IAAI,CAACmB,SAAS,CAAC,CAAC;EAAA;EAAC2E,OAAOA,CAAA,EAAE;IAAC,OAAO,IAAI,CAACnD,OAAO,CAAC,CAAC,GAAC,CAAC,GAAC,IAAI,CAACpB,KAAK,CAAC,CAAC,GAAC,IAAI,CAACC,MAAM,CAAC,CAAC;EAAA;EAACuE,SAASA,CAAA,EAAE;IAAC,OAAO,IAAI,CAACpD,OAAO,CAAC,CAAC,GAAC,CAAC,GAAC,CAAC,IAAE,IAAI,CAACpB,KAAK,CAAC,CAAC,GAAC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;EAAA;EAACwE,QAAQA,CAAChG,CAAC,EAAC;IAAC,OAAM,CAACA,CAAC,CAACQ,CAAC,GAAC,IAAI,CAACK,IAAI,GAAC,CAAC,GAAC,CAAC,IAAE,CAACb,CAAC,CAACQ,CAAC,GAAC,IAAI,CAACS,IAAI,GAAC,CAAC,GAAC,CAAC,KAAG,CAAC,GAAC,CAACjB,CAAC,CAACqC,CAAC,GAAC,IAAI,CAACrB,IAAI,GAAC,CAAC,GAAC,CAAC,KAAG,CAAC,GAAC,CAAChB,CAAC,CAACqC,CAAC,GAAC,IAAI,CAACnB,IAAI,GAAC,CAAC,GAAC,CAAC,KAAG,CAAC;EAAA;EAAC+E,QAAQA,CAACjG,CAAC,EAACC,CAAC,EAAC;IAAC,IAAIE,CAAC,GAAC,IAAI,CAAC6F,QAAQ,CAAChG,CAAC,CAAC;MAACI,CAAC,GAAC,IAAI,CAAC4F,QAAQ,CAAC/F,CAAC,CAAC;IAAC,IAAGE,CAAC,GAACC,CAAC,EAAC,OAAO,CAAC;IAAC,IAAG,EAAED,CAAC,GAACC,CAAC,CAAC,EAAC,OAAO,CAAC;IAAC,MAAME,CAAC,GAAC,CAACH,CAAC,GAAC,CAAC,GAAC,CAAC,KAAGC,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC;IAAC,GAAE;MAAC,MAAME,CAAC,GAACL,CAAC,CAACO,CAAC,GAACR,CAAC,CAACQ,CAAC;QAACA,CAAC,GAACP,CAAC,CAACoC,CAAC,GAACrC,CAAC,CAACqC,CAAC;MAAC,IAAGX,IAAI,CAACqC,GAAG,CAACzD,CAAC,CAAC,GAACoB,IAAI,CAACqC,GAAG,CAACvD,CAAC,CAAC,GAACL,CAAC,GAACM,CAAC,CAACyF,KAAK,IAAE/F,CAAC,GAACM,CAAC,CAAC0F,SAAS,IAAEnG,CAAC,CAACqC,CAAC,IAAE7B,CAAC,IAAE,IAAI,CAACK,IAAI,GAACb,CAAC,CAACQ,CAAC,CAAC,GAACF,CAAC,EAACN,CAAC,CAACQ,CAAC,GAAC,IAAI,CAACK,IAAI,KAAGb,CAAC,CAACqC,CAAC,IAAE7B,CAAC,IAAE,IAAI,CAACS,IAAI,GAACjB,CAAC,CAACQ,CAAC,CAAC,GAACF,CAAC,EAACN,CAAC,CAACQ,CAAC,GAAC,IAAI,CAACS,IAAI,CAAC,EAACd,CAAC,GAAC,IAAI,CAAC6F,QAAQ,CAAChG,CAAC,CAAC,IAAEI,CAAC,GAACK,CAAC,CAACyF,KAAK,IAAE9F,CAAC,GAACK,CAAC,CAAC0F,SAAS,IAAElG,CAAC,CAACoC,CAAC,IAAE7B,CAAC,IAAE,IAAI,CAACK,IAAI,GAACZ,CAAC,CAACO,CAAC,CAAC,GAACF,CAAC,EAACL,CAAC,CAACO,CAAC,GAAC,IAAI,CAACK,IAAI,KAAGZ,CAAC,CAACoC,CAAC,IAAE7B,CAAC,IAAE,IAAI,CAACS,IAAI,GAAChB,CAAC,CAACO,CAAC,CAAC,GAACF,CAAC,EAACL,CAAC,CAACO,CAAC,GAAC,IAAI,CAACS,IAAI,CAAC,EAACb,CAAC,GAAC,IAAI,CAAC4F,QAAQ,CAAC/F,CAAC,CAAC,IAAEE,CAAC,IAAEA,CAAC,GAACM,CAAC,CAAC2F,SAAS,IAAEpG,CAAC,CAACQ,CAAC,IAAEF,CAAC,IAAE,IAAI,CAACU,IAAI,GAAChB,CAAC,CAACqC,CAAC,CAAC,GAAC7B,CAAC,EAACR,CAAC,CAACqC,CAAC,GAAC,IAAI,CAACrB,IAAI,KAAGhB,CAAC,CAACQ,CAAC,IAAEF,CAAC,IAAE,IAAI,CAACY,IAAI,GAAClB,CAAC,CAACqC,CAAC,CAAC,GAAC7B,CAAC,EAACR,CAAC,CAACqC,CAAC,GAAC,IAAI,CAACnB,IAAI,CAAC,EAACf,CAAC,GAAC,IAAI,CAAC6F,QAAQ,CAAChG,CAAC,CAAC,KAAGI,CAAC,GAACK,CAAC,CAAC2F,SAAS,IAAEnG,CAAC,CAACO,CAAC,IAAEF,CAAC,IAAE,IAAI,CAACU,IAAI,GAACf,CAAC,CAACoC,CAAC,CAAC,GAAC7B,CAAC,EAACP,CAAC,CAACoC,CAAC,GAAC,IAAI,CAACrB,IAAI,KAAGf,CAAC,CAACO,CAAC,IAAEF,CAAC,IAAE,IAAI,CAACY,IAAI,GAACjB,CAAC,CAACoC,CAAC,CAAC,GAAC7B,CAAC,EAACP,CAAC,CAACoC,CAAC,GAAC,IAAI,CAACnB,IAAI,CAAC,EAACd,CAAC,GAAC,IAAI,CAAC4F,QAAQ,CAAC/F,CAAC,CAAC,CAAC,GAACE,CAAC,GAACM,CAAC,CAAC4F,KAAK,IAAElG,CAAC,GAACM,CAAC,CAAC2F,SAAS,IAAEpG,CAAC,CAACQ,CAAC,IAAEF,CAAC,IAAE,IAAI,CAACU,IAAI,GAAChB,CAAC,CAACqC,CAAC,CAAC,GAAC7B,CAAC,EAACR,CAAC,CAACqC,CAAC,GAAC,IAAI,CAACrB,IAAI,KAAGhB,CAAC,CAACQ,CAAC,IAAEF,CAAC,IAAE,IAAI,CAACY,IAAI,GAAClB,CAAC,CAACqC,CAAC,CAAC,GAAC7B,CAAC,EAACR,CAAC,CAACqC,CAAC,GAAC,IAAI,CAACnB,IAAI,CAAC,EAACf,CAAC,GAAC,IAAI,CAAC6F,QAAQ,CAAChG,CAAC,CAAC,IAAEI,CAAC,GAACK,CAAC,CAAC4F,KAAK,IAAEjG,CAAC,GAACK,CAAC,CAAC2F,SAAS,IAAEnG,CAAC,CAACO,CAAC,IAAEF,CAAC,IAAE,IAAI,CAACU,IAAI,GAACf,CAAC,CAACoC,CAAC,CAAC,GAAC7B,CAAC,EAACP,CAAC,CAACoC,CAAC,GAAC,IAAI,CAACrB,IAAI,KAAGf,CAAC,CAACO,CAAC,IAAEF,CAAC,IAAE,IAAI,CAACY,IAAI,GAACjB,CAAC,CAACoC,CAAC,CAAC,GAAC7B,CAAC,EAACP,CAAC,CAACoC,CAAC,GAAC,IAAI,CAACnB,IAAI,CAAC,EAACd,CAAC,GAAC,IAAI,CAAC4F,QAAQ,CAAC/F,CAAC,CAAC,IAAEE,CAAC,IAAEA,CAAC,GAACM,CAAC,CAAC0F,SAAS,IAAEnG,CAAC,CAACqC,CAAC,IAAE7B,CAAC,IAAE,IAAI,CAACK,IAAI,GAACb,CAAC,CAACQ,CAAC,CAAC,GAACF,CAAC,EAACN,CAAC,CAACQ,CAAC,GAAC,IAAI,CAACK,IAAI,KAAGb,CAAC,CAACqC,CAAC,IAAE7B,CAAC,IAAE,IAAI,CAACS,IAAI,GAACjB,CAAC,CAACQ,CAAC,CAAC,GAACF,CAAC,EAACN,CAAC,CAACQ,CAAC,GAAC,IAAI,CAACS,IAAI,CAAC,EAACd,CAAC,GAAC,IAAI,CAAC6F,QAAQ,CAAChG,CAAC,CAAC,KAAGI,CAAC,GAACK,CAAC,CAAC0F,SAAS,IAAElG,CAAC,CAACoC,CAAC,IAAE7B,CAAC,IAAE,IAAI,CAACK,IAAI,GAACZ,CAAC,CAACO,CAAC,CAAC,GAACF,CAAC,EAACL,CAAC,CAACO,CAAC,GAAC,IAAI,CAACK,IAAI,KAAGZ,CAAC,CAACoC,CAAC,IAAE7B,CAAC,IAAE,IAAI,CAACS,IAAI,GAAChB,CAAC,CAACO,CAAC,CAAC,GAACF,CAAC,EAACL,CAAC,CAACO,CAAC,GAAC,IAAI,CAACS,IAAI,CAAC,EAACb,CAAC,GAAC,IAAI,CAAC4F,QAAQ,CAAC/F,CAAC,CAAC,CAAC,EAACE,CAAC,GAACC,CAAC,EAAC,OAAO,CAAC;IAAA,CAAC,QAAMD,CAAC,GAACC,CAAC;IAAE,OAAOE,CAAC;EAAA;EAACgG,oBAAoBA,CAACtG,CAAC,EAAC;IAAC,OAAO0B,IAAI,CAACM,IAAI,CAAC,IAAI,CAACuE,mBAAmB,CAACvG,CAAC,EAAC,IAAI,EAAC,IAAI,CAAC,CAAC;EAAA;EAACwG,QAAQA,CAACxG,CAAC,EAAC;IAAC,OAAO0B,IAAI,CAACM,IAAI,CAAC,IAAI,CAACyE,WAAW,CAACzG,CAAC,CAAC,CAAC;EAAA;EAACuG,mBAAmBA,CAACvG,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;IAAC,IAAG,CAACF,CAAC,IAAE,CAACE,CAAC,EAAC;MAAC,IAAG,IAAI,CAACwC,OAAO,CAAC,CAAC,IAAE3C,CAAC,CAAC2C,OAAO,CAAC,CAAC,EAAC,OAAO7B,MAAM,CAACC,GAAG;MAAC,IAAId,CAAC;QAACE,CAAC,GAAC,CAAC;QAACC,CAAC,GAAC,CAAC;MAAC,OAAOH,CAAC,GAAC,IAAI,CAACY,IAAI,GAACb,CAAC,CAACiB,IAAI,EAAChB,CAAC,GAACE,CAAC,KAAGA,CAAC,GAACF,CAAC,CAAC,EAACA,CAAC,GAAC,IAAI,CAACe,IAAI,GAAChB,CAAC,CAACkB,IAAI,EAACjB,CAAC,GAACG,CAAC,KAAGA,CAAC,GAACH,CAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACa,IAAI,GAAC,IAAI,CAACI,IAAI,EAAChB,CAAC,GAACE,CAAC,KAAGA,CAAC,GAACF,CAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACgB,IAAI,GAAC,IAAI,CAACE,IAAI,EAACjB,CAAC,GAACG,CAAC,KAAGA,CAAC,GAACH,CAAC,CAAC,EAACE,CAAC,GAACA,CAAC,GAACC,CAAC,GAACA,CAAC;IAAA;IAAC,IAAG,IAAI,CAACuC,OAAO,CAAC,CAAC,IAAE3C,CAAC,CAAC2C,OAAO,CAAC,CAAC,EAAC,OAAO1C,CAAC,IAAEA,CAAC,CAACyG,MAAM,CAAC,CAAC,EAACvG,CAAC,IAAEA,CAAC,CAACuG,MAAM,CAAC,CAAC,EAAC5F,MAAM,CAACC,GAAG;IAAC,IAAIX,CAAC;MAACE,CAAC,GAAC,CAAC;MAACE,CAAC,GAAC,CAAC;IAAC,MAAMC,CAAC,GAACiB,IAAI,CAACC,GAAG,CAAC,IAAI,CAACd,IAAI,EAACb,CAAC,CAACa,IAAI,CAAC;MAAC8F,CAAC,GAACjF,IAAI,CAACC,GAAG,CAAC,IAAI,CAACX,IAAI,EAAChB,CAAC,CAACgB,IAAI,CAAC;IAAC,OAAOf,CAAC,IAAEA,CAAC,CAACmD,SAAS,CAAC3C,CAAC,EAACkG,CAAC,CAAC,EAACxG,CAAC,IAAEA,CAAC,CAACiD,SAAS,CAAC3C,CAAC,EAACkG,CAAC,CAAC,EAACvG,CAAC,GAAC,IAAI,CAACS,IAAI,GAACb,CAAC,CAACiB,IAAI,EAACb,CAAC,GAACE,CAAC,KAAGA,CAAC,GAACF,CAAC,EAACH,CAAC,KAAGA,CAAC,CAACO,CAAC,GAAC,IAAI,CAACK,IAAI,CAAC,EAACV,CAAC,KAAGA,CAAC,CAACK,CAAC,GAACR,CAAC,CAACiB,IAAI,CAAC,CAAC,EAACb,CAAC,GAAC,IAAI,CAACY,IAAI,GAAChB,CAAC,CAACkB,IAAI,EAACd,CAAC,GAACI,CAAC,KAAGA,CAAC,GAACJ,CAAC,EAACH,CAAC,KAAGA,CAAC,CAACoC,CAAC,GAAC,IAAI,CAACrB,IAAI,CAAC,EAACb,CAAC,KAAGA,CAAC,CAACkC,CAAC,GAACrC,CAAC,CAACkB,IAAI,CAAC,CAAC,EAACd,CAAC,GAACJ,CAAC,CAACa,IAAI,GAAC,IAAI,CAACI,IAAI,EAACb,CAAC,GAACE,CAAC,KAAGA,CAAC,GAACF,CAAC,EAACH,CAAC,KAAGA,CAAC,CAACO,CAAC,GAAC,IAAI,CAACS,IAAI,CAAC,EAACd,CAAC,KAAGA,CAAC,CAACK,CAAC,GAACR,CAAC,CAACa,IAAI,CAAC,CAAC,EAACT,CAAC,GAACJ,CAAC,CAACgB,IAAI,GAAC,IAAI,CAACE,IAAI,EAACd,CAAC,GAACI,CAAC,KAAGA,CAAC,GAACJ,CAAC,EAACH,CAAC,KAAGA,CAAC,CAACoC,CAAC,GAAC,IAAI,CAACnB,IAAI,CAAC,EAACf,CAAC,KAAGA,CAAC,CAACkC,CAAC,GAACrC,CAAC,CAACgB,IAAI,CAAC,CAAC,EAACV,CAAC,GAACA,CAAC,GAACE,CAAC,GAACA,CAAC;EAAA;EAACiG,WAAWA,CAACzG,CAAC,EAACC,CAAC,EAAC;IAAC,IAAG,KAAK,CAAC,KAAGA,CAAC,EAAC;MAAC,IAAG,IAAI,CAAC0C,OAAO,CAAC,CAAC,IAAE3C,CAAC,CAAC4G,KAAK,CAAC,CAAC,EAAC,OAAO9F,MAAM,CAACC,GAAG;MAAC,IAAId,CAAC;QAACE,CAAC,GAAC,CAAC;QAACC,CAAC,GAAC,CAAC;MAAC,OAAOH,CAAC,GAAC,IAAI,CAACY,IAAI,GAACb,CAAC,CAACQ,CAAC,EAACP,CAAC,GAACE,CAAC,KAAGA,CAAC,GAACF,CAAC,CAAC,EAACA,CAAC,GAAC,IAAI,CAACe,IAAI,GAAChB,CAAC,CAACqC,CAAC,EAACpC,CAAC,GAACG,CAAC,KAAGA,CAAC,GAACH,CAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACQ,CAAC,GAAC,IAAI,CAACS,IAAI,EAAChB,CAAC,GAACE,CAAC,KAAGA,CAAC,GAACF,CAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACqC,CAAC,GAAC,IAAI,CAACnB,IAAI,EAACjB,CAAC,GAACG,CAAC,KAAGA,CAAC,GAACH,CAAC,CAAC,EAACE,CAAC,GAACA,CAAC,GAACC,CAAC,GAACA,CAAC;IAAA;IAAC,IAAG,IAAI,CAACuC,OAAO,CAAC,CAAC,IAAE3C,CAAC,CAAC4G,KAAK,CAAC,CAAC,EAAC,OAAO3G,CAAC,CAACyG,MAAM,CAAC,CAAC,EAAC5F,MAAM,CAACC,GAAG;IAACd,CAAC,CAACqB,MAAM,CAACtB,CAAC,CAAC;IAAC,IAAIG,CAAC;MAACC,CAAC,GAAC,CAAC;MAACE,CAAC,GAAC,CAAC;IAAC,OAAOH,CAAC,GAAC,IAAI,CAACU,IAAI,GAACb,CAAC,CAACQ,CAAC,EAACL,CAAC,GAACC,CAAC,KAAGA,CAAC,GAACD,CAAC,EAACF,CAAC,CAACO,CAAC,GAAC,IAAI,CAACK,IAAI,CAAC,EAACV,CAAC,GAAC,IAAI,CAACa,IAAI,GAAChB,CAAC,CAACqC,CAAC,EAAClC,CAAC,GAACG,CAAC,KAAGA,CAAC,GAACH,CAAC,EAACF,CAAC,CAACoC,CAAC,GAAC,IAAI,CAACrB,IAAI,CAAC,EAACb,CAAC,GAACH,CAAC,CAACQ,CAAC,GAAC,IAAI,CAACS,IAAI,EAACd,CAAC,GAACC,CAAC,KAAGA,CAAC,GAACD,CAAC,EAACF,CAAC,CAACO,CAAC,GAAC,IAAI,CAACS,IAAI,CAAC,EAACd,CAAC,GAACH,CAAC,CAACqC,CAAC,GAAC,IAAI,CAACnB,IAAI,EAACf,CAAC,GAACG,CAAC,KAAGA,CAAC,GAACH,CAAC,EAACF,CAAC,CAACoC,CAAC,GAAC,IAAI,CAACnB,IAAI,CAAC,EAACd,CAAC,GAACA,CAAC,GAACE,CAAC,GAACA,CAAC;EAAA;EAACuG,yBAAyBA,CAAC7G,CAAC,EAAC;IAAC,IAAG,IAAI,CAAC2C,OAAO,CAAC,CAAC,IAAE3C,CAAC,CAAC2C,OAAO,CAAC,CAAC,EAAC,OAAO7B,MAAM,CAACC,GAAG;IAAC,IAAId,CAAC,GAACa,MAAM,CAACgG,SAAS;IAAC;MAAC,MAAM1G,CAAC,GAACD,CAAC,CAAC4G,iBAAiB,CAAC,IAAI,CAAClG,IAAI,EAAC,IAAI,CAACG,IAAI,EAAChB,CAAC,CAACiB,IAAI,EAACjB,CAAC,CAACgB,IAAI,CAAC;QAACV,CAAC,GAACH,CAAC,CAAC4G,iBAAiB,CAAC,IAAI,CAAClG,IAAI,EAAC,IAAI,CAACG,IAAI,EAAChB,CAAC,CAACiB,IAAI,EAACjB,CAAC,CAACkB,IAAI,CAAC;QAACV,CAAC,GAACL,CAAC,CAAC4G,iBAAiB,CAAC,IAAI,CAAClG,IAAI,EAAC,IAAI,CAACK,IAAI,EAAClB,CAAC,CAACiB,IAAI,EAACjB,CAAC,CAACgB,IAAI,CAAC;QAACP,CAAC,GAACN,CAAC,CAAC4G,iBAAiB,CAAC,IAAI,CAAClG,IAAI,EAAC,IAAI,CAACK,IAAI,EAAClB,CAAC,CAACiB,IAAI,EAACjB,CAAC,CAACkB,IAAI,CAAC;QAACyF,CAAC,GAACjF,IAAI,CAACC,GAAG,CAACvB,CAAC,EAACE,CAAC,CAAC;QAAC0G,CAAC,GAACtF,IAAI,CAACC,GAAG,CAACnB,CAAC,EAACC,CAAC,CAAC;QAACwG,CAAC,GAACvF,IAAI,CAACC,GAAG,CAACgF,CAAC,EAACK,CAAC,CAAC;MAAC/G,CAAC,GAACyB,IAAI,CAACG,GAAG,CAACoF,CAAC,EAAChH,CAAC,CAAC;IAAA;IAAC;MAAC,MAAMG,CAAC,GAACD,CAAC,CAAC4G,iBAAiB,CAAC,IAAI,CAAClG,IAAI,EAAC,IAAI,CAACG,IAAI,EAAChB,CAAC,CAACa,IAAI,EAACb,CAAC,CAACkB,IAAI,CAAC;QAACZ,CAAC,GAACH,CAAC,CAAC4G,iBAAiB,CAAC,IAAI,CAAClG,IAAI,EAAC,IAAI,CAACG,IAAI,EAAChB,CAAC,CAACiB,IAAI,EAACjB,CAAC,CAACkB,IAAI,CAAC;QAACV,CAAC,GAACL,CAAC,CAAC4G,iBAAiB,CAAC,IAAI,CAAC9F,IAAI,EAAC,IAAI,CAACD,IAAI,EAAChB,CAAC,CAACa,IAAI,EAACb,CAAC,CAACkB,IAAI,CAAC;QAACT,CAAC,GAACN,CAAC,CAAC4G,iBAAiB,CAAC,IAAI,CAAC9F,IAAI,EAAC,IAAI,CAACD,IAAI,EAAChB,CAAC,CAACiB,IAAI,EAACjB,CAAC,CAACkB,IAAI,CAAC;QAACyF,CAAC,GAACjF,IAAI,CAACC,GAAG,CAACvB,CAAC,EAACE,CAAC,CAAC;QAAC0G,CAAC,GAACtF,IAAI,CAACC,GAAG,CAACnB,CAAC,EAACC,CAAC,CAAC;QAACwG,CAAC,GAACvF,IAAI,CAACC,GAAG,CAACgF,CAAC,EAACK,CAAC,CAAC;MAAC/G,CAAC,GAACyB,IAAI,CAACG,GAAG,CAACoF,CAAC,EAAChH,CAAC,CAAC;IAAA;IAAC;MAAC,MAAMG,CAAC,GAACD,CAAC,CAAC4G,iBAAiB,CAAC,IAAI,CAAC9F,IAAI,EAAC,IAAI,CAACD,IAAI,EAAChB,CAAC,CAACa,IAAI,EAACb,CAAC,CAACgB,IAAI,CAAC;QAACV,CAAC,GAACH,CAAC,CAAC4G,iBAAiB,CAAC,IAAI,CAAC9F,IAAI,EAAC,IAAI,CAACD,IAAI,EAAChB,CAAC,CAACa,IAAI,EAACb,CAAC,CAACkB,IAAI,CAAC;QAACV,CAAC,GAACL,CAAC,CAAC4G,iBAAiB,CAAC,IAAI,CAAC9F,IAAI,EAAC,IAAI,CAACC,IAAI,EAAClB,CAAC,CAACa,IAAI,EAACb,CAAC,CAACgB,IAAI,CAAC;QAACP,CAAC,GAACN,CAAC,CAAC4G,iBAAiB,CAAC,IAAI,CAAC9F,IAAI,EAAC,IAAI,CAACC,IAAI,EAAClB,CAAC,CAACa,IAAI,EAACb,CAAC,CAACkB,IAAI,CAAC;QAACyF,CAAC,GAACjF,IAAI,CAACC,GAAG,CAACvB,CAAC,EAACE,CAAC,CAAC;QAAC0G,CAAC,GAACtF,IAAI,CAACC,GAAG,CAACnB,CAAC,EAACC,CAAC,CAAC;QAACwG,CAAC,GAACvF,IAAI,CAACC,GAAG,CAACgF,CAAC,EAACK,CAAC,CAAC;MAAC/G,CAAC,GAACyB,IAAI,CAACG,GAAG,CAACoF,CAAC,EAAChH,CAAC,CAAC;IAAA;IAAC;MAAC,MAAMG,CAAC,GAACD,CAAC,CAAC4G,iBAAiB,CAAC,IAAI,CAAClG,IAAI,EAAC,IAAI,CAACK,IAAI,EAAClB,CAAC,CAACa,IAAI,EAACb,CAAC,CAACgB,IAAI,CAAC;QAACV,CAAC,GAACH,CAAC,CAAC4G,iBAAiB,CAAC,IAAI,CAAClG,IAAI,EAAC,IAAI,CAACK,IAAI,EAAClB,CAAC,CAACiB,IAAI,EAACjB,CAAC,CAACgB,IAAI,CAAC;QAACR,CAAC,GAACL,CAAC,CAAC4G,iBAAiB,CAAC,IAAI,CAAC9F,IAAI,EAAC,IAAI,CAACC,IAAI,EAAClB,CAAC,CAACa,IAAI,EAACb,CAAC,CAACgB,IAAI,CAAC;QAACP,CAAC,GAACN,CAAC,CAAC4G,iBAAiB,CAAC,IAAI,CAAC9F,IAAI,EAAC,IAAI,CAACC,IAAI,EAAClB,CAAC,CAACiB,IAAI,EAACjB,CAAC,CAACgB,IAAI,CAAC;QAAC2F,CAAC,GAACjF,IAAI,CAACC,GAAG,CAACvB,CAAC,EAACE,CAAC,CAAC;QAAC0G,CAAC,GAACtF,IAAI,CAACC,GAAG,CAACnB,CAAC,EAACC,CAAC,CAAC;QAACwG,CAAC,GAACvF,IAAI,CAACC,GAAG,CAACgF,CAAC,EAACK,CAAC,CAAC;MAAC/G,CAAC,GAACyB,IAAI,CAACG,GAAG,CAACoF,CAAC,EAAChH,CAAC,CAAC;IAAA;IAAC,OAAOA,CAAC;EAAA;EAACiH,sBAAsBA,CAAClH,CAAC,EAAC;IAAC,IAAG,IAAI,CAAC2C,OAAO,CAAC,CAAC,IAAE3C,CAAC,CAAC2C,OAAO,CAAC,CAAC,EAAC,OAAO7B,MAAM,CAACC,GAAG;IAAC,IAAId,CAAC,GAAC,CAAC;IAAC,MAAMK,CAAC,GAACF,CAAC,CAACD,CAAC,EAAC,CAAC,CAAC;IAAC,IAAI,CAACwF,YAAY,CAACrF,CAAC,CAAC;IAAC,MAAME,CAAC,GAACJ,CAAC,CAACD,CAAC,EAAC,CAAC,CAAC;IAACH,CAAC,CAAC2F,YAAY,CAACnF,CAAC,CAAC;IAAC,KAAI,IAAIJ,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC,CAAC,EAACA,CAAC,EAAE,EAAC,KAAI,IAAIJ,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC,CAAC,EAACA,CAAC,EAAE,EAAC;MAAC,MAAMS,CAAC,GAACN,CAAC,CAACsG,WAAW,CAACnG,CAAC,CAACF,CAAC,CAAC,EAACI,CAAC,CAACR,CAAC,CAAC,CAAC;MAACS,CAAC,GAACR,CAAC,KAAGA,CAAC,GAACQ,CAAC,CAAC;IAAA;IAAC,OAAOR,CAAC;EAAA;EAACkH,iBAAiBA,CAACnH,CAAC,EAAC;IAAC,MAAMC,CAAC,GAACE,CAAC,CAACsG,WAAW,CAACzG,CAAC,EAAC,IAAI,CAAC0E,YAAY,CAAC,CAAC,CAAC;MAACtE,CAAC,GAACD,CAAC,CAACsG,WAAW,CAACzG,CAAC,EAAC,IAAI,CAAC4E,YAAY,CAAC,CAAC,CAAC;MAACtE,CAAC,GAACH,CAAC,CAACsG,WAAW,CAACzG,CAAC,EAAC,IAAI,CAAC2E,aAAa,CAAC,CAAC,CAAC;MAACnE,CAAC,GAACL,CAAC,CAACsG,WAAW,CAACzG,CAAC,EAAC,IAAI,CAAC6E,aAAa,CAAC,CAAC,CAAC;IAAC,IAAIpE,CAAC;MAACkG,CAAC,GAACjF,IAAI,CAACC,GAAG,CAAC1B,CAAC,EAACG,CAAC,CAAC;IAAC,OAAOK,CAAC,GAACiB,IAAI,CAACC,GAAG,CAAC1B,CAAC,EAACK,CAAC,CAAC,EAACqG,CAAC,GAAClG,CAAC,KAAGkG,CAAC,GAAClG,CAAC,CAAC,EAACA,CAAC,GAACiB,IAAI,CAACC,GAAG,CAACvB,CAAC,EAACI,CAAC,CAAC,EAACmG,CAAC,GAAClG,CAAC,KAAGkG,CAAC,GAAClG,CAAC,CAAC,EAACA,CAAC,GAACiB,IAAI,CAACC,GAAG,CAACrB,CAAC,EAACE,CAAC,CAAC,EAACmG,CAAC,GAAClG,CAAC,KAAGkG,CAAC,GAAClG,CAAC,CAAC,EAACkG,CAAC;EAAA;EAACS,cAAcA,CAACpH,CAAC,EAAC;IAAC,IAAG,IAAI,CAACkF,QAAQ,CAAClF,CAAC,CAAC,EAAC,OAAO,CAAC;IAAC,OAAO,IAAI,CAACyG,WAAW,CAACzG,CAAC,CAAC;EAAA;EAACqH,cAAcA,CAACrH,CAAC,EAAC;IAAC,IAAIC,CAAC,GAACE,CAAC,CAACsG,WAAW,CAACzG,CAAC,EAAC,IAAI,CAAC0E,YAAY,CAAC,CAAC,CAAC;IAAC,OAAOzE,CAAC,GAACyB,IAAI,CAACC,GAAG,CAACxB,CAAC,CAACsG,WAAW,CAACzG,CAAC,EAAC,IAAI,CAAC4E,YAAY,CAAC,CAAC,CAAC,EAAC3E,CAAC,CAAC,EAACA,CAAC,GAACyB,IAAI,CAACC,GAAG,CAACxB,CAAC,CAACsG,WAAW,CAACzG,CAAC,EAAC,IAAI,CAAC6E,aAAa,CAAC,CAAC,CAAC,EAAC5E,CAAC,CAAC,EAACA,CAAC,GAACyB,IAAI,CAACC,GAAG,CAACxB,CAAC,CAACsG,WAAW,CAACzG,CAAC,EAAC,IAAI,CAAC2E,aAAa,CAAC,CAAC,CAAC,EAAC1E,CAAC,CAAC,EAACA,CAAC;EAAA;EAACqH,cAAcA,CAACtH,CAAC,EAAC;IAAC,IAAGA,CAAC,CAAC4G,KAAK,CAAC,CAAC,EAAC,OAAM,CAAC,CAAC;IAAC,IAAG,IAAI,CAACjE,OAAO,CAAC,CAAC,EAAC,OAAO3C,CAAC,CAAC0G,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAIzG,CAAC,GAAC,CAAC,CAAC;IAAC,IAAGD,CAAC,CAACQ,CAAC,GAAC,IAAI,CAACK,IAAI,GAACb,CAAC,CAACQ,CAAC,GAAC,IAAI,CAACK,IAAI,GAACb,CAAC,CAACQ,CAAC,GAAC,IAAI,CAACS,IAAI,GAACjB,CAAC,CAACQ,CAAC,GAAC,IAAI,CAACS,IAAI,GAAChB,CAAC,GAAC,CAAC,CAAC,EAACD,CAAC,CAACqC,CAAC,GAAC,IAAI,CAACrB,IAAI,GAAChB,CAAC,CAACqC,CAAC,GAAC,IAAI,CAACrB,IAAI,GAAChB,CAAC,CAACqC,CAAC,GAAC,IAAI,CAACnB,IAAI,GAAClB,CAAC,CAACqC,CAAC,GAAC,IAAI,CAACnB,IAAI,GAACjB,CAAC,GAAC,CAAC,CAAC,EAACA,CAAC,EAAC,OAAM,CAAC,CAAC;IAAC,IAAGD,CAAC,CAACQ,CAAC,KAAG,IAAI,CAACK,IAAI,IAAEb,CAAC,CAACQ,CAAC,KAAG,IAAI,CAACS,IAAI,IAAEjB,CAAC,CAACqC,CAAC,KAAG,IAAI,CAACrB,IAAI,IAAEhB,CAAC,CAACqC,CAAC,KAAG,IAAI,CAACnB,IAAI,EAAC,OAAM,CAAC,CAAC;IAAC,MAAMf,CAAC,GAAC,IAAI,CAACc,IAAI,GAACjB,CAAC,CAACQ,CAAC;MAACJ,CAAC,GAACJ,CAAC,CAACQ,CAAC,GAAC,IAAI,CAACK,IAAI;MAACP,CAAC,GAAC,IAAI,CAACY,IAAI,GAAClB,CAAC,CAACqC,CAAC;MAAC7B,CAAC,GAACR,CAAC,CAACqC,CAAC,GAAC,IAAI,CAACrB,IAAI;IAAC,OAAOU,IAAI,CAACC,GAAG,CAACxB,CAAC,EAACC,CAAC,CAAC,GAACsB,IAAI,CAACC,GAAG,CAACrB,CAAC,EAACE,CAAC,CAAC,GAACR,CAAC,CAACqC,CAAC,GAAC7B,CAAC,GAACF,CAAC,GAAC,IAAI,CAACU,IAAI,GAAC,IAAI,CAACE,IAAI,GAAClB,CAAC,CAACQ,CAAC,GAACJ,CAAC,GAACD,CAAC,GAAC,IAAI,CAACU,IAAI,GAAC,IAAI,CAACI,IAAI,EAAC,CAAC,CAAC;EAAA;EAACsG,QAAQA,CAACvH,CAAC,EAAC;IAAC,MAAMC,CAAC,GAACK,CAAC,CAACN,CAAC,CAACQ,CAAC,EAAC,IAAI,CAACK,IAAI,EAAC,IAAI,CAACI,IAAI,CAAC;MAACb,CAAC,GAACE,CAAC,CAACN,CAAC,CAACqC,CAAC,EAAC,IAAI,CAACrB,IAAI,EAAC,IAAI,CAACE,IAAI,CAAC;IAAC,OAAOf,CAAC,CAACO,SAAS,CAACT,CAAC,EAACG,CAAC,CAAC;EAAA;EAACoH,gBAAgBA,CAACxH,CAAC,EAAC;IAAC,IAAG,IAAI,CAAC2C,OAAO,CAAC,CAAC,IAAE3C,CAAC,CAAC4G,KAAK,CAAC,CAAC,EAAC,OAAO9F,MAAM,CAACC,GAAG;IAAC,IAAGf,CAAC,CAACQ,CAAC,KAAG,IAAI,CAACK,IAAI,EAAC,OAAOb,CAAC,CAACqC,CAAC,GAAC,IAAI,CAACrB,IAAI;IAAC,MAAMf,CAAC,GAAC,IAAI,CAACiB,IAAI,GAAC,IAAI,CAACF,IAAI;MAACZ,CAAC,GAAC,IAAI,CAACa,IAAI,GAAC,IAAI,CAACJ,IAAI;IAAC,IAAGb,CAAC,CAACqC,CAAC,KAAG,IAAI,CAACnB,IAAI,EAAC,OAAOjB,CAAC,GAACD,CAAC,CAACQ,CAAC,GAAC,IAAI,CAACK,IAAI;IAAC,IAAGb,CAAC,CAACQ,CAAC,KAAG,IAAI,CAACS,IAAI,EAAC,OAAOhB,CAAC,GAACG,CAAC,GAAC,IAAI,CAACc,IAAI,GAAClB,CAAC,CAACqC,CAAC;IAAC,IAAGrC,CAAC,CAACqC,CAAC,KAAG,IAAI,CAACrB,IAAI,EAAC,OAAO,CAAC,GAACf,CAAC,GAACG,CAAC,GAAC,IAAI,CAACa,IAAI,GAACjB,CAAC,CAACQ,CAAC;IAAC,MAAMF,CAAC,GAAC,IAAIH,CAAC,CAAD,CAAC;IAAC,OAAOG,CAAC,CAACmH,gBAAgB,CAACzH,CAAC,CAAC,EAAC,IAAI,CAACsH,cAAc,CAAChH,CAAC,CAAC,EAAC,IAAI,CAACkH,gBAAgB,CAAClH,CAAC,CAAC;EAAA;EAACoH,YAAYA,CAAC1H,CAAC,EAAC;IAAC,IAAG,IAAI,CAAC2C,OAAO,CAAC,CAAC,EAAC,OAAM,CAAC,CAAC;IAAC,IAAI1C,CAAC,GAAC,IAAI,CAACuH,gBAAgB,CAACxH,CAAC,CAAC;IAAC,MAAMG,CAAC,GAAC,IAAI,CAACe,IAAI,GAAC,IAAI,CAACF,IAAI;MAACZ,CAAC,GAAC,IAAI,CAACa,IAAI,GAAC,IAAI,CAACJ,IAAI;IAAC,OAAOZ,CAAC,GAACE,CAAC,GAAC,CAAC,GAAC,CAACF,CAAC,IAAEE,CAAC,IAAEC,CAAC,GAAC,CAAC,GAACH,CAAC,GAACG,CAAC,GAACD,CAAC,GAAC,CAAC,GAAC,CAAC;EAAA;EAACwH,SAASA,CAAC3H,CAAC,EAACG,CAAC,EAAC;IAAC,QAAOH,CAAC;MAAE,KAAK,CAAC;QAACG,CAAC,CAACyH,mBAAmB,CAAC,IAAI,CAAC/G,IAAI,EAAC,IAAI,CAACG,IAAI,EAAC,IAAI,CAACH,IAAI,EAAC,IAAI,CAACK,IAAI,CAAC;QAAC;MAAM,KAAK,CAAC;QAACf,CAAC,CAACyH,mBAAmB,CAAC,IAAI,CAAC/G,IAAI,EAAC,IAAI,CAACK,IAAI,EAAC,IAAI,CAACD,IAAI,EAAC,IAAI,CAACC,IAAI,CAAC;QAAC;MAAM,KAAK,CAAC;QAACf,CAAC,CAACyH,mBAAmB,CAAC,IAAI,CAAC3G,IAAI,EAAC,IAAI,CAACC,IAAI,EAAC,IAAI,CAACD,IAAI,EAAC,IAAI,CAACD,IAAI,CAAC;QAAC;MAAM,KAAK,CAAC;QAACb,CAAC,CAACyH,mBAAmB,CAAC,IAAI,CAAC3G,IAAI,EAAC,IAAI,CAACD,IAAI,EAAC,IAAI,CAACH,IAAI,EAAC,IAAI,CAACG,IAAI,CAAC;QAAC;MAAM;QAAQf,CAAC,CAAC,YAAY,CAAC;IAAA;IAAC,OAAOE,CAAC;EAAA;EAAC0H,iBAAiBA,CAAC7H,CAAC,EAACC,CAAC,EAAC;IAAC,OAAOyB,IAAI,CAACqC,GAAG,CAAC/D,CAAC,CAACQ,CAAC,GAAC,IAAI,CAACK,IAAI,CAAC,IAAEZ,CAAC,IAAEyB,IAAI,CAACqC,GAAG,CAAC/D,CAAC,CAACQ,CAAC,GAAC,IAAI,CAACS,IAAI,CAAC,IAAEhB,CAAC,IAAEyB,IAAI,CAACqC,GAAG,CAAC/D,CAAC,CAACqC,CAAC,GAAC,IAAI,CAACrB,IAAI,CAAC,IAAEf,CAAC,IAAEyB,IAAI,CAACqC,GAAG,CAAC/D,CAAC,CAACqC,CAAC,GAAC,IAAI,CAACnB,IAAI,CAAC,IAAEjB,CAAC;EAAA;EAAC6H,8BAA8BA,CAAA,EAAE;IAAC,IAAG,IAAI,CAACnF,OAAO,CAAC,CAAC,EAAC,OAAOnC,CAAC,CAAC,CAAC;IAAC,OAAM,CAACkB,IAAI,CAACqC,GAAG,CAAC,IAAI,CAAClD,IAAI,CAAC,GAACa,IAAI,CAACqC,GAAG,CAAC,IAAI,CAAC9C,IAAI,CAAC,GAACS,IAAI,CAACqC,GAAG,CAAC,IAAI,CAAC/C,IAAI,CAAC,GAACU,IAAI,CAACqC,GAAG,CAAC,IAAI,CAAC7C,IAAI,CAAC,GAAC,CAAC,IAAEV,CAAC,CAAC,CAAC;EAAA;EAACuH,QAAQA,CAAA,EAAE;IAAC,OAAM,IAAI,IAAI,CAAClH,IAAI,KAAK,IAAI,CAACG,IAAI,KAAK,IAAI,CAACC,IAAI,KAAK,IAAI,CAACC,IAAI,GAAG;EAAA;AAAC;AAACT,CAAC,CAAC0F,SAAS,GAAC,CAAC,EAAC1F,CAAC,CAAC2F,SAAS,GAAC,CAAC,EAAC3F,CAAC,CAACyF,KAAK,GAAC,CAAC,EAACzF,CAAC,CAAC4F,KAAK,GAAC,EAAE;AAAC,SAAO5F,CAAC,IAAIuH,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}