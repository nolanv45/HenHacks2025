{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport t from \"../DisplayEntity.js\";\nimport e from \"../DisplayRecord.js\";\nimport { VertexDataWriter as r } from \"./VertexDataWriter.js\";\nimport i from \"../util/Writer.js\";\nclass n {\n  constructor(e) {\n    let r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this._id = e, this._sizeHint = r, this._entityRecordCountOffset = 0, this._entityCountOffset = 0, this._entityIdIndex = 0, this._entitySortKeyIndex = 0, this._didEntityStart = !1, this._instanceIdToVertexData = new Map(), this._recordIndexStart = 0, this._recordIndexCount = 0, this._recordVertexStart = 0, this._recordVertexCount = 0, this._current = {\n      metric: null,\n      writer: null,\n      start: 0,\n      sortKey: 0,\n      instanceId: 0,\n      layoutHash: 0,\n      indexStart: 0,\n      vertexStart: 0,\n      textureKey: 0,\n      metricBoxLenPointer: 0\n    }, this._entities = new i(Uint32Array, this._sizeHint * t.byteSizeHint), this._entityCountOffset = this._entities.push(0);\n  }\n  get id() {\n    return this._id;\n  }\n  serialize() {\n    const t = new Array(),\n      e = [],\n      r = this._entities.buffer();\n    for (const i of this._instanceIdToVertexData.values()) e.push(i.serialize(t));\n    return {\n      message: {\n        data: e,\n        entities: r\n      },\n      transferList: t\n    };\n  }\n  vertexCount() {\n    return this._current.writer?.vertexCount ?? 0;\n  }\n  indexCount() {\n    return this._current.writer?.indexCount ?? 0;\n  }\n  vertexEnsureSize(t) {\n    this._current.writer.vertexEnsureSize(t);\n  }\n  indexEnsureSize(t) {\n    this._current.writer.indexEnsureSize(t);\n  }\n  vertexWrite(t) {\n    this._current.writer.writeVertex(t);\n  }\n  vertexWriteRegion(t) {\n    this._current.writer.writeVertexRegion(t);\n  }\n  vertexWriteF32(t) {\n    this._current.writer.writeVertexF32(t);\n  }\n  recordBounds(t, e, r, i) {}\n  indexWrite(t) {\n    this._current.writer.writeIndex(t);\n  }\n  metricStart(t) {\n    this._current.metric = t;\n  }\n  metricEnd() {\n    const t = this._current.writer;\n    this._current.metric.bounds.length && t.writeMetric(this._current.metric);\n  }\n  metricBoxWrite(t) {\n    this._current.metric.bounds.push(t);\n  }\n  entityStart(t) {\n    let e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : t;\n    this._entityIdIndex = this._entities.push(t), this._entitySortKeyIndex = this._entities.writeF32(e), this._entityRecordCountOffset = this._entities.push(0), this._didEntityStart = !0;\n  }\n  entityRecordCount() {\n    return this._entities.getValue(this._entityRecordCountOffset);\n  }\n  entityEnd() {\n    if (!this._didEntityStart) return;\n    0 === this.entityRecordCount() ? this._entities.seek(this._entityIdIndex) : this._entities.incr(this._entityCountOffset), this._didEntityStart = !1;\n  }\n  recordCount() {\n    return this._entities.getValue(this._entityRecordCountOffset);\n  }\n  recordStart(t, e) {\n    let r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    this._current.writer = this._getVertexWriter(t, e), this._current.indexStart = this._current.writer.indexCount, this._current.vertexStart = this._current.writer.vertexCount, this._current.instanceId = t, this._current.layoutHash = e.hash, this._current.textureKey = r;\n  }\n  recordEnd() {\n    let t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    const r = this._current.vertexStart,\n      i = this._current.writer.vertexCount - r;\n    if (!i) return !1;\n    const n = this._current.indexStart,\n      s = this._current.writer.indexCount - n;\n    return this._recordIndexStart = n, this._recordIndexCount = s, this._recordVertexStart = r, this._recordVertexCount = i, this._entities.incr(this._entityRecordCountOffset), e.write(this._entities, this._current.instanceId, this._current.textureKey, n, s, r, i, t), !0;\n  }\n  copyLast(t, r) {\n    const i = this._recordVertexStart + this._recordVertexCount;\n    this._entities.incr(this._entityRecordCountOffset), e.write(this._entities, this._current.instanceId, this._current.textureKey, this._recordIndexStart + this._recordIndexCount, this._recordIndexCount, i, this._recordVertexCount, 0);\n    const n = this._current.writer.indexWriter,\n      s = this._current.writer.vertexWriter,\n      o = this._recordIndexStart + this._recordIndexCount,\n      c = this._recordVertexCount;\n    for (let e = this._recordIndexStart; e !== o; e++) {\n      const t = n.getValue(e);\n      n.push(t + c);\n    }\n    const u = this._current.writer.layout.stride / Uint32Array.BYTES_PER_ELEMENT,\n      h = this._recordVertexStart * u,\n      _ = (this._recordVertexStart + this._recordVertexCount) * u;\n    for (let e = h; e !== _; e++) {\n      const t = s.getValue(e);\n      s.push(t);\n    }\n    const d = this._current.writer.layout.position,\n      a = d.packPrecisionFactor ?? 1,\n      x = d.offset / Uint32Array.BYTES_PER_ELEMENT,\n      y = t * a,\n      S = r * a;\n    for (let e = i * u; e <= s.length; e += u) s.i1616Add(e + x, y, S);\n  }\n  copyLastFrom(t, e, r) {\n    const i = t._entities.getValue(t._entityIdIndex);\n    if (i !== this._entities.getValue(this._entityIdIndex)) {\n      const e = t._entities.getValueF32(t._entitySortKeyIndex);\n      this.entityStart(i, e);\n    }\n    this.recordStart(t._current.instanceId, t._current.writer.layout, t._current.textureKey);\n    const n = this._current.writer.layout.stride / Uint32Array.BYTES_PER_ELEMENT,\n      s = this._current.vertexStart,\n      o = t._current.vertexStart - s,\n      c = this._current.writer.indexWriter,\n      u = this._current.writer.vertexWriter,\n      h = t._current.writer.indexWriter,\n      _ = t._current.writer.vertexWriter;\n    for (let f = t._current.indexStart; f !== h.length; f++) {\n      const t = h.getValue(f);\n      c.push(t - o);\n    }\n    for (let f = t._current.vertexStart * n; f !== _.length; f++) {\n      const t = _.getValue(f);\n      u.push(t);\n    }\n    const d = this._current.writer.layout.position,\n      a = d.packPrecisionFactor ?? 1,\n      x = d.offset / Uint32Array.BYTES_PER_ELEMENT,\n      y = e * a,\n      S = r * a;\n    for (let f = s * n; f <= u.length; f += n) u.i1616Add(f + x, y, S);\n    this.recordEnd();\n  }\n  _getVertexWriter(t, e) {\n    const i = this._instanceIdToVertexData;\n    return i.has(t) || i.set(t, new r(t, e, this._sizeHint)), i.get(t);\n  }\n}\nexport { n as MeshData };","map":{"version":3,"names":["t","e","VertexDataWriter","r","i","n","constructor","arguments","length","undefined","_id","_sizeHint","_entityRecordCountOffset","_entityCountOffset","_entityIdIndex","_entitySortKeyIndex","_didEntityStart","_instanceIdToVertexData","Map","_recordIndexStart","_recordIndexCount","_recordVertexStart","_recordVertexCount","_current","metric","writer","start","sortKey","instanceId","layoutHash","indexStart","vertexStart","textureKey","metricBoxLenPointer","_entities","Uint32Array","byteSizeHint","push","id","serialize","Array","buffer","values","message","data","entities","transferList","vertexCount","indexCount","vertexEnsureSize","indexEnsureSize","vertexWrite","writeVertex","vertexWriteRegion","writeVertexRegion","vertexWriteF32","writeVertexF32","recordBounds","indexWrite","writeIndex","metricStart","metricEnd","bounds","writeMetric","metricBoxWrite","entityStart","writeF32","entityRecordCount","getValue","entityEnd","seek","incr","recordCount","recordStart","_getVertexWriter","hash","recordEnd","s","write","copyLast","indexWriter","vertexWriter","o","c","u","layout","stride","BYTES_PER_ELEMENT","h","_","d","position","a","packPrecisionFactor","x","offset","y","S","i1616Add","copyLastFrom","getValueF32","f","has","set","get","MeshData"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/node_modules/@arcgis/core/views/2d/engine/webgl/mesh/MeshData.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport t from\"../DisplayEntity.js\";import e from\"../DisplayRecord.js\";import{VertexDataWriter as r}from\"./VertexDataWriter.js\";import i from\"../util/Writer.js\";class n{constructor(e,r=0){this._id=e,this._sizeHint=r,this._entityRecordCountOffset=0,this._entityCountOffset=0,this._entityIdIndex=0,this._entitySortKeyIndex=0,this._didEntityStart=!1,this._instanceIdToVertexData=new Map,this._recordIndexStart=0,this._recordIndexCount=0,this._recordVertexStart=0,this._recordVertexCount=0,this._current={metric:null,writer:null,start:0,sortKey:0,instanceId:0,layoutHash:0,indexStart:0,vertexStart:0,textureKey:0,metricBoxLenPointer:0},this._entities=new i(Uint32Array,this._sizeHint*t.byteSizeHint),this._entityCountOffset=this._entities.push(0)}get id(){return this._id}serialize(){const t=new Array,e=[],r=this._entities.buffer();for(const i of this._instanceIdToVertexData.values())e.push(i.serialize(t));return{message:{data:e,entities:r},transferList:t}}vertexCount(){return this._current.writer?.vertexCount??0}indexCount(){return this._current.writer?.indexCount??0}vertexEnsureSize(t){this._current.writer.vertexEnsureSize(t)}indexEnsureSize(t){this._current.writer.indexEnsureSize(t)}vertexWrite(t){this._current.writer.writeVertex(t)}vertexWriteRegion(t){this._current.writer.writeVertexRegion(t)}vertexWriteF32(t){this._current.writer.writeVertexF32(t)}recordBounds(t,e,r,i){}indexWrite(t){this._current.writer.writeIndex(t)}metricStart(t){this._current.metric=t}metricEnd(){const t=this._current.writer;this._current.metric.bounds.length&&t.writeMetric(this._current.metric)}metricBoxWrite(t){this._current.metric.bounds.push(t)}entityStart(t,e=t){this._entityIdIndex=this._entities.push(t),this._entitySortKeyIndex=this._entities.writeF32(e),this._entityRecordCountOffset=this._entities.push(0),this._didEntityStart=!0}entityRecordCount(){return this._entities.getValue(this._entityRecordCountOffset)}entityEnd(){if(!this._didEntityStart)return;0===this.entityRecordCount()?this._entities.seek(this._entityIdIndex):this._entities.incr(this._entityCountOffset),this._didEntityStart=!1}recordCount(){return this._entities.getValue(this._entityRecordCountOffset)}recordStart(t,e,r=0){this._current.writer=this._getVertexWriter(t,e),this._current.indexStart=this._current.writer.indexCount,this._current.vertexStart=this._current.writer.vertexCount,this._current.instanceId=t,this._current.layoutHash=e.hash,this._current.textureKey=r}recordEnd(t=0){const r=this._current.vertexStart,i=this._current.writer.vertexCount-r;if(!i)return!1;const n=this._current.indexStart,s=this._current.writer.indexCount-n;return this._recordIndexStart=n,this._recordIndexCount=s,this._recordVertexStart=r,this._recordVertexCount=i,this._entities.incr(this._entityRecordCountOffset),e.write(this._entities,this._current.instanceId,this._current.textureKey,n,s,r,i,t),!0}copyLast(t,r){const i=this._recordVertexStart+this._recordVertexCount;this._entities.incr(this._entityRecordCountOffset),e.write(this._entities,this._current.instanceId,this._current.textureKey,this._recordIndexStart+this._recordIndexCount,this._recordIndexCount,i,this._recordVertexCount,0);const n=this._current.writer.indexWriter,s=this._current.writer.vertexWriter,o=this._recordIndexStart+this._recordIndexCount,c=this._recordVertexCount;for(let e=this._recordIndexStart;e!==o;e++){const t=n.getValue(e);n.push(t+c)}const u=this._current.writer.layout.stride/Uint32Array.BYTES_PER_ELEMENT,h=this._recordVertexStart*u,_=(this._recordVertexStart+this._recordVertexCount)*u;for(let e=h;e!==_;e++){const t=s.getValue(e);s.push(t)}const d=this._current.writer.layout.position,a=d.packPrecisionFactor??1,x=d.offset/Uint32Array.BYTES_PER_ELEMENT,y=t*a,S=r*a;for(let e=i*u;e<=s.length;e+=u)s.i1616Add(e+x,y,S)}copyLastFrom(t,e,r){const i=t._entities.getValue(t._entityIdIndex);if(i!==this._entities.getValue(this._entityIdIndex)){const e=t._entities.getValueF32(t._entitySortKeyIndex);this.entityStart(i,e)}this.recordStart(t._current.instanceId,t._current.writer.layout,t._current.textureKey);const n=this._current.writer.layout.stride/Uint32Array.BYTES_PER_ELEMENT,s=this._current.vertexStart,o=t._current.vertexStart-s,c=this._current.writer.indexWriter,u=this._current.writer.vertexWriter,h=t._current.writer.indexWriter,_=t._current.writer.vertexWriter;for(let f=t._current.indexStart;f!==h.length;f++){const t=h.getValue(f);c.push(t-o)}for(let f=t._current.vertexStart*n;f!==_.length;f++){const t=_.getValue(f);u.push(t)}const d=this._current.writer.layout.position,a=d.packPrecisionFactor??1,x=d.offset/Uint32Array.BYTES_PER_ELEMENT,y=e*a,S=r*a;for(let f=s*n;f<=u.length;f+=n)u.i1616Add(f+x,y,S);this.recordEnd()}_getVertexWriter(t,e){const i=this._instanceIdToVertexData;return i.has(t)||i.set(t,new r(t,e,this._sizeHint)),i.get(t)}}export{n as MeshData};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}