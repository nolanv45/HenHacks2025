{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport t from \"../../../core/Error.js\";\nimport r from \"./CovJSONRaster.js\";\nimport e from \"./ImageAuxRaster.js\";\nimport s from \"./ImageServerRaster.js\";\nimport o from \"./InMemoryRaster.js\";\nimport a from \"./MRFRaster.js\";\nimport c from \"./TIFFRaster.js\";\nconst n = new Map();\nn.set(\"MRF\", {\n  desc: \"Meta Raster Format\",\n  constructor: a\n}), n.set(\"TIFF\", {\n  desc: \"GeoTIFF\",\n  constructor: c\n}), n.set(\"RasterTileServer\", {\n  desc: \"Raster Tile Server\",\n  constructor: s\n}), n.set(\"JPG\", {\n  desc: \"JPG Raster Format\",\n  constructor: e\n}), n.set(\"PNG\", {\n  desc: \"PNG Raster Format\",\n  constructor: e\n}), n.set(\"GIF\", {\n  desc: \"GIF Raster Format\",\n  constructor: e\n}), n.set(\"BMP\", {\n  desc: \"BMP Raster Format\",\n  constructor: e\n}), n.set(\"CovJSON\", {\n  desc: \"COVJSON Raster Format\",\n  constructor: r\n}), n.set(\"MEMORY\", {\n  desc: \"In Memory Raster Format\",\n  constructor: o\n});\nclass u {\n  static get supportedFormats() {\n    const t = new Set();\n    return n.forEach((r, e) => t.add(e)), t;\n  }\n  static async open(r) {\n    const {\n      url: e,\n      ioConfig: s,\n      source: o,\n      sourceJSON: a\n    } = r;\n    let c = r.datasetFormat ?? s?.datasetFormat;\n    null == c && (e.includes(\".\") ? c = e.slice(e.lastIndexOf(\".\") + 1).toUpperCase() : \"coverage\" === o?.type?.toLowerCase() ? c = \"CovJSON\" : o?.extent && o.pixelblocks && (c = \"MEMORY\")), \"OVR\" === c || \"TIF\" === c ? c = \"TIFF\" : \"JPG\" === c || \"JPEG\" === c || \"JFIF\" === c ? c = \"JPG\" : \"COVJSON\" === c && (c = \"CovJSON\"), e.toLowerCase().includes(\"/imageserver\") && !e.toLowerCase().includes(\"/wcsserver\") && (c = \"RasterTileServer\");\n    const u = {\n      url: e,\n      source: o,\n      sourceJSON: a,\n      datasetFormat: c,\n      ioConfig: s ?? {\n        bandIds: null,\n        sampling: null\n      }\n    };\n    if (Object.keys(u).forEach(t => {\n      null == u[t] && delete u[t];\n    }), c) {\n      if (!this.supportedFormats.has(c)) throw new t(\"rasterfactory:open\", \"not a supported format \" + c);\n      if (\"CRF\" === c) throw new t(\"rasterfactory:open\", `cannot open raster: ${e}`);\n      const s = new (0, n.get(c).constructor)(u);\n      return await s.open({\n        signal: r.signal\n      }), s;\n    }\n    const i = Array.from(n.keys()).filter(t => \"CovJSON\" !== t && \"Memory\" !== t);\n    let l = 0;\n    const m = () => {\n      if (c = i[l++], !c) return null;\n      if (\"CRF\" === c) return null;\n      const t = new (0, n.get(c).constructor)(u);\n      return t.open({\n        signal: r.signal\n      }).then(() => t).catch(() => m());\n    };\n    return m();\n  }\n  static register(t, r, e) {\n    n.has(t.toUpperCase()) || n.set(t.toUpperCase(), {\n      desc: r,\n      constructor: e\n    });\n  }\n}\nexport { u as default };","map":{"version":3,"names":["t","r","e","s","o","a","c","n","Map","set","desc","constructor","u","supportedFormats","Set","forEach","add","open","url","ioConfig","source","sourceJSON","datasetFormat","includes","slice","lastIndexOf","toUpperCase","type","toLowerCase","extent","pixelblocks","bandIds","sampling","Object","keys","has","get","signal","i","Array","from","filter","l","m","then","catch","register","default"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/node_modules/@arcgis/core/layers/support/rasterDatasets/RasterFactory.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport t from\"../../../core/Error.js\";import r from\"./CovJSONRaster.js\";import e from\"./ImageAuxRaster.js\";import s from\"./ImageServerRaster.js\";import o from\"./InMemoryRaster.js\";import a from\"./MRFRaster.js\";import c from\"./TIFFRaster.js\";const n=new Map;n.set(\"MRF\",{desc:\"Meta Raster Format\",constructor:a}),n.set(\"TIFF\",{desc:\"GeoTIFF\",constructor:c}),n.set(\"RasterTileServer\",{desc:\"Raster Tile Server\",constructor:s}),n.set(\"JPG\",{desc:\"JPG Raster Format\",constructor:e}),n.set(\"PNG\",{desc:\"PNG Raster Format\",constructor:e}),n.set(\"GIF\",{desc:\"GIF Raster Format\",constructor:e}),n.set(\"BMP\",{desc:\"BMP Raster Format\",constructor:e}),n.set(\"CovJSON\",{desc:\"COVJSON Raster Format\",constructor:r}),n.set(\"MEMORY\",{desc:\"In Memory Raster Format\",constructor:o});class u{static get supportedFormats(){const t=new Set;return n.forEach(((r,e)=>t.add(e))),t}static async open(r){const{url:e,ioConfig:s,source:o,sourceJSON:a}=r;let c=r.datasetFormat??s?.datasetFormat;null==c&&(e.includes(\".\")?c=e.slice(e.lastIndexOf(\".\")+1).toUpperCase():\"coverage\"===o?.type?.toLowerCase()?c=\"CovJSON\":o?.extent&&o.pixelblocks&&(c=\"MEMORY\")),\"OVR\"===c||\"TIF\"===c?c=\"TIFF\":\"JPG\"===c||\"JPEG\"===c||\"JFIF\"===c?c=\"JPG\":\"COVJSON\"===c&&(c=\"CovJSON\"),e.toLowerCase().includes(\"/imageserver\")&&!e.toLowerCase().includes(\"/wcsserver\")&&(c=\"RasterTileServer\");const u={url:e,source:o,sourceJSON:a,datasetFormat:c,ioConfig:s??{bandIds:null,sampling:null}};if(Object.keys(u).forEach((t=>{null==u[t]&&delete u[t]})),c){if(!this.supportedFormats.has(c))throw new t(\"rasterfactory:open\",\"not a supported format \"+c);if(\"CRF\"===c)throw new t(\"rasterfactory:open\",`cannot open raster: ${e}`);const s=new(0,n.get(c).constructor)(u);return await s.open({signal:r.signal}),s}const i=Array.from(n.keys()).filter((t=>\"CovJSON\"!==t&&\"Memory\"!==t));let l=0;const m=()=>{if(c=i[l++],!c)return null;if(\"CRF\"===c)return null;const t=new(0,n.get(c).constructor)(u);return t.open({signal:r.signal}).then((()=>t)).catch((()=>m()))};return m()}static register(t,r,e){n.has(t.toUpperCase())||n.set(t.toUpperCase(),{desc:r,constructor:e})}}export{u as default};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}