{"ast":null,"code":"import { ContextRequestEvent as t } from \"../context-request-event.js\";\n/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nclass s {\n  constructor(t, s, i, h) {\n    if (this.subscribe = !1, this.provided = !1, this.value = void 0, this.t = (t, s) => {\n      this.unsubscribe && (this.unsubscribe !== s && (this.provided = !1, this.unsubscribe()), this.subscribe || this.unsubscribe()), this.value = t, this.host.requestUpdate(), this.provided && !this.subscribe || (this.provided = !0, this.callback && this.callback(t, s)), this.unsubscribe = s;\n    }, this.host = t, void 0 !== s.context) {\n      const t = s;\n      this.context = t.context, this.callback = t.callback, this.subscribe = t.subscribe ?? !1;\n    } else this.context = s, this.callback = i, this.subscribe = h ?? !1;\n    this.host.addController(this);\n  }\n  hostConnected() {\n    this.dispatchRequest();\n  }\n  hostDisconnected() {\n    this.unsubscribe && (this.unsubscribe(), this.unsubscribe = void 0);\n  }\n  dispatchRequest() {\n    this.host.dispatchEvent(new t(this.context, this.host, this.t, this.subscribe));\n  }\n}\nexport { s as ContextConsumer };","map":{"version":3,"names":["s","constructor","t","i","h","subscribe","provided","value","unsubscribe","host","requestUpdate","callback","context","addController","hostConnected","dispatchRequest","hostDisconnected","dispatchEvent","ContextConsumer"],"sources":["C:\\Users\\nolan\\tasks\\HenHacks2025\\henhack25\\node_modules\\@lit\\context\\src\\lib\\controllers\\context-consumer.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  ContextCallback,\n  ContextRequestEvent,\n} from '../context-request-event.js';\nimport type {Context, ContextType} from '../create-context.js';\nimport type {\n  ReactiveController,\n  ReactiveControllerHost,\n} from '@lit/reactive-element';\n\nexport interface Options<C extends Context<unknown, unknown>> {\n  context: C;\n  callback?: (value: ContextType<C>, dispose?: () => void) => void;\n  subscribe?: boolean;\n}\n\n/**\n * A ReactiveController which adds context consuming behavior to a custom\n * element by dispatching `context-request` events.\n *\n * When the host element is connected to the document it will emit a\n * `context-request` event with its context key. When the context request\n * is satisfied the controller will invoke the callback, if present, and\n * trigger a host update so it can respond to the new value.\n *\n * It will also call the dispose method given by the provider when the\n * host element is disconnected.\n */\nexport class ContextConsumer<\n  C extends Context<unknown, unknown>,\n  HostElement extends ReactiveControllerHost & HTMLElement,\n> implements ReactiveController\n{\n  protected host: HostElement;\n  private context: C;\n  private callback?: (value: ContextType<C>, dispose?: () => void) => void;\n  private subscribe = false;\n\n  private provided = false;\n\n  value?: ContextType<C> = undefined;\n\n  constructor(host: HostElement, options: Options<C>);\n  /** @deprecated Use new ContextConsumer(host, options) */\n  constructor(\n    host: HostElement,\n    context: C,\n    callback?: (value: ContextType<C>, dispose?: () => void) => void,\n    subscribe?: boolean\n  );\n  constructor(\n    host: HostElement,\n    contextOrOptions: C | Options<C>,\n    callback?: (value: ContextType<C>, dispose?: () => void) => void,\n    subscribe?: boolean\n  ) {\n    this.host = host;\n    // This is a potentially fragile duck-type. It means a context object can't\n    // have a property name context and be used in positional argument form.\n    if ((contextOrOptions as Options<C>).context !== undefined) {\n      const options = contextOrOptions as Options<C>;\n      this.context = options.context;\n      this.callback = options.callback;\n      this.subscribe = options.subscribe ?? false;\n    } else {\n      this.context = contextOrOptions as C;\n      this.callback = callback;\n      this.subscribe = subscribe ?? false;\n    }\n    this.host.addController(this);\n  }\n\n  private unsubscribe?: () => void;\n\n  hostConnected(): void {\n    this.dispatchRequest();\n  }\n\n  hostDisconnected(): void {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n      this.unsubscribe = undefined;\n    }\n  }\n\n  private dispatchRequest() {\n    this.host.dispatchEvent(\n      new ContextRequestEvent(\n        this.context,\n        this.host,\n        this._callback,\n        this.subscribe\n      )\n    );\n  }\n\n  // This function must have stable identity to properly dedupe in ContextRoot\n  // if this element connects multiple times.\n  private _callback: ContextCallback<ContextType<C>> = (value, unsubscribe) => {\n    // some providers will pass an unsubscribe function indicating they may provide future values\n    if (this.unsubscribe) {\n      // if the unsubscribe function changes this implies we have changed provider\n      if (this.unsubscribe !== unsubscribe) {\n        // cleanup the old provider\n        this.provided = false;\n        this.unsubscribe();\n      }\n      // if we don't support subscription, immediately unsubscribe\n      if (!this.subscribe) {\n        this.unsubscribe();\n      }\n    }\n\n    // store the value so that it can be retrieved from the controller\n    this.value = value;\n    // schedule an update in case this value is used in a template\n    this.host.requestUpdate();\n\n    // only invoke callback if we are either expecting updates or have not yet\n    // been provided a value\n    if (!this.provided || this.subscribe) {\n      this.provided = true;\n      if (this.callback) {\n        this.callback(value, unsubscribe);\n      }\n    }\n\n    this.unsubscribe = unsubscribe;\n  };\n}\n"],"mappings":";;;;;;MAkCaA,CAAA;EAsBXC,YACEC,CAAA,EACAF,CAAA,EACAG,CAAA,EACAC,CAAA;IAKA,IAvBM,KAASC,SAAA,IAAG,GAEZ,KAAQC,QAAA,IAAG,GAEnB,KAAKC,KAAA,QAAoB,GA0DjB,KAAAL,CAAA,GAA6C,CAACA,CAAA,EAAOF,CAAA;MAEvD,KAAKQ,WAAA,KAEH,KAAKA,WAAA,KAAgBR,CAAA,KAEvB,KAAKM,QAAA,IAAW,GAChB,KAAKE,WAAA,KAGF,KAAKH,SAAA,IACR,KAAKG,WAAA,KAKT,KAAKD,KAAA,GAAQL,CAAA,EAEb,KAAKO,IAAA,CAAKC,aAAA,IAIL,KAAKJ,QAAA,KAAY,KAAKD,SAAA,KACzB,KAAKC,QAAA,IAAW,GACZ,KAAKK,QAAA,IACP,KAAKA,QAAA,CAAST,CAAA,EAAOF,CAAA,IAIzB,KAAKQ,WAAA,GAAcR,CAAW;IAAA,GAvE9B,KAAKS,IAAA,GAAOP,CAAA,OAGqC,MAA5CF,CAAA,CAAgCY,OAAA,EAAuB;MAC1D,MAAMV,CAAA,GAAUF,CAAA;MAChB,KAAKY,OAAA,GAAUV,CAAA,CAAQU,OAAA,EACvB,KAAKD,QAAA,GAAWT,CAAA,CAAQS,QAAA,EACxB,KAAKN,SAAA,GAAYH,CAAA,CAAQG,SAAA,KAAa,CACvC;IAAA,OACC,KAAKO,OAAA,GAAUZ,CAAA,EACf,KAAKW,QAAA,GAAWR,CAAA,EAChB,KAAKE,SAAA,GAAYD,CAAA,KAAa;IAEhC,KAAKK,IAAA,CAAKI,aAAA,CAAc,KACzB;EAAA;EAIDC,cAAA;IACE,KAAKC,eAAA,EACN;EAAA;EAEDC,iBAAA;IACM,KAAKR,WAAA,KACP,KAAKA,WAAA,IACL,KAAKA,WAAA,QAAc,EAEtB;EAAA;EAEOO,gBAAA;IACN,KAAKN,IAAA,CAAKQ,aAAA,CACR,IAAIf,CAAA,CACF,KAAKU,OAAA,EACL,KAAKH,IAAA,EACL,KAAKP,CAAA,EACL,KAAKG,SAAA,EAGV;EAAA;AAAA;AAAA,SAAAL,CAAA,IAAAkB,eAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}