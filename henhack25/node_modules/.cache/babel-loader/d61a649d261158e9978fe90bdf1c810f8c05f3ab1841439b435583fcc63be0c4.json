{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport { set as e, copy as o } from \"../core/libs/gl-matrix-2/math/vec2.js\";\nimport { create as i } from \"../core/libs/gl-matrix-2/factories/vec2f64.js\";\nimport { ZEROS as r, fromValues as l } from \"../core/libs/gl-matrix-2/factories/vec4f64.js\";\nimport { earth as t } from \"../geometry/support/Ellipsoid.js\";\nimport { ShaderOutput as a } from \"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";\nimport { RejectBySlice as s } from \"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";\nimport { ObjectAndLayerIdColor as n } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/ObjectAndLayerIdColor.glsl.js\";\nimport { AlignPixel as c } from \"../views/3d/webgl-engine/core/shaderLibrary/hud/AlignPixel.glsl.js\";\nimport { HUD as d } from \"../views/3d/webgl-engine/core/shaderLibrary/hud/HUD.glsl.js\";\nimport { HUDOcclusionPass as u } from \"../views/3d/webgl-engine/core/shaderLibrary/hud/HUDOcclusionPass.glsl.js\";\nimport { HUDVisibility as p } from \"../views/3d/webgl-engine/core/shaderLibrary/hud/HUDVisibility.glsl.js\";\nimport { OutputHighlight as f } from \"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js\";\nimport { VisualVariables as g } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";\nimport { ColorConversion as m } from \"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js\";\nimport { RgbaFloatEncoding as v } from \"../views/3d/webgl-engine/core/shaderLibrary/util/RgbaFloatEncoding.glsl.js\";\nimport { ScreenSizePerspective as b, addScreenSizePerspective as h, addScreenSizePerspectiveAlignment as w } from \"../views/3d/webgl-engine/core/shaderLibrary/util/ScreenSizePerspective.glsl.js\";\nimport { addPixelRatio as x } from \"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";\nimport { Float2PassUniform as C } from \"../views/3d/webgl-engine/core/shaderModules/Float2PassUniform.js\";\nimport { Float4BindUniform as P } from \"../views/3d/webgl-engine/core/shaderModules/Float4BindUniform.js\";\nimport { Float4DrawUniform as z } from \"../views/3d/webgl-engine/core/shaderModules/Float4DrawUniform.js\";\nimport { Float4PassUniform as j } from \"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";\nimport { FloatBindUniform as S } from \"../views/3d/webgl-engine/core/shaderModules/FloatBindUniform.js\";\nimport { FloatPassUniform as y } from \"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";\nimport { glsl as A, If as O } from \"../views/3d/webgl-engine/core/shaderModules/glsl.js\";\nimport { Texture2DBindUniform as $ } from \"../views/3d/webgl-engine/core/shaderModules/Texture2DBindUniform.js\";\nimport { Texture2DPassUniform as F } from \"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";\nimport { OITPass as D } from \"../views/3d/webgl-engine/lib/OITPass.js\";\nimport { VertexAttribute as T } from \"../views/3d/webgl-engine/lib/VertexAttribute.js\";\nimport { ShaderBuilder as L } from \"../views/webgl/ShaderBuilder.js\";\nimport { alphaCutoff as B } from \"../webscene/support/AlphaCutoff.js\";\nfunction E(o) {\n  const i = new L(),\n    E = o.signedDistanceFieldEnabled;\n  i.include(d, o), i.vertex.include(s, o);\n  const {\n    occlusionPass: H,\n    output: V,\n    oitPass: _\n  } = o;\n  if (H) return i.include(u, o), i;\n  const {\n    vertex: I,\n    fragment: q\n  } = i;\n  i.include(b), i.include(g, o), i.include(n, o), i.include(p), q.include(v), q.include(m), i.varyings.add(\"vcolor\", \"vec4\"), i.varyings.add(\"vtc\", \"vec2\"), i.varyings.add(\"vsize\", \"vec2\");\n  const k = V === a.Highlight,\n    G = k && o.occlusionTestEnabled;\n  G && i.varyings.add(\"voccluded\", \"float\"), I.uniforms.add(new P(\"viewport\", e => e.camera.fullViewport), new C(\"screenOffset\", (o, i) => e(R, 2 * o.screenOffset[0] * i.camera.pixelRatio, 2 * o.screenOffset[1] * i.camera.pixelRatio)), new C(\"anchorPosition\", e => U(e)), new j(\"materialColor\", e => e.color), new y(\"materialRotation\", e => e.rotation)), x(I), E && (I.uniforms.add(new j(\"outlineColor\", e => e.outlineColor)), q.uniforms.add(new j(\"outlineColor\", e => M(e) ? e.outlineColor : r), new y(\"outlineSize\", e => M(e) ? e.outlineSize : 0))), o.horizonCullingEnabled && I.uniforms.add(new z(\"pointDistanceSphere\", (e, o) => {\n    const i = o.camera.eye,\n      r = e.origin;\n    return l(r[0] - i[0], r[1] - i[1], r[2] - i[2], t.radius);\n  })), o.pixelSnappingEnabled && I.include(c), o.hasScreenSizePerspective && (h(I), w(I)), o.debugDrawLabelBorder && i.varyings.add(\"debugBorderCoords\", \"vec4\"), i.attributes.add(T.UV0, \"vec2\"), i.attributes.add(T.COLOR, \"vec4\"), i.attributes.add(T.SIZE, \"vec2\"), i.attributes.add(T.ROTATION, \"float\"), i.attributes.add(T.FEATUREATTRIBUTE, \"vec4\"), I.code.add(o.horizonCullingEnabled ? A`bool behindHorizon(vec3 posModel) {\nvec3 camToEarthCenter = pointDistanceSphere.xyz - localOrigin;\nvec3 camToPos = pointDistanceSphere.xyz + posModel;\nfloat earthRadius = pointDistanceSphere.w;\nfloat a = dot(camToPos, camToPos);\nfloat b = dot(camToPos, camToEarthCenter);\nfloat c = dot(camToEarthCenter, camToEarthCenter) - earthRadius * earthRadius;\nreturn  b > 0.0 && b < a && b * b  > a * c;\n}` : A`bool behindHorizon(vec3 posModel) { return false; }`), I.main.add(A`\n      ProjectHUDAux projectAux;\n      vec4 posProj = projectPositionHUD(projectAux);\n      forwardObjectAndLayerIdColor();\n\n      if (rejectBySlice(projectAux.posModel)) {\n        // Project outside of clip plane\n        gl_Position = vec4(1e038, 1e038, 1e038, 1.0);\n        return;\n      }\n\n      if (behindHorizon(projectAux.posModel)) {\n        // Project outside of clip plane\n        gl_Position = vec4(1e038, 1e038, 1e038, 1.0);\n        return;\n      }\n\n      vec2 inputSize;\n      ${O(o.hasScreenSizePerspective, A`\n          inputSize = screenSizePerspectiveScaleVec2(size, projectAux.absCosAngle, projectAux.distanceToCamera, screenSizePerspective);\n          vec2 screenOffsetScaled = screenSizePerspectiveScaleVec2(screenOffset, projectAux.absCosAngle, projectAux.distanceToCamera, screenSizePerspectiveAlignment);`, A`\n          inputSize = size;\n          vec2 screenOffsetScaled = screenOffset;`)}\n      ${O(o.vvSize, A`inputSize *= vvScale(featureAttribute).xx;`)}\n\n      vec2 combinedSize = inputSize * pixelRatio;\n      vec4 quadOffset = vec4(0.0);\n\n      ${O(o.occlusionTestEnabled, A`\n      bool visible = testHUDVisibility(posProj);\n      if (!visible) {\n        vtc = vec2(0.0);\n        ${O(o.debugDrawLabelBorder, \"debugBorderCoords = vec4(0.5, 0.5, 1.5 / combinedSize);\")}\n        return;\n      }`)}\n      ${O(G, A`voccluded = visible ? 0.0 : 1.0;`)}\n    `);\n  const N = A`\n      vec2 uv01 = floor(uv0);\n      vec2 uv = uv0 - uv01;\n      quadOffset.xy = (uv01 - anchorPosition) * 2.0 * combinedSize;\n\n      ${O(o.hasRotation, A`\n          float angle = radians(materialRotation + rotation);\n          float cosAngle = cos(angle);\n          float sinAngle = sin(angle);\n          mat2 rotate = mat2(cosAngle, -sinAngle, sinAngle,  cosAngle);\n\n          quadOffset.xy = rotate * quadOffset.xy;\n        `)}\n\n      quadOffset.xy = (quadOffset.xy + screenOffsetScaled) / viewport.zw * posProj.w;\n  `,\n    Z = o.pixelSnappingEnabled ? E ? A`posProj = alignToPixelOrigin(posProj, viewport.zw) + quadOffset;` : A`posProj += quadOffset;\nif (inputSize.x == size.x) {\nposProj = alignToPixelOrigin(posProj, viewport.zw);\n}` : A`posProj += quadOffset;`;\n  I.main.add(A`\n    ${N}\n    ${o.vvColor ? \"vcolor = interpolateVVColor(featureAttribute.y) * materialColor;\" : \"vcolor = color / 255.0 * materialColor;\"}\n\n    ${O(V === a.ObjectAndLayerIdColor, A`vcolor.a = 1.0;`)}\n\n    bool alphaDiscard = vcolor.a < ${A.float(B)};\n    ${O(E, `alphaDiscard = alphaDiscard && outlineColor.a < ${A.float(B)};`)}\n    if (alphaDiscard) {\n      // \"early discard\" if both symbol color (= fill) and outline color (if applicable) are transparent\n      gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n      return;\n    } else {\n      ${Z}\n      gl_Position = posProj;\n    }\n\n    vtc = uv;\n\n    ${O(o.debugDrawLabelBorder, A`debugBorderCoords = vec4(uv01, 1.5 / combinedSize);`)}\n    vsize = inputSize;\n  `), q.uniforms.add(new F(\"tex\", e => e.texture)), o.occludedFragmentFade && (q.uniforms.add(new $(\"depthMap\", e => e.mainDepth)), q.uniforms.add(new S(\"occludedOpacity\", e => e.hudOccludedFragmentOpacity)));\n  const J = o.debugDrawLabelBorder ? A`(isBorder > 0.0 ? 0.0 : ${A.float(B)})` : A.float(B),\n    K = A`\n    ${O(o.debugDrawLabelBorder, A`float isBorder = float(any(lessThan(debugBorderCoords.xy, debugBorderCoords.zw)) || any(greaterThan(debugBorderCoords.xy, 1.0 - debugBorderCoords.zw)));`)}\n\n    ${O(o.sampleSignedDistanceFieldTexelCenter, A`\n      float txSize = float(textureSize(tex, 0).x);\n      float texelSize = 1.0 / txSize;\n\n      // Calculate how much we have to add/subtract to/from each texel to reach the size of an onscreen pixel\n      vec2 scaleFactor = (vsize - txSize) * texelSize;\n      vec2 samplePos = vtc + (vec2(1.0, -1.0) * texelSize) * scaleFactor;`, A`vec2 samplePos = vtc;`)}\n\n    ${E ? A`\n      vec4 fillPixelColor = vcolor;\n\n      // Get distance and map it into [-0.5, 0.5]\n      float d = rgbaTofloat(texture(tex, samplePos)) - 0.5;\n\n      // Distance in output units (i.e. pixels)\n      float dist = d * vsize.x;\n\n      // Create smooth transition from the icon into its outline\n      float fillAlphaFactor = clamp(0.5 - dist, 0.0, 1.0);\n      fillPixelColor.a *= fillAlphaFactor;\n\n      if (outlineSize > 0.25) {\n        vec4 outlinePixelColor = outlineColor;\n        float clampedOutlineSize = min(outlineSize, 0.5*vsize.x);\n\n        // Create smooth transition around outline\n        float outlineAlphaFactor = clamp(0.5 - (abs(dist) - 0.5*clampedOutlineSize), 0.0, 1.0);\n        outlinePixelColor.a *= outlineAlphaFactor;\n\n        if (\n          outlineAlphaFactor + fillAlphaFactor < ${J} ||\n          fillPixelColor.a + outlinePixelColor.a < ${A.float(B)}\n        ) {\n          discard;\n        }\n\n        // perform un-premultiplied over operator (see https://en.wikipedia.org/wiki/Alpha_compositing#Description)\n        float compositeAlpha = outlinePixelColor.a + fillPixelColor.a * (1.0 - outlinePixelColor.a);\n        vec3 compositeColor = vec3(outlinePixelColor) * outlinePixelColor.a +\n          vec3(fillPixelColor) * fillPixelColor.a * (1.0 - outlinePixelColor.a);\n\n        ${O(!k, A`fragColor = vec4(compositeColor, compositeAlpha);`)}\n      } else {\n        if (fillAlphaFactor < ${J}) {\n          discard;\n        }\n\n        ${O(!k, A`fragColor = premultiplyAlpha(fillPixelColor);`)}\n      }\n\n      // visualize SDF:\n      // fragColor = vec4(clamp(-dist/vsize.x*2.0, 0.0, 1.0), clamp(dist/vsize.x*2.0, 0.0, 1.0), 0.0, 1.0);\n      ` : A`\n          vec4 texColor = texture(tex, vtc, -0.5);\n          if (texColor.a < ${J}) {\n            discard;\n          }\n          ${O(!k, A`fragColor = texColor * premultiplyAlpha(vcolor);`)}\n          `}\n\n    ${O(o.occludedFragmentFade && !k, A`\n        float zSample = texelFetch(depthMap, ivec2(gl_FragCoord.xy), 0).x;\n        if (zSample < gl_FragCoord.z) {\n          fragColor *= occludedOpacity;\n        }\n        `)}\n\n    ${O(!k && o.debugDrawLabelBorder, A`fragColor = mix(fragColor, vec4(1.0, 0.0, 1.0, 1.0), isBorder * 0.5);`)}\n  `;\n  switch (V) {\n    case a.Color:\n    case a.ColorEmission:\n      i.outputs.add(\"fragColor\", \"vec4\", 0), V === a.ColorEmission && i.outputs.add(\"fragEmission\", \"vec4\", 1), _ === D.ColorAlpha && i.outputs.add(\"fragAlpha\", \"float\", V === a.ColorEmission ? 2 : 1), q.main.add(A`\n        ${K}\n        ${O(_ === D.FrontFace, A`fragColor.rgb /= fragColor.a;`)}\n        ${O(V === a.ColorEmission, A`fragEmission = vec4(0.0);`)}\n        ${O(_ === D.ColorAlpha, A`fragAlpha = fragColor.a;`)}`);\n      break;\n    case a.ObjectAndLayerIdColor:\n      q.main.add(A`\n        ${K}\n        outputObjectAndLayerIdColor();`);\n      break;\n    case a.Highlight:\n      i.include(f, o), q.main.add(A`\n        ${K}\n        outputHighlight(${O(G, A`voccluded == 1.0`, A`false`)});`);\n  }\n  return i;\n}\nfunction M(e) {\n  return e.outlineColor[3] > 0 && e.outlineSize > 0;\n}\nfunction U(e) {\n  return e.textureIsSignedDistanceField ? H(e.anchorPosition, e.distanceFieldBoundingBox, R) : o(R, e.anchorPosition), R;\n}\nfunction H(o, i, r) {\n  e(r, o[0] * (i[2] - i[0]) + i[0], o[1] * (i[3] - i[1]) + i[1]);\n}\nconst R = i(),\n  V = Object.freeze(Object.defineProperty({\n    __proto__: null,\n    build: E,\n    calculateAnchorPosition: U\n  }, Symbol.toStringTag, {\n    value: \"Module\"\n  }));\nexport { V as H, E as b, U as c };","map":{"version":3,"names":["set","e","copy","o","create","i","ZEROS","r","fromValues","l","earth","t","ShaderOutput","a","RejectBySlice","s","ObjectAndLayerIdColor","n","AlignPixel","c","HUD","d","HUDOcclusionPass","u","HUDVisibility","p","OutputHighlight","f","VisualVariables","g","ColorConversion","m","RgbaFloatEncoding","v","ScreenSizePerspective","b","addScreenSizePerspective","h","addScreenSizePerspectiveAlignment","w","addPixelRatio","x","Float2PassUniform","C","Float4BindUniform","P","Float4DrawUniform","z","Float4PassUniform","j","FloatBindUniform","S","FloatPassUniform","y","glsl","A","If","O","Texture2DBindUniform","$","Texture2DPassUniform","F","OITPass","D","VertexAttribute","T","ShaderBuilder","L","alphaCutoff","B","E","signedDistanceFieldEnabled","include","vertex","occlusionPass","H","output","V","oitPass","_","I","fragment","q","varyings","add","k","Highlight","G","occlusionTestEnabled","uniforms","camera","fullViewport","R","screenOffset","pixelRatio","U","color","rotation","outlineColor","M","outlineSize","horizonCullingEnabled","eye","origin","radius","pixelSnappingEnabled","hasScreenSizePerspective","debugDrawLabelBorder","attributes","UV0","COLOR","SIZE","ROTATION","FEATUREATTRIBUTE","code","main","vvSize","N","hasRotation","Z","vvColor","float","texture","occludedFragmentFade","mainDepth","hudOccludedFragmentOpacity","J","K","sampleSignedDistanceFieldTexelCenter","Color","ColorEmission","outputs","ColorAlpha","FrontFace","textureIsSignedDistanceField","anchorPosition","distanceFieldBoundingBox","Object","freeze","defineProperty","__proto__","build","calculateAnchorPosition","Symbol","toStringTag","value"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/node_modules/@arcgis/core/chunks/HUDMaterial.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{set as e,copy as o}from\"../core/libs/gl-matrix-2/math/vec2.js\";import{create as i}from\"../core/libs/gl-matrix-2/factories/vec2f64.js\";import{ZEROS as r,fromValues as l}from\"../core/libs/gl-matrix-2/factories/vec4f64.js\";import{earth as t}from\"../geometry/support/Ellipsoid.js\";import{ShaderOutput as a}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";import{RejectBySlice as s}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{ObjectAndLayerIdColor as n}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/ObjectAndLayerIdColor.glsl.js\";import{AlignPixel as c}from\"../views/3d/webgl-engine/core/shaderLibrary/hud/AlignPixel.glsl.js\";import{HUD as d}from\"../views/3d/webgl-engine/core/shaderLibrary/hud/HUD.glsl.js\";import{HUDOcclusionPass as u}from\"../views/3d/webgl-engine/core/shaderLibrary/hud/HUDOcclusionPass.glsl.js\";import{HUDVisibility as p}from\"../views/3d/webgl-engine/core/shaderLibrary/hud/HUDVisibility.glsl.js\";import{OutputHighlight as f}from\"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js\";import{VisualVariables as g}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";import{ColorConversion as m}from\"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js\";import{RgbaFloatEncoding as v}from\"../views/3d/webgl-engine/core/shaderLibrary/util/RgbaFloatEncoding.glsl.js\";import{ScreenSizePerspective as b,addScreenSizePerspective as h,addScreenSizePerspectiveAlignment as w}from\"../views/3d/webgl-engine/core/shaderLibrary/util/ScreenSizePerspective.glsl.js\";import{addPixelRatio as x}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float2PassUniform as C}from\"../views/3d/webgl-engine/core/shaderModules/Float2PassUniform.js\";import{Float4BindUniform as P}from\"../views/3d/webgl-engine/core/shaderModules/Float4BindUniform.js\";import{Float4DrawUniform as z}from\"../views/3d/webgl-engine/core/shaderModules/Float4DrawUniform.js\";import{Float4PassUniform as j}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatBindUniform as S}from\"../views/3d/webgl-engine/core/shaderModules/FloatBindUniform.js\";import{FloatPassUniform as y}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as A,If as O}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{Texture2DBindUniform as $}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DBindUniform.js\";import{Texture2DPassUniform as F}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{OITPass as D}from\"../views/3d/webgl-engine/lib/OITPass.js\";import{VertexAttribute as T}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";import{ShaderBuilder as L}from\"../views/webgl/ShaderBuilder.js\";import{alphaCutoff as B}from\"../webscene/support/AlphaCutoff.js\";function E(o){const i=new L,E=o.signedDistanceFieldEnabled;i.include(d,o),i.vertex.include(s,o);const{occlusionPass:H,output:V,oitPass:_}=o;if(H)return i.include(u,o),i;const{vertex:I,fragment:q}=i;i.include(b),i.include(g,o),i.include(n,o),i.include(p),q.include(v),q.include(m),i.varyings.add(\"vcolor\",\"vec4\"),i.varyings.add(\"vtc\",\"vec2\"),i.varyings.add(\"vsize\",\"vec2\");const k=V===a.Highlight,G=k&&o.occlusionTestEnabled;G&&i.varyings.add(\"voccluded\",\"float\"),I.uniforms.add(new P(\"viewport\",(e=>e.camera.fullViewport)),new C(\"screenOffset\",((o,i)=>e(R,2*o.screenOffset[0]*i.camera.pixelRatio,2*o.screenOffset[1]*i.camera.pixelRatio))),new C(\"anchorPosition\",(e=>U(e))),new j(\"materialColor\",(e=>e.color)),new y(\"materialRotation\",(e=>e.rotation))),x(I),E&&(I.uniforms.add(new j(\"outlineColor\",(e=>e.outlineColor))),q.uniforms.add(new j(\"outlineColor\",(e=>M(e)?e.outlineColor:r)),new y(\"outlineSize\",(e=>M(e)?e.outlineSize:0)))),o.horizonCullingEnabled&&I.uniforms.add(new z(\"pointDistanceSphere\",((e,o)=>{const i=o.camera.eye,r=e.origin;return l(r[0]-i[0],r[1]-i[1],r[2]-i[2],t.radius)}))),o.pixelSnappingEnabled&&I.include(c),o.hasScreenSizePerspective&&(h(I),w(I)),o.debugDrawLabelBorder&&i.varyings.add(\"debugBorderCoords\",\"vec4\"),i.attributes.add(T.UV0,\"vec2\"),i.attributes.add(T.COLOR,\"vec4\"),i.attributes.add(T.SIZE,\"vec2\"),i.attributes.add(T.ROTATION,\"float\"),i.attributes.add(T.FEATUREATTRIBUTE,\"vec4\"),I.code.add(o.horizonCullingEnabled?A`bool behindHorizon(vec3 posModel) {\nvec3 camToEarthCenter = pointDistanceSphere.xyz - localOrigin;\nvec3 camToPos = pointDistanceSphere.xyz + posModel;\nfloat earthRadius = pointDistanceSphere.w;\nfloat a = dot(camToPos, camToPos);\nfloat b = dot(camToPos, camToEarthCenter);\nfloat c = dot(camToEarthCenter, camToEarthCenter) - earthRadius * earthRadius;\nreturn  b > 0.0 && b < a && b * b  > a * c;\n}`:A`bool behindHorizon(vec3 posModel) { return false; }`),I.main.add(A`\n      ProjectHUDAux projectAux;\n      vec4 posProj = projectPositionHUD(projectAux);\n      forwardObjectAndLayerIdColor();\n\n      if (rejectBySlice(projectAux.posModel)) {\n        // Project outside of clip plane\n        gl_Position = vec4(1e038, 1e038, 1e038, 1.0);\n        return;\n      }\n\n      if (behindHorizon(projectAux.posModel)) {\n        // Project outside of clip plane\n        gl_Position = vec4(1e038, 1e038, 1e038, 1.0);\n        return;\n      }\n\n      vec2 inputSize;\n      ${O(o.hasScreenSizePerspective,A`\n          inputSize = screenSizePerspectiveScaleVec2(size, projectAux.absCosAngle, projectAux.distanceToCamera, screenSizePerspective);\n          vec2 screenOffsetScaled = screenSizePerspectiveScaleVec2(screenOffset, projectAux.absCosAngle, projectAux.distanceToCamera, screenSizePerspectiveAlignment);`,A`\n          inputSize = size;\n          vec2 screenOffsetScaled = screenOffset;`)}\n      ${O(o.vvSize,A`inputSize *= vvScale(featureAttribute).xx;`)}\n\n      vec2 combinedSize = inputSize * pixelRatio;\n      vec4 quadOffset = vec4(0.0);\n\n      ${O(o.occlusionTestEnabled,A`\n      bool visible = testHUDVisibility(posProj);\n      if (!visible) {\n        vtc = vec2(0.0);\n        ${O(o.debugDrawLabelBorder,\"debugBorderCoords = vec4(0.5, 0.5, 1.5 / combinedSize);\")}\n        return;\n      }`)}\n      ${O(G,A`voccluded = visible ? 0.0 : 1.0;`)}\n    `);const N=A`\n      vec2 uv01 = floor(uv0);\n      vec2 uv = uv0 - uv01;\n      quadOffset.xy = (uv01 - anchorPosition) * 2.0 * combinedSize;\n\n      ${O(o.hasRotation,A`\n          float angle = radians(materialRotation + rotation);\n          float cosAngle = cos(angle);\n          float sinAngle = sin(angle);\n          mat2 rotate = mat2(cosAngle, -sinAngle, sinAngle,  cosAngle);\n\n          quadOffset.xy = rotate * quadOffset.xy;\n        `)}\n\n      quadOffset.xy = (quadOffset.xy + screenOffsetScaled) / viewport.zw * posProj.w;\n  `,Z=o.pixelSnappingEnabled?E?A`posProj = alignToPixelOrigin(posProj, viewport.zw) + quadOffset;`:A`posProj += quadOffset;\nif (inputSize.x == size.x) {\nposProj = alignToPixelOrigin(posProj, viewport.zw);\n}`:A`posProj += quadOffset;`;I.main.add(A`\n    ${N}\n    ${o.vvColor?\"vcolor = interpolateVVColor(featureAttribute.y) * materialColor;\":\"vcolor = color / 255.0 * materialColor;\"}\n\n    ${O(V===a.ObjectAndLayerIdColor,A`vcolor.a = 1.0;`)}\n\n    bool alphaDiscard = vcolor.a < ${A.float(B)};\n    ${O(E,`alphaDiscard = alphaDiscard && outlineColor.a < ${A.float(B)};`)}\n    if (alphaDiscard) {\n      // \"early discard\" if both symbol color (= fill) and outline color (if applicable) are transparent\n      gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n      return;\n    } else {\n      ${Z}\n      gl_Position = posProj;\n    }\n\n    vtc = uv;\n\n    ${O(o.debugDrawLabelBorder,A`debugBorderCoords = vec4(uv01, 1.5 / combinedSize);`)}\n    vsize = inputSize;\n  `),q.uniforms.add(new F(\"tex\",(e=>e.texture))),o.occludedFragmentFade&&(q.uniforms.add(new $(\"depthMap\",(e=>e.mainDepth))),q.uniforms.add(new S(\"occludedOpacity\",(e=>e.hudOccludedFragmentOpacity))));const J=o.debugDrawLabelBorder?A`(isBorder > 0.0 ? 0.0 : ${A.float(B)})`:A.float(B),K=A`\n    ${O(o.debugDrawLabelBorder,A`float isBorder = float(any(lessThan(debugBorderCoords.xy, debugBorderCoords.zw)) || any(greaterThan(debugBorderCoords.xy, 1.0 - debugBorderCoords.zw)));`)}\n\n    ${O(o.sampleSignedDistanceFieldTexelCenter,A`\n      float txSize = float(textureSize(tex, 0).x);\n      float texelSize = 1.0 / txSize;\n\n      // Calculate how much we have to add/subtract to/from each texel to reach the size of an onscreen pixel\n      vec2 scaleFactor = (vsize - txSize) * texelSize;\n      vec2 samplePos = vtc + (vec2(1.0, -1.0) * texelSize) * scaleFactor;`,A`vec2 samplePos = vtc;`)}\n\n    ${E?A`\n      vec4 fillPixelColor = vcolor;\n\n      // Get distance and map it into [-0.5, 0.5]\n      float d = rgbaTofloat(texture(tex, samplePos)) - 0.5;\n\n      // Distance in output units (i.e. pixels)\n      float dist = d * vsize.x;\n\n      // Create smooth transition from the icon into its outline\n      float fillAlphaFactor = clamp(0.5 - dist, 0.0, 1.0);\n      fillPixelColor.a *= fillAlphaFactor;\n\n      if (outlineSize > 0.25) {\n        vec4 outlinePixelColor = outlineColor;\n        float clampedOutlineSize = min(outlineSize, 0.5*vsize.x);\n\n        // Create smooth transition around outline\n        float outlineAlphaFactor = clamp(0.5 - (abs(dist) - 0.5*clampedOutlineSize), 0.0, 1.0);\n        outlinePixelColor.a *= outlineAlphaFactor;\n\n        if (\n          outlineAlphaFactor + fillAlphaFactor < ${J} ||\n          fillPixelColor.a + outlinePixelColor.a < ${A.float(B)}\n        ) {\n          discard;\n        }\n\n        // perform un-premultiplied over operator (see https://en.wikipedia.org/wiki/Alpha_compositing#Description)\n        float compositeAlpha = outlinePixelColor.a + fillPixelColor.a * (1.0 - outlinePixelColor.a);\n        vec3 compositeColor = vec3(outlinePixelColor) * outlinePixelColor.a +\n          vec3(fillPixelColor) * fillPixelColor.a * (1.0 - outlinePixelColor.a);\n\n        ${O(!k,A`fragColor = vec4(compositeColor, compositeAlpha);`)}\n      } else {\n        if (fillAlphaFactor < ${J}) {\n          discard;\n        }\n\n        ${O(!k,A`fragColor = premultiplyAlpha(fillPixelColor);`)}\n      }\n\n      // visualize SDF:\n      // fragColor = vec4(clamp(-dist/vsize.x*2.0, 0.0, 1.0), clamp(dist/vsize.x*2.0, 0.0, 1.0), 0.0, 1.0);\n      `:A`\n          vec4 texColor = texture(tex, vtc, -0.5);\n          if (texColor.a < ${J}) {\n            discard;\n          }\n          ${O(!k,A`fragColor = texColor * premultiplyAlpha(vcolor);`)}\n          `}\n\n    ${O(o.occludedFragmentFade&&!k,A`\n        float zSample = texelFetch(depthMap, ivec2(gl_FragCoord.xy), 0).x;\n        if (zSample < gl_FragCoord.z) {\n          fragColor *= occludedOpacity;\n        }\n        `)}\n\n    ${O(!k&&o.debugDrawLabelBorder,A`fragColor = mix(fragColor, vec4(1.0, 0.0, 1.0, 1.0), isBorder * 0.5);`)}\n  `;switch(V){case a.Color:case a.ColorEmission:i.outputs.add(\"fragColor\",\"vec4\",0),V===a.ColorEmission&&i.outputs.add(\"fragEmission\",\"vec4\",1),_===D.ColorAlpha&&i.outputs.add(\"fragAlpha\",\"float\",V===a.ColorEmission?2:1),q.main.add(A`\n        ${K}\n        ${O(_===D.FrontFace,A`fragColor.rgb /= fragColor.a;`)}\n        ${O(V===a.ColorEmission,A`fragEmission = vec4(0.0);`)}\n        ${O(_===D.ColorAlpha,A`fragAlpha = fragColor.a;`)}`);break;case a.ObjectAndLayerIdColor:q.main.add(A`\n        ${K}\n        outputObjectAndLayerIdColor();`);break;case a.Highlight:i.include(f,o),q.main.add(A`\n        ${K}\n        outputHighlight(${O(G,A`voccluded == 1.0`,A`false`)});`)}return i}function M(e){return e.outlineColor[3]>0&&e.outlineSize>0}function U(e){return e.textureIsSignedDistanceField?H(e.anchorPosition,e.distanceFieldBoundingBox,R):o(R,e.anchorPosition),R}function H(o,i,r){e(r,o[0]*(i[2]-i[0])+i[0],o[1]*(i[3]-i[1])+i[1])}const R=i(),V=Object.freeze(Object.defineProperty({__proto__:null,build:E,calculateAnchorPosition:U},Symbol.toStringTag,{value:\"Module\"}));export{V as H,E as b,U as c};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}