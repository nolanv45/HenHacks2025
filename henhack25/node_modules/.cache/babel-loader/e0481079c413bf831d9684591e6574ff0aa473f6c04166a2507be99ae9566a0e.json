{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport { _ as e } from \"../../../chunks/tslib.es6.js\";\nimport t from \"../../../request.js\";\nimport i from \"../../../core/Error.js\";\nimport o from \"../../../core/JSONSupport.js\";\nimport r from \"../../../core/Logger.js\";\nimport { onAbort as n } from \"../../../core/promiseUtils.js\";\nimport { QueueProcessor as s } from \"../../../core/QueueProcessor.js\";\nimport { property as l } from \"../../../core/accessorSupport/decorators/property.js\";\nimport { ensureClass as a } from \"../../../core/accessorSupport/ensureType.js\";\nimport \"../../../core/has.js\";\nimport \"../../../core/RandomLCG.js\";\nimport { subclass as c } from \"../../../core/accessorSupport/decorators/subclass.js\";\nimport f from \"../../../geometry/Extent.js\";\nimport m from \"../../../geometry/Point.js\";\nimport u from \"../../../geometry/SpatialReference.js\";\nimport { sanitizeUrl as h } from \"../arcgisLayerUrl.js\";\nimport { url as p } from \"../commonProperties.js\";\nimport d from \"../DimensionalDefinition.js\";\nimport x from \"../LOD.js\";\nimport y from \"../RasterStorageInfo.js\";\nimport g from \"../TileInfo.js\";\nimport { isMultiSliceOrRangeDefinition as I, getSliceIndex as R, createSlices as w, getSliceIds as S } from \"./multidimensionalUtils.js\";\nimport { getRasterId as k, getBlock as T, putBlock as v, deleteBlock as b, decreaseRefCount as P } from \"./RawBlockCache.js\";\nimport { convertNoDataToMask as B } from \"../rasterFormats/pixelRangeUtils.js\";\nimport { decode as _ } from \"../rasterFormats/RasterCodec.js\";\nimport { mosaic as M, approximateTransform as C, getLocalArithmeticNorthRotations as W } from \"../rasterFunctions/pixelUtils.js\";\nimport { getWorldWidth as j, load as z, projectPoint as H, snapPyramid as L, shiftExtent as E, getWorldWrapCount as D, projectExtent as F, getProjectionOffsetGrid as O, getRasterDatasetAlignmentInfo as A, projectResolution as G } from \"../rasterFunctions/rasterProjectionHelper.js\";\nimport { convertToLocalDirections as q, uvComponentToVector as J } from \"../rasterFunctions/vectorFieldUtils.js\";\nconst N = 8,\n  V = 256;\nlet U = 0,\n  $ = class extends o {\n    constructor() {\n      super(...arguments), this._tileFetchQueue = new s({\n        concurrency: 32,\n        process: (e, t) => this._fetchRawTile(e.pyramidLevel, e.row, e.col, {\n          ...e.options,\n          signal: t\n        })\n      }), this.datasetName = null, this.datasetFormat = null, this.hasUniqueSourceStorageInfo = !0, this.rasterInfo = null, this.ioConfig = {\n        sampling: \"closest\"\n      };\n    }\n    normalizeCtorArgs(e) {\n      return e?.ioConfig && (e = {\n        ...e,\n        ioConfig: {\n          resolution: null,\n          bandIds: null,\n          sampling: \"closest\",\n          tileInfo: g.create(),\n          ...e.ioConfig\n        }\n      }), e;\n    }\n    get _isGlobalWrappableSource() {\n      const {\n          rasterInfo: e\n        } = this,\n        t = j(e.spatialReference);\n      return null != t && e.extent.width >= t / 2;\n    }\n    get _hasNoneOrGCSShiftTransform() {\n      const {\n        transform: e\n      } = this.rasterInfo;\n      return null == e || \"gcs-shift\" === e.type;\n    }\n    set rasterJobHandler(e) {\n      this._set(\"rasterJobHandler\", e), \"Function\" === this.datasetFormat && this.primaryRasters?.rasters?.forEach(t => t.rasterJobHandler = e);\n    }\n    get rasterId() {\n      return this.url || \"rasterId-\" + U++;\n    }\n    set url(e) {\n      this._set(\"url\", h(e, r.getLogger(this)));\n    }\n    async open(e) {\n      return this._openPromise ??= z().then(() => this._open(e)), this._openPromise;\n    }\n    async fetchTile(e, t, i) {\n      let o = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      const r = o.tileInfo || this.rasterInfo.storageInfo.tileInfo,\n        n = this.getTileExtentFromTileInfo(e, t, i, r);\n      return o = {\n        noClip: !0,\n        ...o\n      }, this.fetchPixels(n, r.size[0], r.size[1], o);\n    }\n    async identify(e) {\n      let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      e = a(m, e).clone().normalize();\n      const {\n          multidimensionalDefinition: i,\n          timeExtent: o\n        } = t,\n        {\n          rasterInfo: r\n        } = this,\n        {\n          hasMultidimensionalTranspose: n,\n          multidimensionalInfo: s\n        } = r;\n      let {\n        transposedVariableName: l\n      } = t;\n      const c = null != s && n && (null != o || I(i));\n      if (c && !l) {\n        l = null != i && i.length > 0 ? i[0].variableName ?? void 0 : s.variables[0].name, t = {\n          ...t,\n          transposedVariableName: l\n        };\n      }\n      t = this._getRequestOptionsWithSliceId(t);\n      const {\n          spatialReference: u,\n          extent: h\n        } = r,\n        {\n          datumTransformation: p\n        } = t;\n      let d = H(e, u, p);\n      if (!h.intersects(d)) return {\n        location: d,\n        value: null\n      };\n      if (null != r.transform) {\n        const e = r.transform.inverseTransform(d);\n        if (!r.nativeExtent.intersects(e)) return {\n          location: e,\n          value: null\n        };\n        d = e;\n      }\n      let x = 0;\n      const y = null != l && null != s && r.hasMultidimensionalTranspose;\n      if (\"Function\" === this.datasetFormat) {\n        const e = this.primaryRasters.rasters[0];\n        if (y) return e.identify(d, t);\n        const {\n            pixelSize: o\n          } = r,\n          n = 3,\n          s = o.x * n / 2,\n          l = o.y * n / 2,\n          a = new f({\n            xmin: d.x - s,\n            xmax: d.x + s,\n            ymin: d.y - l,\n            ymax: d.y + l,\n            spatialReference: u\n          }),\n          c = {\n            interpolation: \"nearest\",\n            multidimensionalDefinition: i,\n            sliceId: t.sliceId\n          },\n          {\n            pixelBlock: m\n          } = await e.fetchPixels(a, n, n, c),\n          {\n            pixelBlock: h\n          } = await this.fetchPixels(a, n, n, c);\n        if (null == m) return {\n          location: d,\n          value: null\n        };\n        const p = Math.floor(n * n * .5),\n          x = !m.mask || m.mask[p] ? m.pixels.map(e => e[p]) : null;\n        let g;\n        return null != h && (g = !h.mask || h.mask[p] ? h.pixels.map(e => e[p]) : void 0), {\n          location: d,\n          value: x,\n          processedValue: g,\n          pyramidLevel: 0\n        };\n      }\n      if (!y) if (t.srcResolution) {\n        x = L(t.srcResolution, r, this.ioConfig.sampling).pyramidLevel;\n      } else if (x = await this.computeBestPyramidLevelForLocation(e, t), null == x) return {\n        location: d,\n        value: null\n      };\n      const g = this.identifyPixelLocation(d, x, null, y);\n      if (null === g) return {\n        location: d,\n        value: null\n      };\n      const {\n          row: R,\n          col: w,\n          rowOffset: S,\n          colOffset: b,\n          blockWidth: P\n        } = g,\n        B = l ?? t.sliceId,\n        _ = k(this.rasterId, B),\n        M = `${x}/${R}/${w}`;\n      let C = T(_, null, M);\n      null == C && (C = this.fetchRawTile(x, R, w, t), v(_, null, M, C));\n      const W = await C;\n      if (!W?.pixels?.length) return {\n        location: d,\n        value: null\n      };\n      const j = S * P + b;\n      return this._processIdentifyResult(W, {\n        srcLocation: d,\n        position: j,\n        pyramidLevel: x,\n        useTransposedTile: !!y,\n        requestSomeSlices: c,\n        identifyOptions: t\n      });\n    }\n    async fetchPixels(e, t, i) {\n      let o = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      e = E(e), o = this._getRequestOptionsWithSliceId(o);\n      const {\n        _hasNoneOrGCSShiftTransform: r\n      } = this;\n      if (o.requestRawData && r) return this._fetchPixels(e, t, i, o);\n      const n = j(e.spatialReference),\n        s = D(e);\n      if (null == n || 0 === s || 1 === s && this._isGlobalWrappableSource && r) return this._fetchPixels(e, t, i, o);\n      if (s >= 3) return {\n        extent: e,\n        pixelBlock: null\n      };\n      const l = [],\n        {\n          xmin: a,\n          xmax: c\n        } = e,\n        m = Math.round(n / (c - a) * t),\n        u = m - Math.round((n / 2 - a) / (c - a) * t);\n      let h = 0;\n      const p = [];\n      for (let g = 0; g <= s; g++) {\n        const r = new f({\n            xmin: 0 === g ? a : -n / 2,\n            xmax: g === s ? c - n * g : n / 2,\n            ymin: e.ymin,\n            ymax: e.ymax,\n            spatialReference: e.spatialReference\n          }),\n          d = 0 === g ? m - u : g === s ? t - h : m;\n        h += d, p.push(d);\n        const x = o.disableWrapAround && g > 0 ? null : this._fetchPixels(r, d, i, o);\n        l.push(x);\n      }\n      const d = (await Promise.all(l)).map(e => e?.pixelBlock);\n      let x = null;\n      const y = {\n        width: t,\n        height: i\n      };\n      if (this.rasterJobHandler) {\n        x = (await this.rasterJobHandler.mosaicAndTransform({\n          srcPixelBlocks: d,\n          srcMosaicSize: y,\n          destDimension: null,\n          coefs: null,\n          sampleSpacing: null,\n          interpolation: \"nearest\",\n          alignmentInfo: null,\n          blockWidths: p\n        }, o)).pixelBlock;\n      } else x = M(d, y, {\n        blockWidths: p\n      });\n      return {\n        extent: e,\n        srcExtent: F(e, this.rasterInfo.spatialReference, o.datumTransformation),\n        pixelBlock: x\n      };\n    }\n    async fetchRawPixels(e, t, i) {\n      let o = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      t = {\n        x: Math.floor(t.x),\n        y: Math.floor(t.y)\n      };\n      const r = await this._fetchRawTiles(e, t, i, o),\n        {\n          nativeExtent: n,\n          nativePixelSize: s,\n          storageInfo: l\n        } = this.rasterInfo,\n        a = 2 ** e,\n        c = s.x * a,\n        m = s.y * a,\n        u = new f({\n          xmin: n.xmin + c * t.x,\n          xmax: n.xmin + c * (t.x + i.width - 1),\n          ymin: n.ymax - m * (t.y + i.height - 1),\n          ymax: n.ymax - m * t.y,\n          spatialReference: n.spatialReference\n        });\n      if (!r) return {\n        extent: u,\n        srcExtent: u,\n        pixelBlock: null\n      };\n      const {\n        pixelBlocks: h,\n        mosaicSize: p\n      } = r;\n      if (1 === h.length && null != h[0] && h[0].width === i.width && h[0].height === i.height) return {\n        extent: u,\n        srcExtent: u,\n        pixelBlock: r.pixelBlocks[0]\n      };\n      const d = e > 0 ? l.pyramidBlockWidth : l.blockWidth,\n        x = e > 0 ? l.pyramidBlockHeight : l.blockHeight,\n        y = {\n          x: t.x % d,\n          y: t.y % x\n        };\n      let g;\n      if (this.rasterJobHandler) {\n        g = (await this.rasterJobHandler.mosaicAndTransform({\n          srcPixelBlocks: h,\n          srcMosaicSize: p,\n          destDimension: i,\n          clipOffset: y,\n          clipSize: i,\n          coefs: null,\n          sampleSpacing: null,\n          interpolation: o.interpolation,\n          alignmentInfo: null,\n          blockWidths: null\n        }, o)).pixelBlock;\n      } else g = M(h, p, {\n        clipOffset: y,\n        clipSize: i\n      });\n      return {\n        extent: u,\n        srcExtent: u,\n        pixelBlock: g\n      };\n    }\n    fetchRawTile(e, t, o, r) {\n      throw new i(\"BaseRaster:read-not-implemented\", \"fetchRawTile() is not implemented\");\n    }\n    computeExtent(e) {\n      return F(this.rasterInfo.extent, e);\n    }\n    decodePixelBlock(e, t) {\n      return !this.rasterJobHandler || t.useCanvas ? _(e, t) : this.rasterJobHandler.decode({\n        data: e,\n        options: t\n      });\n    }\n    async request(e, i) {\n      let o = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      const {\n          customFetchParameters: r\n        } = this.ioConfig,\n        {\n          range: n,\n          query: s,\n          headers: l\n        } = i;\n      o = o ?? i.retryCount ?? this.ioConfig.retryCount;\n      const a = n ? {\n        Range: `bytes=${n.from}-${n.to}`\n      } : null;\n      try {\n        return await t(e, {\n          ...i,\n          query: {\n            ...s,\n            ...r\n          },\n          headers: {\n            ...l,\n            ...a\n          }\n        });\n      } catch (c) {\n        if (o > 0) return o--, this.request(e, i, o);\n        throw c;\n      }\n    }\n    getSliceIndex(e) {\n      const {\n        multidimensionalInfo: t\n      } = this.rasterInfo;\n      return null == t || null == e || 0 === e.length ? null : R(e, t);\n    }\n    getTileExtentFromTileInfo(e, t, i, o) {\n      const r = o.lodAt(e);\n      return this.getTileExtent({\n        x: r.resolution,\n        y: r.resolution\n      }, t, i, o.origin, o.spatialReference, o.size);\n    }\n    updateTileInfo() {\n      const {\n          storageInfo: e,\n          spatialReference: t,\n          extent: i,\n          pixelSize: o\n        } = this.rasterInfo,\n        {\n          pyramidResolutions: r\n        } = e;\n      if (!e.tileInfo) {\n        const n = [],\n          s = e.maximumPyramidLevel || 0;\n        let l = (o.x + o.y) / 2,\n          a = 1 / .0254 * 96 * l;\n        for (let e = 0; e <= s && (n.unshift(new x({\n          level: s - e,\n          resolution: l,\n          scale: a\n        })), e !== s); e++) if (r) {\n          const t = (r[e].x + r[e].y) / 2;\n          a *= t / l, l = t;\n        } else l *= 2, a *= 2;\n        const c = new m({\n          x: i.xmin,\n          y: i.ymax,\n          spatialReference: t\n        });\n        e.tileInfo = new g({\n          origin: c,\n          size: [e.blockWidth, e.blockHeight],\n          spatialReference: t,\n          lods: n\n        }), e.isVirtualTileInfo = !0;\n      }\n    }\n    createRemoteDatasetStorageInfo(e) {\n      let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 512;\n      let i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 512;\n      let o = arguments.length > 3 ? arguments[3] : undefined;\n      const {\n          width: r,\n          height: n,\n          nativeExtent: s,\n          pixelSize: l,\n          spatialReference: a\n        } = e,\n        c = new m({\n          x: s.xmin,\n          y: s.ymax,\n          spatialReference: a\n        });\n      null == o && (o = Math.max(0, Math.round(Math.log(Math.max(r, n)) / Math.LN2 - 8)));\n      const f = this.computeBlockBoundary(s, 512, 512, {\n        x: s.xmin,\n        y: s.ymax\n      }, [l], o);\n      e.storageInfo = new y({\n        blockWidth: t,\n        blockHeight: i,\n        pyramidBlockWidth: t,\n        pyramidBlockHeight: i,\n        origin: c,\n        firstPyramidLevel: 1,\n        maximumPyramidLevel: o,\n        blockBoundary: f\n      });\n    }\n    async computeBestPyramidLevelForLocation(e) {\n      let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return 0;\n    }\n    computeBlockBoundary(e, t, i, o, r) {\n      let n = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n      let s = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 2;\n      if (1 === r.length && n > 0) {\n        r = [...r];\n        let {\n          x: e,\n          y: t\n        } = r[0];\n        for (let i = 0; i < n; i++) e *= s, t *= s, r.push({\n          x: e,\n          y: t\n        });\n      }\n      const l = [],\n        {\n          x: a,\n          y: c\n        } = o;\n      for (let f = 0; f < r.length; f++) {\n        const {\n          x: o,\n          y: n\n        } = r[f];\n        l.push({\n          minCol: Math.floor((e.xmin - a + .1 * o) / t / o),\n          maxCol: Math.floor((e.xmax - a - .1 * o) / t / o),\n          minRow: Math.floor((c - e.ymax + .1 * n) / i / n),\n          maxRow: Math.floor((c - e.ymin - .1 * n) / i / n)\n        });\n      }\n      return l;\n    }\n    getPyramidPixelSize(e) {\n      const {\n          nativePixelSize: t\n        } = this.rasterInfo,\n        {\n          pyramidResolutions: i,\n          pyramidScalingFactor: o\n        } = this.rasterInfo.storageInfo;\n      if (0 === e) return t;\n      if (null != i && i.length) return i[e - 1];\n      const r = o ** e;\n      return {\n        x: t.x * r,\n        y: t.y * r\n      };\n    }\n    identifyPixelLocation(e, t, i, o) {\n      const {\n          spatialReference: r,\n          nativeExtent: n,\n          storageInfo: s\n        } = this.rasterInfo,\n        {\n          maximumPyramidLevel: l,\n          origin: a,\n          transposeInfo: c\n        } = s,\n        f = o && null != c ? c.tileSize[0] : s.blockWidth,\n        m = o && null != c ? c.tileSize[1] : s.blockHeight,\n        u = H(e, r, i);\n      if (!n.intersects(u)) return null;\n      if (t < 0 || t > l) return null;\n      const h = this.getPyramidPixelSize(t),\n        {\n          x: p,\n          y: d\n        } = h,\n        x = (a.y - u.y) / d / m,\n        y = (u.x - a.x) / p / f,\n        g = Math.min(m - 1, Math.floor((x - Math.floor(x)) * m)),\n        I = Math.min(f - 1, Math.floor((y - Math.floor(y)) * f));\n      return {\n        pyramidLevel: t,\n        row: Math.floor(x),\n        col: Math.floor(y),\n        rowOffset: g,\n        colOffset: I,\n        blockWidth: f,\n        srcLocation: u\n      };\n    }\n    getTileExtent(e, t, i, o, r, n) {\n      const [s, l] = n,\n        a = o.x + i * s * e.x,\n        c = a + s * e.x,\n        m = o.y - t * l * e.y,\n        u = m - l * e.y;\n      return new f({\n        xmin: a,\n        xmax: c,\n        ymin: u,\n        ymax: m,\n        spatialReference: r\n      });\n    }\n    getBlockWidthHeight(e) {\n      return {\n        blockWidth: e > 0 ? this.rasterInfo.storageInfo.pyramidBlockWidth : this.rasterInfo.storageInfo.blockWidth,\n        blockHeight: e > 0 ? this.rasterInfo.storageInfo.pyramidBlockHeight : this.rasterInfo.storageInfo.blockHeight\n      };\n    }\n    isBlockOutside(e, t, i) {\n      const o = this.rasterInfo.storageInfo.blockBoundary[e];\n      return !o || o.maxRow < t || o.maxCol < i || o.minRow > t || o.minCol > i;\n    }\n    updateImageSpaceRasterInfo(e) {\n      const {\n          pixelSize: t\n        } = e,\n        {\n          width: i,\n          height: o\n        } = e,\n        r = u.WebMercator;\n      e.spatialReference = r, e.extent = e.nativeExtent = new f({\n        xmin: -.5,\n        ymax: .5,\n        xmax: i - .5,\n        ymin: .5 - o,\n        spatialReference: r\n      }), e.isPseudoSpatialReference = !0, e.transform = null, e.pixelSize = new m({\n        x: 1,\n        y: 1,\n        spatialReference: r\n      });\n      const {\n        extent: n,\n        storageInfo: s\n      } = e;\n      if (s) {\n        s.origin = new m({\n          x: n.xmin,\n          y: n.ymax,\n          spatialReference: r\n        });\n        const {\n          pyramidResolutions: i,\n          tileInfo: o\n        } = s;\n        if (i && i.forEach(e => {\n          e.x /= t.x, e.y /= t.y;\n        }), o) {\n          o.origin = s.origin;\n          const t = (e.nativePixelSize.x + e.nativePixelSize.y) / 2;\n          o.lods.forEach((e, i) => {\n            e.resolution = t * 2 ** i, e.scale = 96 * e.resolution / .0254;\n          });\n        }\n      }\n    }\n    async _fetchPixels(e, t, i) {\n      let o = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      let r = D(e);\n      if (r >= 2) return {\n        extent: e,\n        pixelBlock: null\n      };\n      const n = this._getSourceDataInfo(e, t, i, o),\n        {\n          pyramidLevel: s,\n          srcResolution: l,\n          srcExtent: a,\n          srcWidth: c,\n          srcHeight: f,\n          ul: u\n        } = n;\n      if (0 === c || 0 === f) return {\n        extent: e,\n        srcExtent: a,\n        pixelBlock: null\n      };\n      const {\n          rasterInfo: h\n        } = this,\n        p = h.transform,\n        d = \"gcs-shift\" === p?.type,\n        x = null != j(e.spatialReference);\n      !d && x || (r = D(n.srcExtent, d));\n      const y = await this._fetchRawTiles(s, u, {\n        width: c,\n        height: f,\n        wrapCount: r\n      }, o);\n      if (!y) return {\n        extent: e,\n        srcExtent: a,\n        pixelBlock: null\n      };\n      const g = h.storageInfo,\n        I = s > 0 ? g.pyramidBlockWidth : g.blockWidth,\n        R = s > 0 ? g.pyramidBlockHeight : g.blockHeight;\n      let {\n        x: w,\n        y: S\n      } = h.pixelSize;\n      if (s > 0) {\n        const {\n          pyramidResolutions: e,\n          pyramidScalingFactor: t\n        } = g;\n        if (null != e && e[s - 1]) ({\n          x: w,\n          y: S\n        } = e[s - 1]);else {\n          const e = t ** s;\n          w *= e, S *= e;\n        }\n      }\n      const k = h.spatialReference,\n        T = new m({\n          x: w,\n          y: S,\n          spatialReference: k\n        }),\n        v = I === c && R === f && u.x % I == 0 && u.y % R == 0,\n        b = new m({\n          x: (e.xmax - e.xmin) / t,\n          y: (e.ymax - e.ymin) / i,\n          spatialReference: e.spatialReference\n        }),\n        P = !e.spatialReference.equals(k),\n        B = k.isGeographic ? 1e-9 : 1e-4,\n        {\n          datumTransformation: _\n        } = o;\n      if (!P && v && 1 === y.pixelBlocks.length && I === t && R === i && Q(l, b, B)) return {\n        extent: e,\n        srcExtent: a,\n        srcTilePixelSize: T,\n        pixelBlock: y.pixelBlocks[0]\n      };\n      const H = x && null != j(a.spatialReference) && this._hasNoneOrGCSShiftTransform,\n        L = o.requestProjectedLocalDirections && this.rasterInfo.dataType.startsWith(\"vector\");\n      L && !this.rasterJobHandler && (await z());\n      const E = this.rasterJobHandler ? await this.rasterJobHandler.getProjectionOffsetGrid({\n        projectedExtent: e,\n        srcBufferExtent: y.extent,\n        pixelSize: b.toJSON(),\n        datumTransformation: _,\n        rasterTransform: p,\n        hasWrapAround: r > 0 || H,\n        isAdaptive: !1 !== this.ioConfig.optimizeProjectionAccuracy,\n        includeGCSGrid: L\n      }, o) : O({\n        projectedExtent: e,\n        srcBufferExtent: y.extent,\n        pixelSize: b,\n        datumTransformation: _,\n        rasterTransform: p,\n        hasWrapAround: r > 0 || H,\n        isAdaptive: !1,\n        includeGCSGrid: L\n      });\n      let F;\n      const A = !o.requestRawData,\n        G = {\n          rows: E.spacing[0],\n          cols: E.spacing[1]\n        },\n        J = this._hasNoneOrGCSShiftTransform ? this._getRasterTileAlignmentInfo(s, y.extent.xmin) : void 0,\n        {\n          pixelBlocks: N,\n          mosaicSize: V,\n          isPartiallyFilled: U\n        } = y;\n      let $ = null;\n      if (this.rasterJobHandler) {\n        const e = await this.rasterJobHandler.mosaicAndTransform({\n          srcPixelBlocks: N,\n          srcMosaicSize: V,\n          destDimension: A ? {\n            width: t,\n            height: i\n          } : null,\n          coefs: A ? E.coefficients : null,\n          sampleSpacing: A ? G : null,\n          projectDirections: L,\n          gcsGrid: L ? E.gcsGrid : null,\n          isUV: \"vector-uv\" === this.rasterInfo.dataType,\n          interpolation: o.interpolation,\n          alignmentInfo: J,\n          blockWidths: null\n        }, o);\n        ({\n          pixelBlock: F,\n          localNorthDirections: $\n        } = e);\n      } else {\n        const e = M(N, V, {\n          alignmentInfo: J\n        });\n        F = A ? C(e, {\n          width: t,\n          height: i\n        }, E.coefficients, G, o.interpolation) : e, L && E.gcsGrid && ($ = W({\n          width: t,\n          height: i\n        }, E.gcsGrid), F = q(F, this.rasterInfo.dataType, $));\n      }\n      return o.requestRawData || L ? {\n        extent: e,\n        srcExtent: a,\n        srcTilePixelSize: T,\n        pixelBlock: F,\n        transformGrid: E,\n        localNorthDirections: $,\n        isPartiallyFilled: U\n      } : {\n        extent: e,\n        srcExtent: a,\n        srcTilePixelSize: T,\n        pixelBlock: F\n      };\n    }\n    async _fetchRawTiles(e, t, i, o) {\n      const {\n          origin: r,\n          blockBoundary: n\n        } = this.rasterInfo.storageInfo,\n        {\n          blockWidth: s,\n          blockHeight: l\n        } = this.getBlockWidthHeight(e);\n      let {\n          x: a,\n          y: c\n        } = t,\n        {\n          width: m,\n          height: u,\n          wrapCount: h\n        } = i;\n      const p = this._getRasterTileAlignmentInfo(e, 0);\n      o.buffer && (a -= o.buffer.cols, c -= o.buffer.rows, m += 2 * o.buffer.cols, u += 2 * o.buffer.rows);\n      let d = 0,\n        x = 0,\n        y = 0;\n      if (h && null != p) {\n        ({\n          worldColumnCountFromOrigin: x,\n          originColumnOffset: y,\n          rightPadding: d\n        } = p);\n        x * p.blockWidth - d >= a + m && (d = 0);\n      }\n      const g = Math.floor(a / s),\n        I = Math.floor(c / l),\n        R = Math.floor((a + m + d - 1) / s),\n        w = Math.floor((c + u + d - 1) / l),\n        S = n[e];\n      if (!S) return null;\n      const {\n        minRow: k,\n        minCol: T,\n        maxCol: v,\n        maxRow: b\n      } = S;\n      if (0 === h && (w < k || R < T || I > b || g > v)) return null;\n      const P = new Array();\n      let B = !1;\n      const _ = null == this.ioConfig.allowPartialFill ? o.allowPartialFill : this.ioConfig.allowPartialFill;\n      for (let f = I; f <= w; f++) for (let t = g; t <= R; t++) {\n        let i = t;\n        if (!o.disableWrapAround && h && null != p && x <= t && (i = t - x - y), f >= k && i >= T && b >= f && v >= i) {\n          const t = this._tileFetchQueue.push({\n            pyramidLevel: e,\n            row: f,\n            col: i,\n            options: o\n          }, {\n            signal: o.signal\n          });\n          _ ? P.push(new Promise(e => {\n            t.then(t => e(t)).catch(() => {\n              B = !0, e(null);\n            });\n          })) : P.push(t);\n        } else P.push(Promise.resolve(null));\n      }\n      if (0 === P.length) return null;\n      const M = await Promise.all(P),\n        C = {\n          height: (w - I + 1) * l,\n          width: (R - g + 1) * s\n        },\n        {\n          spatialReference: W\n        } = this.rasterInfo,\n        j = this.getPyramidPixelSize(e),\n        {\n          x: z,\n          y: H\n        } = j;\n      return {\n        extent: new f({\n          xmin: r.x + g * s * z,\n          xmax: r.x + (R + 1) * s * z,\n          ymin: r.y - (w + 1) * l * H,\n          ymax: r.y - I * l * H,\n          spatialReference: W\n        }),\n        pixelBlocks: M,\n        mosaicSize: C,\n        isPartiallyFilled: B\n      };\n    }\n    _fetchRawTile(e, t, i, o) {\n      const r = this.rasterInfo.storageInfo.blockBoundary[e];\n      if (!r) return Promise.resolve(null);\n      const {\n        minRow: s,\n        minCol: l,\n        maxCol: a,\n        maxRow: c\n      } = r;\n      if (t < s || i < l || t > c || i > a) return Promise.resolve(null);\n      const f = k(this.rasterId, o.sliceId),\n        m = `${e}/${t}/${i}`;\n      let u = T(f, o.registryId, m);\n      if (null == u) {\n        const r = new AbortController();\n        u = this.fetchRawTile(e, t, i, {\n          ...o,\n          signal: r.signal\n        }), v(f, o.registryId, m, u, r), u.catch(() => b(f, o.registryId, m));\n      }\n      return o.signal && n(o, () => {\n        P(f, o.registryId, m);\n      }), u;\n    }\n    _computeMagDirValues(e) {\n      const {\n        bandCount: t,\n        dataType: i\n      } = this.rasterInfo;\n      if (!(2 === t && \"vector-magdir\" === i || \"vector-uv\" === i) || 2 !== e?.length || !e[0]?.length) return null;\n      const o = e[0].length;\n      if (\"vector-magdir\" === i) {\n        const t = e[1].map(e => (e + 360) % 360);\n        return [e[0], t];\n      }\n      const [r, n] = e,\n        s = [],\n        l = [];\n      for (let a = 0; a < o; a++) {\n        const [e, t] = J([r[a], n[a]]);\n        s.push(e), l.push(t);\n      }\n      return [s, l];\n    }\n    _getRasterTileAlignmentInfo(e, t) {\n      return null == this._rasterTileAlignmentInfo && (this._rasterTileAlignmentInfo = A(this.rasterInfo)), null == this._rasterTileAlignmentInfo.pyramidsInfo ? null : {\n        startX: t,\n        halfWorldWidth: this._rasterTileAlignmentInfo.halfWorldWidth,\n        hasGCSSShiftTransform: this._rasterTileAlignmentInfo.hasGCSSShiftTransform,\n        ...this._rasterTileAlignmentInfo.pyramidsInfo[e]\n      };\n    }\n    _getSourceDataInfo(e, t, i) {\n      let o = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      const r = {\n        datumTransformation: o.datumTransformation,\n        pyramidLevel: 0,\n        pyramidResolution: null,\n        srcExtent: null,\n        srcHeight: 0,\n        srcResolution: null,\n        srcWidth: 0,\n        ul: {\n          x: 0,\n          y: 0\n        }\n      };\n      o.srcResolution && (r.srcResolution = o.srcResolution, this._updateSourceDataInfo(e, r));\n      const n = this.rasterInfo.storageInfo.maximumPyramidLevel || 0,\n        {\n          srcWidth: s,\n          srcHeight: l,\n          pyramidLevel: a\n        } = r,\n        c = s / t,\n        f = l / i,\n        u = a < n && c * f >= 16,\n        h = a === n && this._requireTooManySrcTiles(s, l, t, i);\n      if (u || h || 0 === s || 0 === l) {\n        const s = new m({\n          x: (e.xmax - e.xmin) / t,\n          y: (e.ymax - e.ymin) / i,\n          spatialReference: e.spatialReference\n        });\n        let l = G(s, this.rasterInfo.spatialReference, e, r.datumTransformation);\n        const h = !l || o.srcResolution && l.x + l.y < o.srcResolution.x + o.srcResolution.y;\n        if (u && o.srcResolution && h) {\n          const e = Math.round(Math.log(Math.max(c, f)) / Math.LN2) - 1;\n          if (n - a + 3 >= e) {\n            const t = 2 ** e;\n            l = {\n              x: o.srcResolution.x * t,\n              y: o.srcResolution.y * t\n            };\n          }\n        }\n        l && (r.srcResolution = l, this._updateSourceDataInfo(e, r));\n      }\n      return this._requireTooManySrcTiles(r.srcWidth, r.srcHeight, t, i) && (r.srcWidth = 0, r.srcHeight = 0), r;\n    }\n    _requireTooManySrcTiles(e, t, i, o) {\n      const {\n          tileInfo: r\n        } = this.rasterInfo.storageInfo,\n        n = Math.ceil(e / r.size[0]) * Math.ceil(t / r.size[1]),\n        s = e / i,\n        l = t / o,\n        a = Math.max(1, (i + o) / 1024);\n      return n >= V * a || s > N || l > N;\n    }\n    _updateSourceDataInfo(e, t) {\n      t.srcWidth = 0, t.srcHeight = 0;\n      const {\n          rasterInfo: i\n        } = this,\n        o = i.spatialReference,\n        {\n          srcResolution: r,\n          datumTransformation: n\n        } = t,\n        {\n          pyramidLevel: s,\n          pyramidResolution: l,\n          excessiveReading: a\n        } = L(r, i, this.ioConfig.sampling);\n      if (a) return;\n      let c = t.srcExtent || F(e, o, n);\n      if (null == c) return;\n      const f = i.transform;\n      f && (c = f.inverseTransform(c)), t.srcExtent = c;\n      const {\n          x: m,\n          y: u\n        } = i.storageInfo.origin,\n        h = Math.floor((c.xmin - m) / l.x + .1),\n        p = Math.floor((u - c.ymax) / l.y + .1),\n        d = Math.floor((c.xmax - m) / l.x - .1),\n        x = Math.floor((u - c.ymin) / l.y - .1),\n        y = c.width < .1 * l.x ? 0 : d - h + 1,\n        g = c.height < .1 * l.y ? 0 : x - p + 1;\n      t.pyramidLevel = s, t.pyramidResolution = l, t.srcWidth = y, t.srcHeight = g, t.ul = {\n        x: h,\n        y: p\n      };\n    }\n    _getRequestOptionsWithSliceId(e) {\n      return null != this.rasterInfo.multidimensionalInfo && null == e.sliceId && (e = {\n        ...e,\n        sliceId: this.getSliceIndex(e.multidimensionalDefinition)\n      }), e;\n    }\n    _processIdentifyResult(e, t) {\n      const {\n          srcLocation: i,\n          position: o,\n          pyramidLevel: r,\n          useTransposedTile: n\n        } = t,\n        s = e.pixels[0].length / e.width / e.height;\n      if (!(!e.mask || e.mask[o])) return {\n        location: i,\n        value: null\n      };\n      const {\n        multidimensionalInfo: l\n      } = this.rasterInfo;\n      if (null == l || !n) {\n        const t = e.pixels.map(e => e[o]),\n          n = {\n            location: i,\n            value: t,\n            pyramidLevel: r\n          },\n          s = this._computeMagDirValues(t.map(e => [e]));\n        return s?.length && (n.magdirValue = s.map(e => e[0])), n;\n      }\n      let a = e.pixels.map(e => e.slice(o * s, o * s + s)),\n        c = this._computeMagDirValues(a);\n      const {\n        requestSomeSlices: f,\n        identifyOptions: m\n      } = t;\n      let u = w(l, m.transposedVariableName);\n      if (f) {\n        const e = S(u, m.multidimensionalDefinition, m.timeExtent);\n        a = a.map(t => e.map(e => t[e])), c = c?.map(t => e.map(e => t[e])), u = e.map(e => u[e]);\n      }\n      const h = e.noDataValues || this.rasterInfo.noDataValue,\n        p = {\n          pixels: a,\n          pixelType: e.pixelType\n        };\n      let x;\n      null != h && (B(p, h), x = p.mask);\n      return {\n        location: i,\n        value: null,\n        dataSeries: u.map((e, t) => {\n          const i = {\n            value: 0 === x?.[t] ? null : a.map(e => e[t]),\n            multidimensionalDefinition: e.multidimensionalDefinition.map(e => new d({\n              ...e,\n              isSlice: !0\n            }))\n          };\n          return c?.length && (i.magdirValue = [c[0][t], c[1][t]]), i;\n        }),\n        pyramidLevel: r\n      };\n    }\n  };\nfunction Q(e, t, i) {\n  return Math.abs(e.x - t.x) < i && Math.abs(e.y - t.y) < i;\n}\ne([l()], $.prototype, \"_rasterTileAlignmentInfo\", void 0), e([l()], $.prototype, \"_tileFetchQueue\", void 0), e([l({\n  readOnly: !0\n})], $.prototype, \"_isGlobalWrappableSource\", null), e([l({\n  readOnly: !0\n})], $.prototype, \"_hasNoneOrGCSShiftTransform\", null), e([l()], $.prototype, \"_openPromise\", void 0), e([l()], $.prototype, \"rasterJobHandler\", null), e([l({\n  readOnly: !0\n})], $.prototype, \"rasterId\", null), e([l(p)], $.prototype, \"url\", null), e([l({\n  type: String,\n  json: {\n    write: !0\n  }\n})], $.prototype, \"datasetName\", void 0), e([l({\n  type: String,\n  json: {\n    write: !0\n  }\n})], $.prototype, \"datasetFormat\", void 0), e([l()], $.prototype, \"hasUniqueSourceStorageInfo\", void 0), e([l()], $.prototype, \"rasterInfo\", void 0), e([l()], $.prototype, \"ioConfig\", void 0), e([l()], $.prototype, \"sourceJSON\", void 0), $ = e([c(\"esri.layers.support.rasterDatasets.BaseRaster\")], $);\nconst X = $;\nexport { X as default };","map":{"version":3,"names":["_","e","t","i","o","r","onAbort","n","QueueProcessor","s","property","l","ensureClass","a","subclass","c","f","m","u","sanitizeUrl","h","url","p","d","x","y","g","isMultiSliceOrRangeDefinition","I","getSliceIndex","R","createSlices","w","getSliceIds","S","getRasterId","k","getBlock","T","putBlock","v","deleteBlock","b","decreaseRefCount","P","convertNoDataToMask","B","decode","mosaic","M","approximateTransform","C","getLocalArithmeticNorthRotations","W","getWorldWidth","j","load","z","projectPoint","H","snapPyramid","L","shiftExtent","E","getWorldWrapCount","D","projectExtent","F","getProjectionOffsetGrid","O","getRasterDatasetAlignmentInfo","A","projectResolution","G","convertToLocalDirections","q","uvComponentToVector","J","N","V","U","$","constructor","arguments","_tileFetchQueue","concurrency","process","_fetchRawTile","pyramidLevel","row","col","options","signal","datasetName","datasetFormat","hasUniqueSourceStorageInfo","rasterInfo","ioConfig","sampling","normalizeCtorArgs","resolution","bandIds","tileInfo","create","_isGlobalWrappableSource","spatialReference","extent","width","_hasNoneOrGCSShiftTransform","transform","type","rasterJobHandler","_set","primaryRasters","rasters","forEach","rasterId","getLogger","open","_openPromise","then","_open","fetchTile","length","undefined","storageInfo","getTileExtentFromTileInfo","noClip","fetchPixels","size","identify","clone","normalize","multidimensionalDefinition","timeExtent","hasMultidimensionalTranspose","multidimensionalInfo","transposedVariableName","variableName","variables","name","_getRequestOptionsWithSliceId","datumTransformation","intersects","location","value","inverseTransform","nativeExtent","pixelSize","xmin","xmax","ymin","ymax","interpolation","sliceId","pixelBlock","Math","floor","mask","pixels","map","processedValue","srcResolution","computeBestPyramidLevelForLocation","identifyPixelLocation","rowOffset","colOffset","blockWidth","fetchRawTile","_processIdentifyResult","srcLocation","position","useTransposedTile","requestSomeSlices","identifyOptions","requestRawData","_fetchPixels","round","push","disableWrapAround","Promise","all","height","mosaicAndTransform","srcPixelBlocks","srcMosaicSize","destDimension","coefs","sampleSpacing","alignmentInfo","blockWidths","srcExtent","fetchRawPixels","_fetchRawTiles","nativePixelSize","pixelBlocks","mosaicSize","pyramidBlockWidth","pyramidBlockHeight","blockHeight","clipOffset","clipSize","computeExtent","decodePixelBlock","useCanvas","data","request","customFetchParameters","range","query","headers","retryCount","Range","from","to","lodAt","getTileExtent","origin","updateTileInfo","pyramidResolutions","maximumPyramidLevel","unshift","level","scale","lods","isVirtualTileInfo","createRemoteDatasetStorageInfo","max","log","LN2","computeBlockBoundary","firstPyramidLevel","blockBoundary","minCol","maxCol","minRow","maxRow","getPyramidPixelSize","pyramidScalingFactor","transposeInfo","tileSize","min","getBlockWidthHeight","isBlockOutside","updateImageSpaceRasterInfo","WebMercator","isPseudoSpatialReference","_getSourceDataInfo","srcWidth","srcHeight","ul","wrapCount","equals","isGeographic","Q","srcTilePixelSize","requestProjectedLocalDirections","dataType","startsWith","projectedExtent","srcBufferExtent","toJSON","rasterTransform","hasWrapAround","isAdaptive","optimizeProjectionAccuracy","includeGCSGrid","rows","spacing","cols","_getRasterTileAlignmentInfo","isPartiallyFilled","coefficients","projectDirections","gcsGrid","isUV","localNorthDirections","transformGrid","buffer","worldColumnCountFromOrigin","originColumnOffset","rightPadding","Array","allowPartialFill","catch","resolve","registryId","AbortController","_computeMagDirValues","bandCount","_rasterTileAlignmentInfo","pyramidsInfo","startX","halfWorldWidth","hasGCSSShiftTransform","pyramidResolution","_updateSourceDataInfo","_requireTooManySrcTiles","ceil","excessiveReading","magdirValue","slice","noDataValues","noDataValue","pixelType","dataSeries","isSlice","abs","prototype","readOnly","String","json","write","X","default"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/node_modules/@arcgis/core/layers/support/rasterDatasets/BaseRaster.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{_ as e}from\"../../../chunks/tslib.es6.js\";import t from\"../../../request.js\";import i from\"../../../core/Error.js\";import o from\"../../../core/JSONSupport.js\";import r from\"../../../core/Logger.js\";import{onAbort as n}from\"../../../core/promiseUtils.js\";import{QueueProcessor as s}from\"../../../core/QueueProcessor.js\";import{property as l}from\"../../../core/accessorSupport/decorators/property.js\";import{ensureClass as a}from\"../../../core/accessorSupport/ensureType.js\";import\"../../../core/has.js\";import\"../../../core/RandomLCG.js\";import{subclass as c}from\"../../../core/accessorSupport/decorators/subclass.js\";import f from\"../../../geometry/Extent.js\";import m from\"../../../geometry/Point.js\";import u from\"../../../geometry/SpatialReference.js\";import{sanitizeUrl as h}from\"../arcgisLayerUrl.js\";import{url as p}from\"../commonProperties.js\";import d from\"../DimensionalDefinition.js\";import x from\"../LOD.js\";import y from\"../RasterStorageInfo.js\";import g from\"../TileInfo.js\";import{isMultiSliceOrRangeDefinition as I,getSliceIndex as R,createSlices as w,getSliceIds as S}from\"./multidimensionalUtils.js\";import{getRasterId as k,getBlock as T,putBlock as v,deleteBlock as b,decreaseRefCount as P}from\"./RawBlockCache.js\";import{convertNoDataToMask as B}from\"../rasterFormats/pixelRangeUtils.js\";import{decode as _}from\"../rasterFormats/RasterCodec.js\";import{mosaic as M,approximateTransform as C,getLocalArithmeticNorthRotations as W}from\"../rasterFunctions/pixelUtils.js\";import{getWorldWidth as j,load as z,projectPoint as H,snapPyramid as L,shiftExtent as E,getWorldWrapCount as D,projectExtent as F,getProjectionOffsetGrid as O,getRasterDatasetAlignmentInfo as A,projectResolution as G}from\"../rasterFunctions/rasterProjectionHelper.js\";import{convertToLocalDirections as q,uvComponentToVector as J}from\"../rasterFunctions/vectorFieldUtils.js\";const N=8,V=256;let U=0,$=class extends o{constructor(){super(...arguments),this._tileFetchQueue=new s({concurrency:32,process:(e,t)=>this._fetchRawTile(e.pyramidLevel,e.row,e.col,{...e.options,signal:t})}),this.datasetName=null,this.datasetFormat=null,this.hasUniqueSourceStorageInfo=!0,this.rasterInfo=null,this.ioConfig={sampling:\"closest\"}}normalizeCtorArgs(e){return e?.ioConfig&&(e={...e,ioConfig:{resolution:null,bandIds:null,sampling:\"closest\",tileInfo:g.create(),...e.ioConfig}}),e}get _isGlobalWrappableSource(){const{rasterInfo:e}=this,t=j(e.spatialReference);return null!=t&&e.extent.width>=t/2}get _hasNoneOrGCSShiftTransform(){const{transform:e}=this.rasterInfo;return null==e||\"gcs-shift\"===e.type}set rasterJobHandler(e){this._set(\"rasterJobHandler\",e),\"Function\"===this.datasetFormat&&this.primaryRasters?.rasters?.forEach((t=>t.rasterJobHandler=e))}get rasterId(){return this.url||\"rasterId-\"+U++}set url(e){this._set(\"url\",h(e,r.getLogger(this)))}async open(e){return this._openPromise??=z().then((()=>this._open(e))),this._openPromise}async fetchTile(e,t,i,o={}){const r=o.tileInfo||this.rasterInfo.storageInfo.tileInfo,n=this.getTileExtentFromTileInfo(e,t,i,r);return o={noClip:!0,...o},this.fetchPixels(n,r.size[0],r.size[1],o)}async identify(e,t={}){e=a(m,e).clone().normalize();const{multidimensionalDefinition:i,timeExtent:o}=t,{rasterInfo:r}=this,{hasMultidimensionalTranspose:n,multidimensionalInfo:s}=r;let{transposedVariableName:l}=t;const c=null!=s&&n&&(null!=o||I(i));if(c&&!l){l=null!=i&&i.length>0?i[0].variableName??void 0:s.variables[0].name,t={...t,transposedVariableName:l}}t=this._getRequestOptionsWithSliceId(t);const{spatialReference:u,extent:h}=r,{datumTransformation:p}=t;let d=H(e,u,p);if(!h.intersects(d))return{location:d,value:null};if(null!=r.transform){const e=r.transform.inverseTransform(d);if(!r.nativeExtent.intersects(e))return{location:e,value:null};d=e}let x=0;const y=null!=l&&null!=s&&r.hasMultidimensionalTranspose;if(\"Function\"===this.datasetFormat){const e=this.primaryRasters.rasters[0];if(y)return e.identify(d,t);const{pixelSize:o}=r,n=3,s=o.x*n/2,l=o.y*n/2,a=new f({xmin:d.x-s,xmax:d.x+s,ymin:d.y-l,ymax:d.y+l,spatialReference:u}),c={interpolation:\"nearest\",multidimensionalDefinition:i,sliceId:t.sliceId},{pixelBlock:m}=await e.fetchPixels(a,n,n,c),{pixelBlock:h}=await this.fetchPixels(a,n,n,c);if(null==m)return{location:d,value:null};const p=Math.floor(n*n*.5),x=!m.mask||m.mask[p]?m.pixels.map((e=>e[p])):null;let g;return null!=h&&(g=!h.mask||h.mask[p]?h.pixels.map((e=>e[p])):void 0),{location:d,value:x,processedValue:g,pyramidLevel:0}}if(!y)if(t.srcResolution){x=L(t.srcResolution,r,this.ioConfig.sampling).pyramidLevel}else if(x=await this.computeBestPyramidLevelForLocation(e,t),null==x)return{location:d,value:null};const g=this.identifyPixelLocation(d,x,null,y);if(null===g)return{location:d,value:null};const{row:R,col:w,rowOffset:S,colOffset:b,blockWidth:P}=g,B=l??t.sliceId,_=k(this.rasterId,B),M=`${x}/${R}/${w}`;let C=T(_,null,M);null==C&&(C=this.fetchRawTile(x,R,w,t),v(_,null,M,C));const W=await C;if(!W?.pixels?.length)return{location:d,value:null};const j=S*P+b;return this._processIdentifyResult(W,{srcLocation:d,position:j,pyramidLevel:x,useTransposedTile:!!y,requestSomeSlices:c,identifyOptions:t})}async fetchPixels(e,t,i,o={}){e=E(e),o=this._getRequestOptionsWithSliceId(o);const{_hasNoneOrGCSShiftTransform:r}=this;if(o.requestRawData&&r)return this._fetchPixels(e,t,i,o);const n=j(e.spatialReference),s=D(e);if(null==n||0===s||1===s&&this._isGlobalWrappableSource&&r)return this._fetchPixels(e,t,i,o);if(s>=3)return{extent:e,pixelBlock:null};const l=[],{xmin:a,xmax:c}=e,m=Math.round(n/(c-a)*t),u=m-Math.round((n/2-a)/(c-a)*t);let h=0;const p=[];for(let g=0;g<=s;g++){const r=new f({xmin:0===g?a:-n/2,xmax:g===s?c-n*g:n/2,ymin:e.ymin,ymax:e.ymax,spatialReference:e.spatialReference}),d=0===g?m-u:g===s?t-h:m;h+=d,p.push(d);const x=o.disableWrapAround&&g>0?null:this._fetchPixels(r,d,i,o);l.push(x)}const d=(await Promise.all(l)).map((e=>e?.pixelBlock));let x=null;const y={width:t,height:i};if(this.rasterJobHandler){x=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:d,srcMosaicSize:y,destDimension:null,coefs:null,sampleSpacing:null,interpolation:\"nearest\",alignmentInfo:null,blockWidths:p},o)).pixelBlock}else x=M(d,y,{blockWidths:p});return{extent:e,srcExtent:F(e,this.rasterInfo.spatialReference,o.datumTransformation),pixelBlock:x}}async fetchRawPixels(e,t,i,o={}){t={x:Math.floor(t.x),y:Math.floor(t.y)};const r=await this._fetchRawTiles(e,t,i,o),{nativeExtent:n,nativePixelSize:s,storageInfo:l}=this.rasterInfo,a=2**e,c=s.x*a,m=s.y*a,u=new f({xmin:n.xmin+c*t.x,xmax:n.xmin+c*(t.x+i.width-1),ymin:n.ymax-m*(t.y+i.height-1),ymax:n.ymax-m*t.y,spatialReference:n.spatialReference});if(!r)return{extent:u,srcExtent:u,pixelBlock:null};const{pixelBlocks:h,mosaicSize:p}=r;if(1===h.length&&null!=h[0]&&h[0].width===i.width&&h[0].height===i.height)return{extent:u,srcExtent:u,pixelBlock:r.pixelBlocks[0]};const d=e>0?l.pyramidBlockWidth:l.blockWidth,x=e>0?l.pyramidBlockHeight:l.blockHeight,y={x:t.x%d,y:t.y%x};let g;if(this.rasterJobHandler){g=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:h,srcMosaicSize:p,destDimension:i,clipOffset:y,clipSize:i,coefs:null,sampleSpacing:null,interpolation:o.interpolation,alignmentInfo:null,blockWidths:null},o)).pixelBlock}else g=M(h,p,{clipOffset:y,clipSize:i});return{extent:u,srcExtent:u,pixelBlock:g}}fetchRawTile(e,t,o,r){throw new i(\"BaseRaster:read-not-implemented\",\"fetchRawTile() is not implemented\")}computeExtent(e){return F(this.rasterInfo.extent,e)}decodePixelBlock(e,t){return!this.rasterJobHandler||t.useCanvas?_(e,t):this.rasterJobHandler.decode({data:e,options:t})}async request(e,i,o=0){const{customFetchParameters:r}=this.ioConfig,{range:n,query:s,headers:l}=i;o=o??i.retryCount??this.ioConfig.retryCount;const a=n?{Range:`bytes=${n.from}-${n.to}`}:null;try{return await t(e,{...i,query:{...s,...r},headers:{...l,...a}})}catch(c){if(o>0)return o--,this.request(e,i,o);throw c}}getSliceIndex(e){const{multidimensionalInfo:t}=this.rasterInfo;return null==t||null==e||0===e.length?null:R(e,t)}getTileExtentFromTileInfo(e,t,i,o){const r=o.lodAt(e);return this.getTileExtent({x:r.resolution,y:r.resolution},t,i,o.origin,o.spatialReference,o.size)}updateTileInfo(){const{storageInfo:e,spatialReference:t,extent:i,pixelSize:o}=this.rasterInfo,{pyramidResolutions:r}=e;if(!e.tileInfo){const n=[],s=e.maximumPyramidLevel||0;let l=(o.x+o.y)/2,a=1/.0254*96*l;for(let e=0;e<=s&&(n.unshift(new x({level:s-e,resolution:l,scale:a})),e!==s);e++)if(r){const t=(r[e].x+r[e].y)/2;a*=t/l,l=t}else l*=2,a*=2;const c=new m({x:i.xmin,y:i.ymax,spatialReference:t});e.tileInfo=new g({origin:c,size:[e.blockWidth,e.blockHeight],spatialReference:t,lods:n}),e.isVirtualTileInfo=!0}}createRemoteDatasetStorageInfo(e,t=512,i=512,o){const{width:r,height:n,nativeExtent:s,pixelSize:l,spatialReference:a}=e,c=new m({x:s.xmin,y:s.ymax,spatialReference:a});null==o&&(o=Math.max(0,Math.round(Math.log(Math.max(r,n))/Math.LN2-8)));const f=this.computeBlockBoundary(s,512,512,{x:s.xmin,y:s.ymax},[l],o);e.storageInfo=new y({blockWidth:t,blockHeight:i,pyramidBlockWidth:t,pyramidBlockHeight:i,origin:c,firstPyramidLevel:1,maximumPyramidLevel:o,blockBoundary:f})}async computeBestPyramidLevelForLocation(e,t={}){return 0}computeBlockBoundary(e,t,i,o,r,n=0,s=2){if(1===r.length&&n>0){r=[...r];let{x:e,y:t}=r[0];for(let i=0;i<n;i++)e*=s,t*=s,r.push({x:e,y:t})}const l=[],{x:a,y:c}=o;for(let f=0;f<r.length;f++){const{x:o,y:n}=r[f];l.push({minCol:Math.floor((e.xmin-a+.1*o)/t/o),maxCol:Math.floor((e.xmax-a-.1*o)/t/o),minRow:Math.floor((c-e.ymax+.1*n)/i/n),maxRow:Math.floor((c-e.ymin-.1*n)/i/n)})}return l}getPyramidPixelSize(e){const{nativePixelSize:t}=this.rasterInfo,{pyramidResolutions:i,pyramidScalingFactor:o}=this.rasterInfo.storageInfo;if(0===e)return t;if(null!=i&&i.length)return i[e-1];const r=o**e;return{x:t.x*r,y:t.y*r}}identifyPixelLocation(e,t,i,o){const{spatialReference:r,nativeExtent:n,storageInfo:s}=this.rasterInfo,{maximumPyramidLevel:l,origin:a,transposeInfo:c}=s,f=o&&null!=c?c.tileSize[0]:s.blockWidth,m=o&&null!=c?c.tileSize[1]:s.blockHeight,u=H(e,r,i);if(!n.intersects(u))return null;if(t<0||t>l)return null;const h=this.getPyramidPixelSize(t),{x:p,y:d}=h,x=(a.y-u.y)/d/m,y=(u.x-a.x)/p/f,g=Math.min(m-1,Math.floor((x-Math.floor(x))*m)),I=Math.min(f-1,Math.floor((y-Math.floor(y))*f));return{pyramidLevel:t,row:Math.floor(x),col:Math.floor(y),rowOffset:g,colOffset:I,blockWidth:f,srcLocation:u}}getTileExtent(e,t,i,o,r,n){const[s,l]=n,a=o.x+i*s*e.x,c=a+s*e.x,m=o.y-t*l*e.y,u=m-l*e.y;return new f({xmin:a,xmax:c,ymin:u,ymax:m,spatialReference:r})}getBlockWidthHeight(e){return{blockWidth:e>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:e>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(e,t,i){const o=this.rasterInfo.storageInfo.blockBoundary[e];return!o||o.maxRow<t||o.maxCol<i||o.minRow>t||o.minCol>i}updateImageSpaceRasterInfo(e){const{pixelSize:t}=e,{width:i,height:o}=e,r=u.WebMercator;e.spatialReference=r,e.extent=e.nativeExtent=new f({xmin:-.5,ymax:.5,xmax:i-.5,ymin:.5-o,spatialReference:r}),e.isPseudoSpatialReference=!0,e.transform=null,e.pixelSize=new m({x:1,y:1,spatialReference:r});const{extent:n,storageInfo:s}=e;if(s){s.origin=new m({x:n.xmin,y:n.ymax,spatialReference:r});const{pyramidResolutions:i,tileInfo:o}=s;if(i&&i.forEach((e=>{e.x/=t.x,e.y/=t.y})),o){o.origin=s.origin;const t=(e.nativePixelSize.x+e.nativePixelSize.y)/2;o.lods.forEach(((e,i)=>{e.resolution=t*2**i,e.scale=96*e.resolution/.0254}))}}}async _fetchPixels(e,t,i,o={}){let r=D(e);if(r>=2)return{extent:e,pixelBlock:null};const n=this._getSourceDataInfo(e,t,i,o),{pyramidLevel:s,srcResolution:l,srcExtent:a,srcWidth:c,srcHeight:f,ul:u}=n;if(0===c||0===f)return{extent:e,srcExtent:a,pixelBlock:null};const{rasterInfo:h}=this,p=h.transform,d=\"gcs-shift\"===p?.type,x=null!=j(e.spatialReference);!d&&x||(r=D(n.srcExtent,d));const y=await this._fetchRawTiles(s,u,{width:c,height:f,wrapCount:r},o);if(!y)return{extent:e,srcExtent:a,pixelBlock:null};const g=h.storageInfo,I=s>0?g.pyramidBlockWidth:g.blockWidth,R=s>0?g.pyramidBlockHeight:g.blockHeight;let{x:w,y:S}=h.pixelSize;if(s>0){const{pyramidResolutions:e,pyramidScalingFactor:t}=g;if(null!=e&&e[s-1])({x:w,y:S}=e[s-1]);else{const e=t**s;w*=e,S*=e}}const k=h.spatialReference,T=new m({x:w,y:S,spatialReference:k}),v=I===c&&R===f&&u.x%I==0&&u.y%R==0,b=new m({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/i,spatialReference:e.spatialReference}),P=!e.spatialReference.equals(k),B=k.isGeographic?1e-9:1e-4,{datumTransformation:_}=o;if(!P&&v&&1===y.pixelBlocks.length&&I===t&&R===i&&Q(l,b,B))return{extent:e,srcExtent:a,srcTilePixelSize:T,pixelBlock:y.pixelBlocks[0]};const H=x&&null!=j(a.spatialReference)&&this._hasNoneOrGCSShiftTransform,L=o.requestProjectedLocalDirections&&this.rasterInfo.dataType.startsWith(\"vector\");L&&!this.rasterJobHandler&&await z();const E=this.rasterJobHandler?await this.rasterJobHandler.getProjectionOffsetGrid({projectedExtent:e,srcBufferExtent:y.extent,pixelSize:b.toJSON(),datumTransformation:_,rasterTransform:p,hasWrapAround:r>0||H,isAdaptive:!1!==this.ioConfig.optimizeProjectionAccuracy,includeGCSGrid:L},o):O({projectedExtent:e,srcBufferExtent:y.extent,pixelSize:b,datumTransformation:_,rasterTransform:p,hasWrapAround:r>0||H,isAdaptive:!1,includeGCSGrid:L});let F;const A=!o.requestRawData,G={rows:E.spacing[0],cols:E.spacing[1]},J=this._hasNoneOrGCSShiftTransform?this._getRasterTileAlignmentInfo(s,y.extent.xmin):void 0,{pixelBlocks:N,mosaicSize:V,isPartiallyFilled:U}=y;let $=null;if(this.rasterJobHandler){const e=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:N,srcMosaicSize:V,destDimension:A?{width:t,height:i}:null,coefs:A?E.coefficients:null,sampleSpacing:A?G:null,projectDirections:L,gcsGrid:L?E.gcsGrid:null,isUV:\"vector-uv\"===this.rasterInfo.dataType,interpolation:o.interpolation,alignmentInfo:J,blockWidths:null},o);({pixelBlock:F,localNorthDirections:$}=e)}else{const e=M(N,V,{alignmentInfo:J});F=A?C(e,{width:t,height:i},E.coefficients,G,o.interpolation):e,L&&E.gcsGrid&&($=W({width:t,height:i},E.gcsGrid),F=q(F,this.rasterInfo.dataType,$))}return o.requestRawData||L?{extent:e,srcExtent:a,srcTilePixelSize:T,pixelBlock:F,transformGrid:E,localNorthDirections:$,isPartiallyFilled:U}:{extent:e,srcExtent:a,srcTilePixelSize:T,pixelBlock:F}}async _fetchRawTiles(e,t,i,o){const{origin:r,blockBoundary:n}=this.rasterInfo.storageInfo,{blockWidth:s,blockHeight:l}=this.getBlockWidthHeight(e);let{x:a,y:c}=t,{width:m,height:u,wrapCount:h}=i;const p=this._getRasterTileAlignmentInfo(e,0);o.buffer&&(a-=o.buffer.cols,c-=o.buffer.rows,m+=2*o.buffer.cols,u+=2*o.buffer.rows);let d=0,x=0,y=0;if(h&&null!=p){({worldColumnCountFromOrigin:x,originColumnOffset:y,rightPadding:d}=p);x*p.blockWidth-d>=a+m&&(d=0)}const g=Math.floor(a/s),I=Math.floor(c/l),R=Math.floor((a+m+d-1)/s),w=Math.floor((c+u+d-1)/l),S=n[e];if(!S)return null;const{minRow:k,minCol:T,maxCol:v,maxRow:b}=S;if(0===h&&(w<k||R<T||I>b||g>v))return null;const P=new Array;let B=!1;const _=null==this.ioConfig.allowPartialFill?o.allowPartialFill:this.ioConfig.allowPartialFill;for(let f=I;f<=w;f++)for(let t=g;t<=R;t++){let i=t;if(!o.disableWrapAround&&h&&null!=p&&x<=t&&(i=t-x-y),f>=k&&i>=T&&b>=f&&v>=i){const t=this._tileFetchQueue.push({pyramidLevel:e,row:f,col:i,options:o},{signal:o.signal});_?P.push(new Promise((e=>{t.then((t=>e(t))).catch((()=>{B=!0,e(null)}))}))):P.push(t)}else P.push(Promise.resolve(null))}if(0===P.length)return null;const M=await Promise.all(P),C={height:(w-I+1)*l,width:(R-g+1)*s},{spatialReference:W}=this.rasterInfo,j=this.getPyramidPixelSize(e),{x:z,y:H}=j;return{extent:new f({xmin:r.x+g*s*z,xmax:r.x+(R+1)*s*z,ymin:r.y-(w+1)*l*H,ymax:r.y-I*l*H,spatialReference:W}),pixelBlocks:M,mosaicSize:C,isPartiallyFilled:B}}_fetchRawTile(e,t,i,o){const r=this.rasterInfo.storageInfo.blockBoundary[e];if(!r)return Promise.resolve(null);const{minRow:s,minCol:l,maxCol:a,maxRow:c}=r;if(t<s||i<l||t>c||i>a)return Promise.resolve(null);const f=k(this.rasterId,o.sliceId),m=`${e}/${t}/${i}`;let u=T(f,o.registryId,m);if(null==u){const r=new AbortController;u=this.fetchRawTile(e,t,i,{...o,signal:r.signal}),v(f,o.registryId,m,u,r),u.catch((()=>b(f,o.registryId,m)))}return o.signal&&n(o,(()=>{P(f,o.registryId,m)})),u}_computeMagDirValues(e){const{bandCount:t,dataType:i}=this.rasterInfo;if(!(2===t&&\"vector-magdir\"===i||\"vector-uv\"===i)||2!==e?.length||!e[0]?.length)return null;const o=e[0].length;if(\"vector-magdir\"===i){const t=e[1].map((e=>(e+360)%360));return[e[0],t]}const[r,n]=e,s=[],l=[];for(let a=0;a<o;a++){const[e,t]=J([r[a],n[a]]);s.push(e),l.push(t)}return[s,l]}_getRasterTileAlignmentInfo(e,t){return null==this._rasterTileAlignmentInfo&&(this._rasterTileAlignmentInfo=A(this.rasterInfo)),null==this._rasterTileAlignmentInfo.pyramidsInfo?null:{startX:t,halfWorldWidth:this._rasterTileAlignmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlignmentInfo.hasGCSSShiftTransform,...this._rasterTileAlignmentInfo.pyramidsInfo[e]}}_getSourceDataInfo(e,t,i,o={}){const r={datumTransformation:o.datumTransformation,pyramidLevel:0,pyramidResolution:null,srcExtent:null,srcHeight:0,srcResolution:null,srcWidth:0,ul:{x:0,y:0}};o.srcResolution&&(r.srcResolution=o.srcResolution,this._updateSourceDataInfo(e,r));const n=this.rasterInfo.storageInfo.maximumPyramidLevel||0,{srcWidth:s,srcHeight:l,pyramidLevel:a}=r,c=s/t,f=l/i,u=a<n&&c*f>=16,h=a===n&&this._requireTooManySrcTiles(s,l,t,i);if(u||h||(0===s||0===l)){const s=new m({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/i,spatialReference:e.spatialReference});let l=G(s,this.rasterInfo.spatialReference,e,r.datumTransformation);const h=!l||o.srcResolution&&l.x+l.y<o.srcResolution.x+o.srcResolution.y;if(u&&o.srcResolution&&h){const e=Math.round(Math.log(Math.max(c,f))/Math.LN2)-1;if(n-a+3>=e){const t=2**e;l={x:o.srcResolution.x*t,y:o.srcResolution.y*t}}}l&&(r.srcResolution=l,this._updateSourceDataInfo(e,r))}return this._requireTooManySrcTiles(r.srcWidth,r.srcHeight,t,i)&&(r.srcWidth=0,r.srcHeight=0),r}_requireTooManySrcTiles(e,t,i,o){const{tileInfo:r}=this.rasterInfo.storageInfo,n=Math.ceil(e/r.size[0])*Math.ceil(t/r.size[1]),s=e/i,l=t/o,a=Math.max(1,(i+o)/1024);return n>=V*a||s>N||l>N}_updateSourceDataInfo(e,t){t.srcWidth=0,t.srcHeight=0;const{rasterInfo:i}=this,o=i.spatialReference,{srcResolution:r,datumTransformation:n}=t,{pyramidLevel:s,pyramidResolution:l,excessiveReading:a}=L(r,i,this.ioConfig.sampling);if(a)return;let c=t.srcExtent||F(e,o,n);if(null==c)return;const f=i.transform;f&&(c=f.inverseTransform(c)),t.srcExtent=c;const{x:m,y:u}=i.storageInfo.origin,h=Math.floor((c.xmin-m)/l.x+.1),p=Math.floor((u-c.ymax)/l.y+.1),d=Math.floor((c.xmax-m)/l.x-.1),x=Math.floor((u-c.ymin)/l.y-.1),y=c.width<.1*l.x?0:d-h+1,g=c.height<.1*l.y?0:x-p+1;t.pyramidLevel=s,t.pyramidResolution=l,t.srcWidth=y,t.srcHeight=g,t.ul={x:h,y:p}}_getRequestOptionsWithSliceId(e){return null!=this.rasterInfo.multidimensionalInfo&&null==e.sliceId&&(e={...e,sliceId:this.getSliceIndex(e.multidimensionalDefinition)}),e}_processIdentifyResult(e,t){const{srcLocation:i,position:o,pyramidLevel:r,useTransposedTile:n}=t,s=e.pixels[0].length/e.width/e.height;if(!(!e.mask||e.mask[o]))return{location:i,value:null};const{multidimensionalInfo:l}=this.rasterInfo;if(null==l||!n){const t=e.pixels.map((e=>e[o])),n={location:i,value:t,pyramidLevel:r},s=this._computeMagDirValues(t.map((e=>[e])));return s?.length&&(n.magdirValue=s.map((e=>e[0]))),n}let a=e.pixels.map((e=>e.slice(o*s,o*s+s))),c=this._computeMagDirValues(a);const{requestSomeSlices:f,identifyOptions:m}=t;let u=w(l,m.transposedVariableName);if(f){const e=S(u,m.multidimensionalDefinition,m.timeExtent);a=a.map((t=>e.map((e=>t[e])))),c=c?.map((t=>e.map((e=>t[e])))),u=e.map((e=>u[e]))}const h=e.noDataValues||this.rasterInfo.noDataValue,p={pixels:a,pixelType:e.pixelType};let x;null!=h&&(B(p,h),x=p.mask);return{location:i,value:null,dataSeries:u.map(((e,t)=>{const i={value:0===x?.[t]?null:a.map((e=>e[t])),multidimensionalDefinition:e.multidimensionalDefinition.map((e=>new d({...e,isSlice:!0})))};return c?.length&&(i.magdirValue=[c[0][t],c[1][t]]),i})),pyramidLevel:r}}};function Q(e,t,i){return Math.abs(e.x-t.x)<i&&Math.abs(e.y-t.y)<i}e([l()],$.prototype,\"_rasterTileAlignmentInfo\",void 0),e([l()],$.prototype,\"_tileFetchQueue\",void 0),e([l({readOnly:!0})],$.prototype,\"_isGlobalWrappableSource\",null),e([l({readOnly:!0})],$.prototype,\"_hasNoneOrGCSShiftTransform\",null),e([l()],$.prototype,\"_openPromise\",void 0),e([l()],$.prototype,\"rasterJobHandler\",null),e([l({readOnly:!0})],$.prototype,\"rasterId\",null),e([l(p)],$.prototype,\"url\",null),e([l({type:String,json:{write:!0}})],$.prototype,\"datasetName\",void 0),e([l({type:String,json:{write:!0}})],$.prototype,\"datasetFormat\",void 0),e([l()],$.prototype,\"hasUniqueSourceStorageInfo\",void 0),e([l()],$.prototype,\"rasterInfo\",void 0),e([l()],$.prototype,\"ioConfig\",void 0),e([l()],$.prototype,\"sourceJSON\",void 0),$=e([c(\"esri.layers.support.rasterDatasets.BaseRaster\")],$);const X=$;export{X as default};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}