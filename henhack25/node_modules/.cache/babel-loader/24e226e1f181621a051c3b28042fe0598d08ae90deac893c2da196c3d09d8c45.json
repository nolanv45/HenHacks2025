{"ast":null,"code":"import { _$LH as o } from \"./lit-html.js\";\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst {\n    I: t\n  } = o,\n  i = o => null === o || \"object\" != typeof o && \"function\" != typeof o,\n  n = {\n    HTML: 1,\n    SVG: 2,\n    MATHML: 3\n  },\n  e = (o, t) => void 0 === t ? void 0 !== o?._$litType$ : o?._$litType$ === t,\n  l = o => null != o?._$litType$?.h,\n  c = o => void 0 !== o?._$litDirective$,\n  d = o => o?._$litDirective$,\n  f = o => void 0 === o.strings,\n  s = () => document.createComment(\"\"),\n  r = (o, i, n) => {\n    const e = o._$AA.parentNode,\n      l = void 0 === i ? o._$AB : i._$AA;\n    if (void 0 === n) {\n      const i = e.insertBefore(s(), l),\n        c = e.insertBefore(s(), l);\n      n = new t(i, c, o, o.options);\n    } else {\n      const t = n._$AB.nextSibling,\n        i = n._$AM,\n        c = i !== o;\n      if (c) {\n        let t;\n        n._$AQ?.(o), n._$AM = o, void 0 !== n._$AP && (t = o._$AU) !== i._$AU && n._$AP(t);\n      }\n      if (t !== l || c) {\n        let o = n._$AA;\n        for (; o !== t;) {\n          const t = o.nextSibling;\n          e.insertBefore(o, l), o = t;\n        }\n      }\n    }\n    return n;\n  },\n  v = function (o, t) {\n    let i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : o;\n    return o._$AI(t, i), o;\n  },\n  u = {},\n  m = function (o) {\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : u;\n    return o._$AH = t;\n  },\n  p = o => o._$AH,\n  M = o => {\n    o._$AP?.(!1, !0);\n    let t = o._$AA;\n    const i = o._$AB.nextSibling;\n    for (; t !== i;) {\n      const o = t.nextSibling;\n      t.remove(), t = o;\n    }\n  },\n  h = o => {\n    o._$AR();\n  };\nexport { n as TemplateResultType, h as clearPart, p as getCommittedValue, d as getDirectiveClass, r as insertPart, l as isCompiledTemplateResult, c as isDirectiveResult, i as isPrimitive, f as isSingleExpression, e as isTemplateResult, M as removePart, v as setChildPartValue, m as setCommittedValue };","map":{"version":3,"names":["I","t","o","i","n","HTML","SVG","MATHML","e","isTemplateResult","_$litType$","l","h","c","_$litDirective$","d","f","strings","s","createMarker","document","createComment","r","insertPart","_$AA","parentNode","_$AB","insertBefore","options","nextSibling","_$AM","_$AQ","_$AP","_$AU","v","setChildPartValue","arguments","length","undefined","_$AI","u","m","setCommittedValue","_$AH","p","M","remove","_$AR","TemplateResultType","clearPart","getCommittedValue","getDirectiveClass","isCompiledTemplateResult","isDirectiveResult","isPrimitive","isSingleExpression","removePart"],"sources":["C:\\Users\\nolan\\tasks\\HenHacks2025\\henhack25\\node_modules\\lit-html\\src\\directive-helpers.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  _$LH,\n  Part,\n  DirectiveParent,\n  CompiledTemplateResult,\n  MaybeCompiledTemplateResult,\n  UncompiledTemplateResult,\n} from './lit-html.js';\nimport {\n  DirectiveResult,\n  DirectiveClass,\n  PartInfo,\n  AttributePartInfo,\n} from './directive.js';\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\n\nconst {_ChildPart: ChildPart} = _$LH;\n\ntype ChildPart = InstanceType<typeof ChildPart>;\n\nconst ENABLE_SHADYDOM_NOPATCH = true;\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  window.ShadyDOM?.inUse &&\n  window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM!.wrap\n    : (node: Node) => node;\n\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nexport const isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\n\nexport const TemplateResultType = {\n  HTML: 1,\n  SVG: 2,\n  MATHML: 3,\n} as const;\n\nexport type TemplateResultType =\n  (typeof TemplateResultType)[keyof typeof TemplateResultType];\n\ntype IsTemplateResult = {\n  (val: unknown): val is MaybeCompiledTemplateResult;\n  <T extends TemplateResultType>(\n    val: unknown,\n    type: T\n  ): val is UncompiledTemplateResult<T>;\n};\n\n/**\n * Tests if a value is a TemplateResult or a CompiledTemplateResult.\n */\nexport const isTemplateResult: IsTemplateResult = (\n  value: unknown,\n  type?: TemplateResultType\n): value is UncompiledTemplateResult =>\n  type === undefined\n    ? // This property needs to remain unminified.\n      (value as UncompiledTemplateResult)?.['_$litType$'] !== undefined\n    : (value as UncompiledTemplateResult)?.['_$litType$'] === type;\n\n/**\n * Tests if a value is a CompiledTemplateResult.\n */\nexport const isCompiledTemplateResult = (\n  value: unknown\n): value is CompiledTemplateResult => {\n  return (value as CompiledTemplateResult)?.['_$litType$']?.h != null;\n};\n\n/**\n * Tests if a value is a DirectiveResult.\n */\nexport const isDirectiveResult = (value: unknown): value is DirectiveResult =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'] !== undefined;\n\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nexport const getDirectiveClass = (value: unknown): DirectiveClass | undefined =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'];\n\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nexport const isSingleExpression = (part: PartInfo) =>\n  (part as AttributePartInfo).strings === undefined;\n\nconst createMarker = () => document.createComment('');\n\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nexport const insertPart = (\n  containerPart: ChildPart,\n  refPart?: ChildPart,\n  part?: ChildPart\n): ChildPart => {\n  const container = wrap(containerPart._$startNode).parentNode!;\n\n  const refNode =\n    refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(\n      startNode,\n      endNode,\n      containerPart,\n      containerPart.options\n    );\n  } else {\n    const endNode = wrap(part._$endNode!).nextSibling;\n    const oldParent = part._$parent;\n    const parentChanged = oldParent !== containerPart;\n    if (parentChanged) {\n      part._$reparentDisconnectables?.(containerPart);\n      // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n      part._$parent = containerPart;\n      // Since the _$isConnected getter is somewhat costly, only\n      // read it once we know the subtree has directives that need\n      // to be notified\n      let newConnectionState;\n      if (\n        part._$notifyConnectionChanged !== undefined &&\n        (newConnectionState = containerPart._$isConnected) !==\n          oldParent!._$isConnected\n      ) {\n        part._$notifyConnectionChanged(newConnectionState);\n      }\n    }\n    if (endNode !== refNode || parentChanged) {\n      let start: Node | null = part._$startNode;\n      while (start !== endNode) {\n        const n: Node | null = wrap(start!).nextSibling;\n        wrap(container).insertBefore(start!, refNode);\n        start = n;\n      }\n    }\n  }\n\n  return part;\n};\n\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nexport const setChildPartValue = <T extends ChildPart>(\n  part: T,\n  value: unknown,\n  directiveParent: DirectiveParent = part\n): T => {\n  part._$setValue(value, directiveParent);\n  return part;\n};\n\n// A sentinel value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nexport const setCommittedValue = (part: Part, value: unknown = RESET_VALUE) =>\n  (part._$committedValue = value);\n\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being committed.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nexport const getCommittedValue = (part: ChildPart) => part._$committedValue;\n\n/**\n * Removes a ChildPart from the DOM, including any of its content.\n *\n * @param part The Part to remove\n */\nexport const removePart = (part: ChildPart) => {\n  part._$notifyConnectionChanged?.(false, true);\n  let start: ChildNode | null = part._$startNode;\n  const end: ChildNode | null = wrap(part._$endNode!).nextSibling;\n  while (start !== end) {\n    const n: ChildNode | null = wrap(start!).nextSibling;\n    (wrap(start!) as ChildNode).remove();\n    start = n;\n  }\n};\n\nexport const clearPart = (part: ChildPart) => {\n  part._$clear();\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}