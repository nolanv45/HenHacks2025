{"ast":null,"code":"/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global TransformStream */\n// deno-lint-ignore-file no-this-alias\n\nimport { Crc32Stream } from \"./crc32-stream.js\";\nimport { AESEncryptionStream, AESDecryptionStream } from \"./aes-crypto-stream.js\";\nimport { ZipCryptoEncryptionStream, ZipCryptoDecryptionStream } from \"./zip-crypto-stream.js\";\nimport { ERR_INVALID_PASSWORD, ERR_INVALID_SIGNATURE, ERR_ABORT_CHECK_PASSWORD } from \"./common-crypto.js\";\nconst COMPRESSION_FORMAT = \"deflate-raw\";\nclass DeflateStream extends TransformStream {\n  constructor(options, _ref) {\n    let {\n      chunkSize,\n      CompressionStream,\n      CompressionStreamNative\n    } = _ref;\n    super({});\n    const {\n      compressed,\n      encrypted,\n      useCompressionStream,\n      zipCrypto,\n      signed,\n      level\n    } = options;\n    const stream = this;\n    let crc32Stream, encryptionStream;\n    let readable = filterEmptyChunks(super.readable);\n    if ((!encrypted || zipCrypto) && signed) {\n      crc32Stream = new Crc32Stream();\n      readable = pipeThrough(readable, crc32Stream);\n    }\n    if (compressed) {\n      readable = pipeThroughCommpressionStream(readable, useCompressionStream, {\n        level,\n        chunkSize\n      }, CompressionStreamNative, CompressionStream);\n    }\n    if (encrypted) {\n      if (zipCrypto) {\n        readable = pipeThrough(readable, new ZipCryptoEncryptionStream(options));\n      } else {\n        encryptionStream = new AESEncryptionStream(options);\n        readable = pipeThrough(readable, encryptionStream);\n      }\n    }\n    setReadable(stream, readable, () => {\n      let signature;\n      if (encrypted && !zipCrypto) {\n        signature = encryptionStream.signature;\n      }\n      if ((!encrypted || zipCrypto) && signed) {\n        signature = new DataView(crc32Stream.value.buffer).getUint32(0);\n      }\n      stream.signature = signature;\n    });\n  }\n}\nclass InflateStream extends TransformStream {\n  constructor(options, _ref2) {\n    let {\n      chunkSize,\n      DecompressionStream,\n      DecompressionStreamNative\n    } = _ref2;\n    super({});\n    const {\n      zipCrypto,\n      encrypted,\n      signed,\n      signature,\n      compressed,\n      useCompressionStream\n    } = options;\n    let crc32Stream, decryptionStream;\n    let readable = filterEmptyChunks(super.readable);\n    if (encrypted) {\n      if (zipCrypto) {\n        readable = pipeThrough(readable, new ZipCryptoDecryptionStream(options));\n      } else {\n        decryptionStream = new AESDecryptionStream(options);\n        readable = pipeThrough(readable, decryptionStream);\n      }\n    }\n    if (compressed) {\n      readable = pipeThroughCommpressionStream(readable, useCompressionStream, {\n        chunkSize\n      }, DecompressionStreamNative, DecompressionStream);\n    }\n    if ((!encrypted || zipCrypto) && signed) {\n      crc32Stream = new Crc32Stream();\n      readable = pipeThrough(readable, crc32Stream);\n    }\n    setReadable(this, readable, () => {\n      if ((!encrypted || zipCrypto) && signed) {\n        const dataViewSignature = new DataView(crc32Stream.value.buffer);\n        if (signature != dataViewSignature.getUint32(0, false)) {\n          throw new Error(ERR_INVALID_SIGNATURE);\n        }\n      }\n    });\n  }\n}\nexport { DeflateStream, InflateStream, ERR_INVALID_PASSWORD, ERR_INVALID_SIGNATURE, ERR_ABORT_CHECK_PASSWORD };\nfunction filterEmptyChunks(readable) {\n  return pipeThrough(readable, new TransformStream({\n    transform(chunk, controller) {\n      if (chunk && chunk.length) {\n        controller.enqueue(chunk);\n      }\n    }\n  }));\n}\nfunction setReadable(stream, readable, flush) {\n  readable = pipeThrough(readable, new TransformStream({\n    flush\n  }));\n  Object.defineProperty(stream, \"readable\", {\n    get() {\n      return readable;\n    }\n  });\n}\nfunction pipeThroughCommpressionStream(readable, useCompressionStream, options, CodecStreamNative, CodecStream) {\n  try {\n    const CompressionStream = useCompressionStream && CodecStreamNative ? CodecStreamNative : CodecStream;\n    readable = pipeThrough(readable, new CompressionStream(COMPRESSION_FORMAT, options));\n    // eslint-disable-next-line no-unused-vars\n  } catch (_) {\n    if (useCompressionStream) {\n      try {\n        readable = pipeThrough(readable, new CodecStream(COMPRESSION_FORMAT, options));\n        // eslint-disable-next-line no-unused-vars\n      } catch (_) {\n        return readable;\n      }\n    } else {\n      return readable;\n    }\n  }\n  return readable;\n}\nfunction pipeThrough(readable, transformStream) {\n  return readable.pipeThrough(transformStream);\n}","map":{"version":3,"names":["Crc32Stream","AESEncryptionStream","AESDecryptionStream","ZipCryptoEncryptionStream","ZipCryptoDecryptionStream","ERR_INVALID_PASSWORD","ERR_INVALID_SIGNATURE","ERR_ABORT_CHECK_PASSWORD","COMPRESSION_FORMAT","DeflateStream","TransformStream","constructor","options","_ref","chunkSize","CompressionStream","CompressionStreamNative","compressed","encrypted","useCompressionStream","zipCrypto","signed","level","stream","crc32Stream","encryptionStream","readable","filterEmptyChunks","pipeThrough","pipeThroughCommpressionStream","setReadable","signature","DataView","value","buffer","getUint32","InflateStream","_ref2","DecompressionStream","DecompressionStreamNative","decryptionStream","dataViewSignature","Error","transform","chunk","controller","length","enqueue","flush","Object","defineProperty","get","CodecStreamNative","CodecStream","_","transformStream"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/node_modules/@zip.js/zip.js/lib/core/streams/zip-entry-stream.js"],"sourcesContent":["/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global TransformStream */\n// deno-lint-ignore-file no-this-alias\n\nimport { Crc32Stream } from \"./crc32-stream.js\";\nimport {\n\tAESEncryptionStream,\n\tAESDecryptionStream\n} from \"./aes-crypto-stream.js\";\nimport {\n\tZipCryptoEncryptionStream,\n\tZipCryptoDecryptionStream\n} from \"./zip-crypto-stream.js\";\nimport {\n\tERR_INVALID_PASSWORD,\n\tERR_INVALID_SIGNATURE,\n\tERR_ABORT_CHECK_PASSWORD\n} from \"./common-crypto.js\";\n\nconst COMPRESSION_FORMAT = \"deflate-raw\";\n\nclass DeflateStream extends TransformStream {\n\n\tconstructor(options, { chunkSize, CompressionStream, CompressionStreamNative }) {\n\t\tsuper({});\n\t\tconst { compressed, encrypted, useCompressionStream, zipCrypto, signed, level } = options;\n\t\tconst stream = this;\n\t\tlet crc32Stream, encryptionStream;\n\t\tlet readable = filterEmptyChunks(super.readable);\n\t\tif ((!encrypted || zipCrypto) && signed) {\n\t\t\tcrc32Stream = new Crc32Stream();\n\t\t\treadable = pipeThrough(readable, crc32Stream);\n\t\t}\n\t\tif (compressed) {\n\t\t\treadable = pipeThroughCommpressionStream(readable, useCompressionStream, { level, chunkSize }, CompressionStreamNative, CompressionStream);\n\t\t}\n\t\tif (encrypted) {\n\t\t\tif (zipCrypto) {\n\t\t\t\treadable = pipeThrough(readable, new ZipCryptoEncryptionStream(options));\n\t\t\t} else {\n\t\t\t\tencryptionStream = new AESEncryptionStream(options);\n\t\t\t\treadable = pipeThrough(readable, encryptionStream);\n\t\t\t}\n\t\t}\n\t\tsetReadable(stream, readable, () => {\n\t\t\tlet signature;\n\t\t\tif (encrypted && !zipCrypto) {\n\t\t\t\tsignature = encryptionStream.signature;\n\t\t\t}\n\t\t\tif ((!encrypted || zipCrypto) && signed) {\n\t\t\t\tsignature = new DataView(crc32Stream.value.buffer).getUint32(0);\n\t\t\t}\n\t\t\tstream.signature = signature;\n\t\t});\n\t}\n}\n\nclass InflateStream extends TransformStream {\n\n\tconstructor(options, { chunkSize, DecompressionStream, DecompressionStreamNative }) {\n\t\tsuper({});\n\t\tconst { zipCrypto, encrypted, signed, signature, compressed, useCompressionStream } = options;\n\t\tlet crc32Stream, decryptionStream;\n\t\tlet readable = filterEmptyChunks(super.readable);\n\t\tif (encrypted) {\n\t\t\tif (zipCrypto) {\n\t\t\t\treadable = pipeThrough(readable, new ZipCryptoDecryptionStream(options));\n\t\t\t} else {\n\t\t\t\tdecryptionStream = new AESDecryptionStream(options);\n\t\t\t\treadable = pipeThrough(readable, decryptionStream);\n\t\t\t}\n\t\t}\n\t\tif (compressed) {\n\t\t\treadable = pipeThroughCommpressionStream(readable, useCompressionStream, { chunkSize }, DecompressionStreamNative, DecompressionStream);\n\t\t}\n\t\tif ((!encrypted || zipCrypto) && signed) {\n\t\t\tcrc32Stream = new Crc32Stream();\n\t\t\treadable = pipeThrough(readable, crc32Stream);\n\t\t}\n\t\tsetReadable(this, readable, () => {\n\t\t\tif ((!encrypted || zipCrypto) && signed) {\n\t\t\t\tconst dataViewSignature = new DataView(crc32Stream.value.buffer);\n\t\t\t\tif (signature != dataViewSignature.getUint32(0, false)) {\n\t\t\t\t\tthrow new Error(ERR_INVALID_SIGNATURE);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport {\n\tDeflateStream,\n\tInflateStream,\n\tERR_INVALID_PASSWORD,\n\tERR_INVALID_SIGNATURE,\n\tERR_ABORT_CHECK_PASSWORD\n};\n\nfunction filterEmptyChunks(readable) {\n\treturn pipeThrough(readable, new TransformStream({\n\t\ttransform(chunk, controller) {\n\t\t\tif (chunk && chunk.length) {\n\t\t\t\tcontroller.enqueue(chunk);\n\t\t\t}\n\t\t}\n\t}));\n}\n\nfunction setReadable(stream, readable, flush) {\n\treadable = pipeThrough(readable, new TransformStream({ flush }));\n\tObject.defineProperty(stream, \"readable\", {\n\t\tget() {\n\t\t\treturn readable;\n\t\t}\n\t});\n}\n\nfunction pipeThroughCommpressionStream(readable, useCompressionStream, options, CodecStreamNative, CodecStream) {\n\ttry {\n\t\tconst CompressionStream = useCompressionStream && CodecStreamNative ? CodecStreamNative : CodecStream;\n\t\treadable = pipeThrough(readable, new CompressionStream(COMPRESSION_FORMAT, options));\n\t\t// eslint-disable-next-line no-unused-vars\n\t} catch (_) {\n\t\tif (useCompressionStream) {\n\t\t\ttry {\n\t\t\t\treadable = pipeThrough(readable, new CodecStream(COMPRESSION_FORMAT, options));\n\t\t\t\t// eslint-disable-next-line no-unused-vars\n\t\t\t} catch (_) {\n\t\t\t\treturn readable;\n\t\t\t}\n\t\t} else {\n\t\t\treturn readable;\n\t\t}\n\t}\n\treturn readable;\n}\n\nfunction pipeThrough(readable, transformStream) {\n\treturn readable.pipeThrough(transformStream);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}