{"ast":null,"code":"import { html as t, svg as r, mathml as e } from \"./lit-html.js\";\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst a = Symbol.for(\"\"),\n  o = t => {\n    if (t?.r === a) return t?._$litStatic$;\n  },\n  s = t => ({\n    _$litStatic$: t,\n    r: a\n  }),\n  i = function (t) {\n    for (var _len = arguments.length, r = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      r[_key - 1] = arguments[_key];\n    }\n    return {\n      _$litStatic$: r.reduce((r, e, a) => r + (t => {\n        if (void 0 !== t._$litStatic$) return t._$litStatic$;\n        throw Error(`Value passed to 'literal' function must be a 'literal' result: ${t}. Use 'unsafeStatic' to pass non-literal values, but\\n            take care to ensure page security.`);\n      })(e) + t[a + 1], t[0]),\n      r: a\n    };\n  },\n  l = new Map(),\n  n = t => function (r) {\n    for (var _len2 = arguments.length, e = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      e[_key2 - 1] = arguments[_key2];\n    }\n    const a = e.length;\n    let s, i;\n    const n = [],\n      u = [];\n    let c,\n      $ = 0,\n      f = !1;\n    for (; $ < a;) {\n      for (c = r[$]; $ < a && void 0 !== (i = e[$], s = o(i));) c += s + r[++$], f = !0;\n      $ !== a && u.push(i), n.push(c), $++;\n    }\n    if ($ === a && n.push(r[a]), f) {\n      const t = n.join(\"$$lit$$\");\n      void 0 === (r = l.get(t)) && (n.raw = n, l.set(t, r = n)), e = u;\n    }\n    return t(r, ...e);\n  },\n  u = n(t),\n  c = n(r),\n  $ = n(e);\nexport { u as html, i as literal, $ as mathml, c as svg, s as unsafeStatic, n as withStatic };","map":{"version":3,"names":["a","Symbol","for","o","t","r","_$litStatic$","s","i","literal","_len","arguments","length","Array","_key","reduce","e","Error","l","Map","n","_len2","_key2","u","c","$","f","push","join","get","raw","set","html","mathml","svg","unsafeStatic","withStatic"],"sources":["C:\\Users\\nolan\\tasks\\HenHacks2025\\henhack25\\node_modules\\lit-html\\src\\static.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// Any new exports need to be added to the export statement in\n// `packages/lit/src/index.all.ts`.\n\nimport {\n  html as coreHtml,\n  svg as coreSvg,\n  mathml as coreMathml,\n  TemplateResult,\n} from './lit-html.js';\n\nexport interface StaticValue {\n  /** The value to interpolate as-is into the template. */\n  _$litStatic$: string;\n\n  /**\n   * A value that can't be decoded from ordinary JSON, make it harder for\n   * an attacker-controlled data that goes through JSON.parse to produce a valid\n   * StaticValue.\n   */\n  r: typeof brand;\n}\n\n/**\n * Prevents JSON injection attacks.\n *\n * The goals of this brand:\n *   1) fast to check\n *   2) code is small on the wire\n *   3) multiple versions of Lit in a single page will all produce mutually\n *      interoperable StaticValues\n *   4) normal JSON.parse (without an unusual reviver) can not produce a\n *      StaticValue\n *\n * Symbols satisfy (1), (2), and (4). We use Symbol.for to satisfy (3), but\n * we don't care about the key, so we break ties via (2) and use the empty\n * string.\n */\nconst brand = Symbol.for('');\n\n/** Safely extracts the string part of a StaticValue. */\nconst unwrapStaticValue = (value: unknown): string | undefined => {\n  if ((value as Partial<StaticValue>)?.r !== brand) {\n    return undefined;\n  }\n  return (value as Partial<StaticValue>)?.['_$litStatic$'];\n};\n\n/**\n * Wraps a string so that it behaves like part of the static template\n * strings instead of a dynamic value.\n *\n * Users must take care to ensure that adding the static string to the template\n * results in well-formed HTML, or else templates may break unexpectedly.\n *\n * Note that this function is unsafe to use on untrusted content, as it will be\n * directly parsed into HTML. Do not pass user input to this function\n * without sanitizing it.\n *\n * Static values can be changed, but they will cause a complete re-render\n * since they effectively create a new template.\n */\nexport const unsafeStatic = (value: string): StaticValue => ({\n  ['_$litStatic$']: value,\n  r: brand,\n});\n\nconst textFromStatic = (value: StaticValue) => {\n  if (value['_$litStatic$'] !== undefined) {\n    return value['_$litStatic$'];\n  } else {\n    throw new Error(\n      `Value passed to 'literal' function must be a 'literal' result: ${value}. Use 'unsafeStatic' to pass non-literal values, but\n            take care to ensure page security.`\n    );\n  }\n};\n\n/**\n * Tags a string literal so that it behaves like part of the static template\n * strings instead of a dynamic value.\n *\n * The only values that may be used in template expressions are other tagged\n * `literal` results or `unsafeStatic` values (note that untrusted content\n * should never be passed to `unsafeStatic`).\n *\n * Users must take care to ensure that adding the static string to the template\n * results in well-formed HTML, or else templates may break unexpectedly.\n *\n * Static values can be changed, but they will cause a complete re-render since\n * they effectively create a new template.\n */\nexport const literal = (\n  strings: TemplateStringsArray,\n  ...values: unknown[]\n): StaticValue => ({\n  ['_$litStatic$']: values.reduce(\n    (acc, v, idx) => acc + textFromStatic(v as StaticValue) + strings[idx + 1],\n    strings[0]\n  ) as string,\n  r: brand,\n});\n\nconst stringsCache = new Map<string, TemplateStringsArray>();\n\n/**\n * Wraps a lit-html template tag (`html` or `svg`) to add static value support.\n */\nexport const withStatic =\n  (coreTag: typeof coreHtml | typeof coreSvg | typeof coreMathml) =>\n  (strings: TemplateStringsArray, ...values: unknown[]): TemplateResult => {\n    const l = values.length;\n    let staticValue: string | undefined;\n    let dynamicValue: unknown;\n    const staticStrings: Array<string> = [];\n    const dynamicValues: Array<unknown> = [];\n    let i = 0;\n    let hasStatics = false;\n    let s: string;\n\n    while (i < l) {\n      s = strings[i];\n      // Collect any unsafeStatic values, and their following template strings\n      // so that we treat a run of template strings and unsafe static values as\n      // a single template string.\n      while (\n        i < l &&\n        ((dynamicValue = values[i]),\n        (staticValue = unwrapStaticValue(dynamicValue))) !== undefined\n      ) {\n        s += staticValue + strings[++i];\n        hasStatics = true;\n      }\n      // If the last value is static, we don't need to push it.\n      if (i !== l) {\n        dynamicValues.push(dynamicValue);\n      }\n      staticStrings.push(s);\n      i++;\n    }\n    // If the last value isn't static (which would have consumed the last\n    // string), then we need to add the last string.\n    if (i === l) {\n      staticStrings.push(strings[l]);\n    }\n\n    if (hasStatics) {\n      const key = staticStrings.join('$$lit$$');\n      strings = stringsCache.get(key)!;\n      if (strings === undefined) {\n        // Beware: in general this pattern is unsafe, and doing so may bypass\n        // lit's security checks and allow an attacker to execute arbitrary\n        // code and inject arbitrary content.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (staticStrings as any).raw = staticStrings;\n        stringsCache.set(\n          key,\n          (strings = staticStrings as unknown as TemplateStringsArray)\n        );\n      }\n      values = dynamicValues;\n    }\n    return coreTag(strings, ...values);\n  };\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const html = withStatic(coreHtml);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const svg = withStatic(coreSvg);\n\n/**\n * Interprets a template literal as MathML fragment that can efficiently render\n * to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const mathml = withStatic(coreMathml);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}