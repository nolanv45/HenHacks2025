{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nolan\\\\tasks\\\\HenHacks2025\\\\henhack25\\\\src\\\\Map.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"@arcgis/core/assets/esri/themes/light/main.css\";\nimport MapView from \"@arcgis/core/views/MapView\";\nimport WebMap from \"@arcgis/core/WebMap\";\nimport PopupTemplate from \"@arcgis/core/PopupTemplate\";\nimport { GoogleGenerativeAI } from \"some-google-ai-library\"; // Replace with the actual library name\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MapComponent = () => {\n  _s();\n  const mapDiv = useRef(null);\n  const [ingredients, setIngredients] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n  const [recipeGenerated, setRecipeGenerated] = useState(false);\n  const [currentPage, setCurrentPage] = useState('home');\n  useEffect(() => {\n    async function handleSubmit() {\n      try {\n        const apiKey = \"AIzaSyDR-VHD19VDVq_t8ORrz4SCctc5Z_Rc6uQ\";\n        if (!apiKey) {\n          console.error(\"API key not found in environment variables.\");\n          return;\n        }\n        const genAI = new GoogleGenerativeAI(apiKey);\n        const model = genAI.getGenerativeModel({\n          model: \"gemini-2.0-flash\"\n        });\n        const prompt = `Generate a recipe from ${country} using the following ingredients: ${ingredients}.\n        Format the response as valid JSON with the following keys:\n        {\n          \"time\": \"Estimated preparation and cooking time\",\n          \"ingredients\": [\"List of ingredients with quantities\"],\n          \"instructions\": [\"Step 1\", \"Step 2\", \"Step 3\", ...],\n          \"macronutrients\": {\n            \"calories\": \"value\",\n            \"protein\": \"value\",\n            \"carbs\": \"value\",\n            \"fat\": \"value\"\n          }\n        }\n        Return only the JSON object without extra formatting.`;\n        const result = await model.generateContent(prompt);\n        const response = await result.response;\n        const text = await response.text(); // Await the text response\n\n        // Ensure the response text is valid JSON\n        const jsonStartIndex = text.indexOf('{');\n        const jsonEndIndex = text.lastIndexOf('}') + 1;\n        const jsonString = text.substring(jsonStartIndex, jsonEndIndex);\n        const recipeData = JSON.parse(jsonString);\n        setRecipe(recipeData); // Use the state setter\n        setRecipeGenerated(true);\n      } catch (error) {\n        console.error(\"Error generating recipe:\", error);\n      }\n    }\n    if (mapDiv.current) {\n      const webmap = new WebMap({\n        portalItem: {\n          id: \"047cb3b3562f4760a2f5c3b05d83d4fd\"\n        }\n      });\n      const view = new MapView({\n        map: webmap,\n        container: mapDiv.current,\n        center: [10, 50],\n        zoom: 4\n      });\n      view.when(() => {\n        console.log(\"Map and View are ready\");\n\n        // Loop through layers in the WebMap and find the FeatureLayer\n        webmap.layers.forEach(layer => {\n          if (layer.type === \"feature\") {\n            const featureLayer = layer;\n            featureLayer.load().then(() => {\n              console.log(\"Fields in Boundaries Layer:\", featureLayer.fields.map(f => f.name));\n            });\n\n            // Define a PopupTemplate (if it's not already defined)\n            featureLayer.popupTemplate = new PopupTemplate({\n              title: `{REGIONNAME}`,\n              // Use the field of your feature layer\n              content: \"{Description}\" // Content can be adjusted to show relevant fields\n            });\n\n            // Add click event to the view for interaction\n            view.on(\"click\", event => {\n              view.hitTest(event).then(response => {\n                var _response$results$;\n                const graphic = (_response$results$ = response.results[0]) === null || _response$results$ === void 0 ? void 0 : _response$results$.graphic;\n                if (graphic) {\n                  const regionName = graphic.attributes.Name; // Assuming 'Name' is the field for the region's name\n                  const regionDescription = graphic.attributes.Description;\n                  // Open the popup for the clicked feature\n\n                  if (view.popup) {\n                    view.popup.open({\n                      title: regionName,\n                      content: regionDescription,\n                      location: event.mapPoint // Show popup at clicked point\n                    });\n                  }\n                }\n              });\n            });\n            const fields = featureLayer.fields;\n            console.log(\"Layer Fields: \", fields);\n          }\n        });\n      }, error => {\n        console.error(\"Error loading WebMap: \", error);\n      });\n      return () => {\n        if (mapDiv.current) {\n          mapDiv.current.innerHTML = \"\";\n        }\n      };\n    }\n  }, []);\n  function goBack() {\n    setCurrentPage('home');\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"header\",\n      children: \"Explore the Recipes of Europe!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapDiv,\n      style: {\n        height: \"100vh\",\n        width: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: goBack,\n      children: \"Go Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 7\n  }, this);\n};\n_s(MapComponent, \"oMGljp4/SQDQZG4fLxsT20b/j0A=\");\n_c = MapComponent;\nexport default MapComponent;\nfunction setCurrentPage(arg0) {\n  throw new Error(\"Function not implemented.\");\n}\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useRef","useState","MapView","WebMap","PopupTemplate","GoogleGenerativeAI","jsxDEV","_jsxDEV","MapComponent","_s","mapDiv","ingredients","setIngredients","country","setCountry","recipeGenerated","setRecipeGenerated","currentPage","setCurrentPage","handleSubmit","apiKey","console","error","genAI","model","getGenerativeModel","prompt","result","generateContent","response","text","jsonStartIndex","indexOf","jsonEndIndex","lastIndexOf","jsonString","substring","recipeData","JSON","parse","setRecipe","current","webmap","portalItem","id","view","map","container","center","zoom","when","log","layers","forEach","layer","type","featureLayer","load","then","fields","f","name","popupTemplate","title","content","on","event","hitTest","_response$results$","graphic","results","regionName","attributes","Name","regionDescription","Description","popup","open","location","mapPoint","innerHTML","goBack","children","className","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","height","width","onClick","_c","arg0","Error","$RefreshReg$"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/src/Map.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"@arcgis/core/assets/esri/themes/light/main.css\";\r\nimport MapView from \"@arcgis/core/views/MapView\";\r\nimport WebMap from \"@arcgis/core/WebMap\";\r\nimport FeatureLayer from \"@arcgis/core/layers/FeatureLayer\";\r\nimport Graphic from \"@arcgis/core/Graphic\";\r\nimport PopupTemplate from \"@arcgis/core/PopupTemplate\";\r\nimport { GoogleGenerativeAI } from \"some-google-ai-library\"; // Replace with the actual library name\r\n\r\n\r\n\r\nexport const MapComponent = () => {\r\n  const mapDiv = useRef<HTMLDivElement>(null);\r\n\r\n const [ingredients, setIngredients] = useState<string>(\"\");\r\n  const [country, setCountry] = useState<string>(\"\");\r\n  const [recipeGenerated, setRecipeGenerated] = useState<boolean>(false);\r\n  type page = 'home' | 'Ai Page' | 'Recipe Page' | 'Map Page';\r\n\r\n\r\n    interface Recipe {\r\n        time: string;\r\n        ingredients: string[];\r\n        instructions: string[];\r\n        macronutrients: {\r\n        calories: string;\r\n        protein: string;\r\n        carbs: string;\r\n        fat: string;\r\n        };\r\n    }\r\n  const [currentPage, setCurrentPage] = useState<page>('home');\r\n\r\n  useEffect(() => {\r\n    async function handleSubmit() {\r\n        try {\r\n          const apiKey = \"AIzaSyDR-VHD19VDVq_t8ORrz4SCctc5Z_Rc6uQ\";\r\n          if (!apiKey) {\r\n            console.error(\"API key not found in environment variables.\");\r\n            return;\r\n          }\r\n    \r\n          const genAI = new GoogleGenerativeAI(apiKey);\r\n          const model = genAI.getGenerativeModel({ model: \"gemini-2.0-flash\" });\r\n          const prompt = `Generate a recipe from ${country} using the following ingredients: ${ingredients}.\r\n        Format the response as valid JSON with the following keys:\r\n        {\r\n          \"time\": \"Estimated preparation and cooking time\",\r\n          \"ingredients\": [\"List of ingredients with quantities\"],\r\n          \"instructions\": [\"Step 1\", \"Step 2\", \"Step 3\", ...],\r\n          \"macronutrients\": {\r\n            \"calories\": \"value\",\r\n            \"protein\": \"value\",\r\n            \"carbs\": \"value\",\r\n            \"fat\": \"value\"\r\n          }\r\n        }\r\n        Return only the JSON object without extra formatting.`;\r\n    \r\n          const result = await model.generateContent(prompt);\r\n          const response = await result.response;\r\n          const text = await response.text(); // Await the text response\r\n    \r\n          // Ensure the response text is valid JSON\r\n          const jsonStartIndex = text.indexOf('{');\r\n          const jsonEndIndex = text.lastIndexOf('}') + 1;\r\n          const jsonString = text.substring(jsonStartIndex, jsonEndIndex);\r\n    \r\n          const recipeData = JSON.parse(jsonString);\r\n      \r\n          setRecipe(recipeData); // Use the state setter\r\n          setRecipeGenerated(true);\r\n        } catch (error) {\r\n          console.error(\"Error generating recipe:\", error);\r\n        }\r\n      }\r\n    if (mapDiv.current) {\r\n\r\n      const webmap = new WebMap({\r\n        portalItem: { id: \"047cb3b3562f4760a2f5c3b05d83d4fd\" }\r\n      });\r\n\r\n      const view = new MapView({\r\n        map: webmap,\r\n        container: mapDiv.current,\r\n        center: [10, 50], \r\n        zoom: 4, \r\n      });\r\n\r\n      view.when(() => {\r\n        console.log(\"Map and View are ready\");\r\n\r\n        // Loop through layers in the WebMap and find the FeatureLayer\r\n        webmap.layers.forEach((layer: any) => {\r\n          if (layer.type === \"feature\") {\r\n            const featureLayer = layer as FeatureLayer;\r\n            \r\n            \r\n            featureLayer.load().then(() => {\r\n                console.log(\"Fields in Boundaries Layer:\", featureLayer.fields.map((f: any) => f.name));\r\n              });\r\n              \r\n            // Define a PopupTemplate (if it's not already defined)\r\n            featureLayer.popupTemplate = new PopupTemplate({\r\n              title: `{REGIONNAME}`, // Use the field of your feature layer\r\n              content: \"{Description}\", // Content can be adjusted to show relevant fields\r\n            });\r\n\r\n            // Add click event to the view for interaction\r\n            view.on(\"click\", (event: any) => {\r\n              view.hitTest(event).then((response: any) => {\r\n                const graphic = response.results[0]?.graphic;\r\n                if (graphic) {\r\n                    const regionName = graphic.attributes.Name; // Assuming 'Name' is the field for the region's name\r\n            const regionDescription = graphic.attributes.Description;\r\n                  // Open the popup for the clicked feature\r\n\r\n                  if (view.popup) {\r\n                    view.popup.open({\r\n                      title: regionName,\r\n                      content: regionDescription,\r\n                      location: event.mapPoint, // Show popup at clicked point\r\n                    });\r\n                  }\r\n                }\r\n              });\r\n            });\r\n            const fields = featureLayer.fields;\r\n            console.log(\"Layer Fields: \", fields)\r\n          }\r\n          \r\n        });\r\n      }, (error: any) => {\r\n        console.error(\"Error loading WebMap: \", error);\r\n      });\r\n\r\n      return () => {\r\n        if (mapDiv.current) {\r\n          mapDiv.current.innerHTML = \"\";\r\n        }\r\n      };\r\n    }\r\n  }, []);\r\n\r\nfunction goBack() {\r\n    setCurrentPage('home');\r\n  }\r\n\r\n \r\n  return (\r\n      <div>\r\n        <h2 className=\"header\">Explore the Recipes of Europe!</h2>\r\n          <div ref={mapDiv} style={{ height: \"100vh\", width: \"100%\" }} />\r\n          <button onClick={goBack}>Go Back</button>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default MapComponent;\r\n\r\nfunction setCurrentPage(arg0: string) {\r\n  throw new Error(\"Function not implemented.\");\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}