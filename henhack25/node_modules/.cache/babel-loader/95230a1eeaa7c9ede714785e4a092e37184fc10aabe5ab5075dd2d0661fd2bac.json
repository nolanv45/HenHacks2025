{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport e from \"../../core/Error.js\";\nimport { open as r } from \"../../core/workers/workers.js\";\nimport o from \"./PixelBlock.js\";\nclass t {\n  constructor() {\n    this._workerThread = null, this._destroyed = !1;\n  }\n  async initialize() {\n    const e = await r(\"RasterWorker\");\n    this._destroyed ? e.close() : this._workerThread = e;\n  }\n  destroy() {\n    this._destroyed = !0, this._workerThread && (this._workerThread.close(), this._workerThread = null);\n  }\n  async convertVectorFieldData(r, t) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    const n = await this._workerThread.invoke(\"convertVectorFieldData\", {\n      pixelBlock: r.pixelBlock.toJSON(),\n      type: r.dataType\n    }, t);\n    return n ? new o(n) : null;\n  }\n  computeStatisticsHistograms(r, o) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    return this._workerThread.invoke(\"computeStatisticsHistograms\", {\n      pixelBlock: r.pixelBlock.toJSON()\n    }, o);\n  }\n  async decode(r, t) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    const n = await this._workerThread.invoke(\"decode\", r, t);\n    return n ? new o(n) : null;\n  }\n  async symbolize(r, t) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    const n = {\n        extent: r.extent?.toJSON(),\n        pixelBlock: r.pixelBlock?.toJSON(),\n        simpleStretchParams: r.simpleStretchParams,\n        bandIds: r.bandIds\n      },\n      a = await this._workerThread.invoke(\"symbolize\", n, t);\n    return a ? new o(a) : null;\n  }\n  async updateSymbolizer(r, o) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    const t = r?.rendererJSON?.histograms;\n    await Promise.all(this._workerThread.broadcast(\"updateSymbolizer\", {\n      symbolizerJSON: r.toJSON(),\n      histograms: t\n    }, o));\n  }\n  async updateRasterFunction(r, o) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    await Promise.all(this._workerThread.broadcast(\"updateRasterFunction\", {\n      rasterFunctionJSON: r.toJSON()\n    }, o));\n  }\n  async process(r, t) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    const n = await this._workerThread.invoke(\"process\", {\n      extent: r.extent?.toJSON(),\n      primaryPixelSizes: r.primaryPixelSizes?.map(e => null != e ? e.toJSON() : null),\n      primaryPixelBlocks: r.primaryPixelBlocks.map(e => null != e ? e.toJSON() : null),\n      primaryRasterIds: r.primaryRasterIds\n    }, t);\n    return n ? new o(n) : null;\n  }\n  async stretch(r, t) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    if (!r?.pixelBlock) return null;\n    const n = {\n        srcPixelBlock: r.pixelBlock.toJSON(),\n        stretchParams: r.stretchParams\n      },\n      a = await this._workerThread.invoke(\"stretch\", n, t);\n    return a ? new o(a) : null;\n  }\n  async split(r, t) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    if (!r?.pixelBlock) return null;\n    const n = {\n        srcPixelBlock: r.pixelBlock.toJSON(),\n        tileSize: r.tileSize,\n        maximumPyramidLevel: r.maximumPyramidLevel,\n        useBilinear: r.useBilinear\n      },\n      a = await this._workerThread.invoke(\"split\", n, t);\n    return a && a.forEach((e, r) => {\n      a.set(r, e ? o.fromJSON(e) : null);\n    }), a;\n  }\n  async clipTile(r, t) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    if (!r?.pixelBlock) return null;\n    const n = {\n        ...r,\n        pixelBlock: r.pixelBlock.toJSON()\n      },\n      a = await this._workerThread.invoke(\"clipTile\", n, t);\n    return a ? o.fromJSON(a) : null;\n  }\n  async estimateStatisticsHistograms(r, o) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    if (!r?.pixelBlock) return null;\n    const t = {\n      srcPixelBlock: r.pixelBlock.toJSON()\n    };\n    return await this._workerThread.invoke(\"estimateStatisticsHistograms\", t, o);\n  }\n  async mosaicAndTransform(r, t) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    if (!r?.srcPixelBlocks?.length) return {\n      pixelBlock: null\n    };\n    const n = {\n        ...r,\n        srcPixelBlocks: r.srcPixelBlocks.map(e => null != e ? e.toJSON() : null)\n      },\n      a = await this._workerThread.invoke(\"mosaicAndTransform\", n, t);\n    return {\n      pixelBlock: a.pixelBlock ? new o(a.pixelBlock) : null,\n      localNorthDirections: a.localNorthDirections\n    };\n  }\n  async createFlowMesh(r, o) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    const t = {\n        buffer: r.flowData.data.buffer,\n        maskBuffer: r.flowData.mask.buffer,\n        width: r.flowData.width,\n        height: r.flowData.height\n      },\n      {\n        meshType: n,\n        simulationSettings: a\n      } = r,\n      i = await this._workerThread.invoke(\"createFlowMesh\", {\n        meshType: n,\n        flowData: t,\n        simulationSettings: a\n      }, {\n        ...o,\n        transferList: [t.buffer, t.maskBuffer]\n      });\n    return {\n      vertexData: new Float32Array(i.vertexBuffer),\n      indexData: new Uint32Array(i.indexBuffer)\n    };\n  }\n  getProjectionOffsetGrid(r, o) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    const t = null != r.datumTransformation ? r.datumTransformation.steps.map(e => ({\n        wkid: e.wkid,\n        wkt: e.wkt,\n        isInverse: e.isInverse\n      })) : null,\n      n = null != r.rasterTransform ? r.rasterTransform.toJSON() : null,\n      a = {\n        projectedExtent: r.projectedExtent.toJSON(),\n        srcBufferExtent: r.srcBufferExtent.toJSON(),\n        pixelSize: r.pixelSize,\n        hasWrapAround: r.hasWrapAround,\n        spacing: r.spacing,\n        datumTransformationSteps: t,\n        rasterTransform: n,\n        isAdaptive: r.isAdaptive,\n        includeGCSGrid: r.includeGCSGrid\n      };\n    return this._workerThread.invoke(\"getProjectionOffsetGrid\", a, o);\n  }\n}\nexport { t as default };","map":{"version":3,"names":["e","open","r","o","t","constructor","_workerThread","_destroyed","initialize","close","destroy","convertVectorFieldData","n","invoke","pixelBlock","toJSON","type","dataType","computeStatisticsHistograms","decode","symbolize","extent","simpleStretchParams","bandIds","a","updateSymbolizer","rendererJSON","histograms","Promise","all","broadcast","symbolizerJSON","updateRasterFunction","rasterFunctionJSON","process","primaryPixelSizes","map","primaryPixelBlocks","primaryRasterIds","stretch","srcPixelBlock","stretchParams","split","tileSize","maximumPyramidLevel","useBilinear","forEach","set","fromJSON","clipTile","estimateStatisticsHistograms","mosaicAndTransform","srcPixelBlocks","length","localNorthDirections","createFlowMesh","buffer","flowData","data","maskBuffer","mask","width","height","meshType","simulationSettings","i","transferList","vertexData","Float32Array","vertexBuffer","indexData","Uint32Array","indexBuffer","getProjectionOffsetGrid","datumTransformation","steps","wkid","wkt","isInverse","rasterTransform","projectedExtent","srcBufferExtent","pixelSize","hasWrapAround","spacing","datumTransformationSteps","isAdaptive","includeGCSGrid","default"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/node_modules/@arcgis/core/layers/support/RasterJobHandler.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport e from\"../../core/Error.js\";import{open as r}from\"../../core/workers/workers.js\";import o from\"./PixelBlock.js\";class t{constructor(){this._workerThread=null,this._destroyed=!1}async initialize(){const e=await r(\"RasterWorker\");this._destroyed?e.close():this._workerThread=e}destroy(){this._destroyed=!0,this._workerThread&&(this._workerThread.close(),this._workerThread=null)}async convertVectorFieldData(r,t){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const n=await this._workerThread.invoke(\"convertVectorFieldData\",{pixelBlock:r.pixelBlock.toJSON(),type:r.dataType},t);return n?new o(n):null}computeStatisticsHistograms(r,o){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");return this._workerThread.invoke(\"computeStatisticsHistograms\",{pixelBlock:r.pixelBlock.toJSON()},o)}async decode(r,t){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const n=await this._workerThread.invoke(\"decode\",r,t);return n?new o(n):null}async symbolize(r,t){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const n={extent:r.extent?.toJSON(),pixelBlock:r.pixelBlock?.toJSON(),simpleStretchParams:r.simpleStretchParams,bandIds:r.bandIds},a=await this._workerThread.invoke(\"symbolize\",n,t);return a?new o(a):null}async updateSymbolizer(r,o){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const t=r?.rendererJSON?.histograms;await Promise.all(this._workerThread.broadcast(\"updateSymbolizer\",{symbolizerJSON:r.toJSON(),histograms:t},o))}async updateRasterFunction(r,o){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");await Promise.all(this._workerThread.broadcast(\"updateRasterFunction\",{rasterFunctionJSON:r.toJSON()},o))}async process(r,t){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const n=await this._workerThread.invoke(\"process\",{extent:r.extent?.toJSON(),primaryPixelSizes:r.primaryPixelSizes?.map((e=>null!=e?e.toJSON():null)),primaryPixelBlocks:r.primaryPixelBlocks.map((e=>null!=e?e.toJSON():null)),primaryRasterIds:r.primaryRasterIds},t);return n?new o(n):null}async stretch(r,t){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");if(!r?.pixelBlock)return null;const n={srcPixelBlock:r.pixelBlock.toJSON(),stretchParams:r.stretchParams},a=await this._workerThread.invoke(\"stretch\",n,t);return a?new o(a):null}async split(r,t){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");if(!r?.pixelBlock)return null;const n={srcPixelBlock:r.pixelBlock.toJSON(),tileSize:r.tileSize,maximumPyramidLevel:r.maximumPyramidLevel,useBilinear:r.useBilinear},a=await this._workerThread.invoke(\"split\",n,t);return a&&a.forEach(((e,r)=>{a.set(r,e?o.fromJSON(e):null)})),a}async clipTile(r,t){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");if(!r?.pixelBlock)return null;const n={...r,pixelBlock:r.pixelBlock.toJSON()},a=await this._workerThread.invoke(\"clipTile\",n,t);return a?o.fromJSON(a):null}async estimateStatisticsHistograms(r,o){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");if(!r?.pixelBlock)return null;const t={srcPixelBlock:r.pixelBlock.toJSON()};return await this._workerThread.invoke(\"estimateStatisticsHistograms\",t,o)}async mosaicAndTransform(r,t){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");if(!r?.srcPixelBlocks?.length)return{pixelBlock:null};const n={...r,srcPixelBlocks:r.srcPixelBlocks.map((e=>null!=e?e.toJSON():null))},a=await this._workerThread.invoke(\"mosaicAndTransform\",n,t);return{pixelBlock:a.pixelBlock?new o(a.pixelBlock):null,localNorthDirections:a.localNorthDirections}}async createFlowMesh(r,o){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const t={buffer:r.flowData.data.buffer,maskBuffer:r.flowData.mask.buffer,width:r.flowData.width,height:r.flowData.height},{meshType:n,simulationSettings:a}=r,i=await this._workerThread.invoke(\"createFlowMesh\",{meshType:n,flowData:t,simulationSettings:a},{...o,transferList:[t.buffer,t.maskBuffer]});return{vertexData:new Float32Array(i.vertexBuffer),indexData:new Uint32Array(i.indexBuffer)}}getProjectionOffsetGrid(r,o){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const t=null!=r.datumTransformation?r.datumTransformation.steps.map((e=>({wkid:e.wkid,wkt:e.wkt,isInverse:e.isInverse}))):null,n=null!=r.rasterTransform?r.rasterTransform.toJSON():null,a={projectedExtent:r.projectedExtent.toJSON(),srcBufferExtent:r.srcBufferExtent.toJSON(),pixelSize:r.pixelSize,hasWrapAround:r.hasWrapAround,spacing:r.spacing,datumTransformationSteps:t,rasterTransform:n,isAdaptive:r.isAdaptive,includeGCSGrid:r.includeGCSGrid};return this._workerThread.invoke(\"getProjectionOffsetGrid\",a,o)}}export{t as default};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}