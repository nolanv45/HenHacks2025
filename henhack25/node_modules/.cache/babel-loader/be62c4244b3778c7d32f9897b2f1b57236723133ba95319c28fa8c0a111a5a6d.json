{"ast":null,"code":"import { nothing as r } from \"../lit-html.js\";\nimport { directive as t, Directive as e } from \"../directive.js\";\nimport { setCommittedValue as s } from \"../directive-helpers.js\";\n/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst i = t(class extends e {\n  constructor() {\n    super(...arguments), this.key = r;\n  }\n  render(r, t) {\n    return this.key = r, t;\n  }\n  update(r, _ref) {\n    let [t, e] = _ref;\n    return t !== this.key && (s(r), this.key = t), e;\n  }\n});\nexport { i as keyed };","map":{"version":3,"names":["i","t","e","constructor","arguments","key","r","render","update","_ref","s","keyed"],"sources":["C:\\Users\\nolan\\tasks\\HenHacks2025\\henhack25\\node_modules\\lit-html\\src\\directives\\keyed.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {nothing} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  ChildPart,\n  DirectiveParameters,\n} from '../directive.js';\nimport {setCommittedValue} from '../directive-helpers.js';\n\nclass Keyed extends Directive {\n  key: unknown = nothing;\n\n  render(k: unknown, v: unknown) {\n    this.key = k;\n    return v;\n  }\n\n  override update(part: ChildPart, [k, v]: DirectiveParameters<this>) {\n    if (k !== this.key) {\n      // Clear the part before returning a value. The one-arg form of\n      // setCommittedValue sets the value to a sentinel which forces a\n      // commit the next render.\n      setCommittedValue(part);\n      this.key = k;\n    }\n    return v;\n  }\n}\n\n/**\n * Associates a renderable value with a unique key. When the key changes, the\n * previous DOM is removed and disposed before rendering the next value, even\n * if the value - such as a template - is the same.\n *\n * This is useful for forcing re-renders of stateful components, or working\n * with code that expects new data to generate new HTML elements, such as some\n * animation techniques.\n */\nexport const keyed = directive(Keyed);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {Keyed};\n"],"mappings":";;;;;;;;MA4CaA,CAAA,GAAQC,CAAA,CA7BrB,cAAoBC,CAAA;EAApBC,YAAA;IAAA,SAAAC,SAAA,GACE,KAAGC,GAAA,GAAYC,CAiBhB;EAAA;EAfCC,OAAOD,CAAA,EAAYL,CAAA;IAEjB,OADA,KAAKI,GAAA,GAAMC,CAAA,EACJL,CACR;EAAA;EAEQO,OAAOF,CAAA,EAAAG,IAAA,EAAqB;IAAA,IAArB,CAAkBR,CAAA,EAAGC,CAAA,IAAAO,IAAA;IAQnC,OAPIR,CAAA,KAAM,KAAKI,GAAA,KAIbK,CAAA,CAAkBJ,CAAA,GAClB,KAAKD,GAAA,GAAMJ,CAAA,GAENC,CACR;EAAA;AAAA;AAAA,SAAAF,CAAA,IAAAW,KAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}