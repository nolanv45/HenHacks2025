{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport { set as e } from \"../core/libs/gl-matrix-2/math/vec2.js\";\nimport { create as r } from \"../core/libs/gl-matrix-2/factories/vec2f64.js\";\nimport { ScreenSpacePass as t } from \"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl.js\";\nimport { ReadDepth as o } from \"../views/3d/webgl-engine/core/shaderLibrary/output/ReadDepth.glsl.js\";\nimport { CameraSpace as a } from \"../views/3d/webgl-engine/core/shaderLibrary/util/CameraSpace.glsl.js\";\nimport { Float2BindUniform as n } from \"../views/3d/webgl-engine/core/shaderModules/Float2BindUniform.js\";\nimport { Float2PassUniform as i } from \"../views/3d/webgl-engine/core/shaderModules/Float2PassUniform.js\";\nimport { FloatBindUniform as s } from \"../views/3d/webgl-engine/core/shaderModules/FloatBindUniform.js\";\nimport { FloatPassUniform as c } from \"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";\nimport { glsl as l } from \"../views/3d/webgl-engine/core/shaderModules/glsl.js\";\nimport { Texture2DPassUniform as u } from \"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";\nimport { ShaderBuilder as f } from \"../views/webgl/ShaderBuilder.js\";\nconst d = 16;\nfunction m() {\n  const r = new f(),\n    m = r.fragment;\n  return r.include(t), r.include(a), m.include(o), m.uniforms.add(new s(\"radius\", e => v(e.camera))).code.add(l`vec3 sphere[16] = vec3[16](\nvec3(0.186937, 0.0, 0.0),\nvec3(0.700542, 0.0, 0.0),\nvec3(-0.864858, -0.481795, -0.111713),\nvec3(-0.624773, 0.102853, -0.730153),\nvec3(-0.387172, 0.260319, 0.007229),\nvec3(-0.222367, -0.642631, -0.707697),\nvec3(-0.01336, -0.014956, 0.169662),\nvec3(0.122575, 0.1544, -0.456944),\nvec3(-0.177141, 0.85997, -0.42346),\nvec3(-0.131631, 0.814545, 0.524355),\nvec3(-0.779469, 0.007991, 0.624833),\nvec3(0.308092, 0.209288,0.35969),\nvec3(0.359331, -0.184533, -0.377458),\nvec3(0.192633, -0.482999, -0.065284),\nvec3(0.233538, 0.293706, -0.055139),\nvec3(0.417709, -0.386701, 0.442449)\n);\nfloat fallOffFunction(float vv, float vn, float bias) {\nfloat f = max(radius * radius - vv, 0.0);\nreturn f * f * f * max(vn - bias, 0.0);\n}`), m.code.add(l`float aoValueFromPositionsAndNormal(vec3 C, vec3 n_C, vec3 Q) {\nvec3 v = Q - C;\nfloat vv = dot(v, v);\nfloat vn = dot(normalize(v), n_C);\nreturn fallOffFunction(vv, vn, 0.1);\n}`), m.uniforms.add(new u(\"normalMap\", e => e.normalTexture), new u(\"depthMap\", e => e.depthTexture), new c(\"projScale\", e => e.projScale), new u(\"rnm\", e => e.noiseTexture), new i(\"rnmScale\", (r, t) => e(p, t.camera.fullWidth / r.noiseTexture.descriptor.width, t.camera.fullHeight / r.noiseTexture.descriptor.height)), new c(\"intensity\", e => e.intensity), new n(\"screenSize\", r => e(p, r.camera.fullWidth, r.camera.fullHeight))), r.outputs.add(\"fragOcclusion\", \"float\"), m.main.add(l`\n      float depth = depthFromTexture(depthMap, uv);\n\n      // Early out if depth is out of range, such as in the sky\n      if (depth >= 1.0 || depth <= 0.0) {\n        fragOcclusion = 1.0;\n        return;\n      }\n\n      // get the normal of current fragment\n      vec4 norm4 = texture(normalMap, uv);\n      if(norm4.a != 1.0) {\n        fragOcclusion = 1.0;\n        return;\n      }\n      vec3 norm = vec3(-1.0) + 2.0 * norm4.xyz;\n\n      float currentPixelDepth = linearizeDepth(depth);\n      vec3 currentPixelPos = reconstructPosition(gl_FragCoord.xy, currentPixelDepth);\n\n      float sum = 0.0;\n      vec3 tapPixelPos;\n\n      vec3 fres = normalize(2.0 * texture(rnm, uv * rnmScale).xyz - 1.0);\n\n      // note: the factor 2.0 should not be necessary, but makes ssao much nicer.\n      // bug or deviation from CE somewhere else?\n      float ps = projScale / (2.0 * currentPixelPos.z * zScale.x + zScale.y);\n\n      for(int i = 0; i < ${l.int(d)}; ++i) {\n        vec2 unitOffset = reflect(sphere[i], fres).xy;\n        vec2 offset = vec2(-unitOffset * radius * ps);\n\n        // don't use current or very nearby samples\n        if( abs(offset.x) < 2.0 || abs(offset.y) < 2.0){\n          continue;\n        }\n\n        vec2 tc = vec2(gl_FragCoord.xy + offset);\n        if (tc.x < 0.0 || tc.y < 0.0 || tc.x > screenSize.x || tc.y > screenSize.y) continue;\n        vec2 tcTap = tc / screenSize;\n        float occluderFragmentDepth = linearDepthFromTexture(depthMap, tcTap);\n\n        tapPixelPos = reconstructPosition(tc, occluderFragmentDepth);\n\n        sum += aoValueFromPositionsAndNormal(currentPixelPos, norm, tapPixelPos);\n      }\n\n      // output the result\n      float A = max(1.0 - sum * intensity / float(${l.int(d)}), 0.0);\n\n      // Anti-tone map to reduce contrast and drag dark region farther: (x^0.2 + 1.2 * x^4) / 2.2\n      A = (pow(A, 0.2) + 1.2 * A * A * A * A) / 2.2;\n\n      fragOcclusion = A;`), r;\n}\nfunction v(e) {\n  return Math.max(10, 20 * e.computeScreenPixelSizeAtDist(Math.abs(4 * e.relativeElevation)));\n}\nconst p = r(),\n  g = Object.freeze(Object.defineProperty({\n    __proto__: null,\n    build: m,\n    getRadius: v\n  }, Symbol.toStringTag, {\n    value: \"Module\"\n  }));\nexport { g as S, m as b, v as g };","map":{"version":3,"names":["set","e","create","r","ScreenSpacePass","t","ReadDepth","o","CameraSpace","a","Float2BindUniform","n","Float2PassUniform","i","FloatBindUniform","s","FloatPassUniform","c","glsl","l","Texture2DPassUniform","u","ShaderBuilder","f","d","m","fragment","include","uniforms","add","v","camera","code","normalTexture","depthTexture","projScale","noiseTexture","p","fullWidth","descriptor","width","fullHeight","height","intensity","outputs","main","int","Math","max","computeScreenPixelSizeAtDist","abs","relativeElevation","g","Object","freeze","defineProperty","__proto__","build","getRadius","Symbol","toStringTag","value","S","b"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/node_modules/@arcgis/core/chunks/SSAO.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{set as e}from\"../core/libs/gl-matrix-2/math/vec2.js\";import{create as r}from\"../core/libs/gl-matrix-2/factories/vec2f64.js\";import{ScreenSpacePass as t}from\"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl.js\";import{ReadDepth as o}from\"../views/3d/webgl-engine/core/shaderLibrary/output/ReadDepth.glsl.js\";import{CameraSpace as a}from\"../views/3d/webgl-engine/core/shaderLibrary/util/CameraSpace.glsl.js\";import{Float2BindUniform as n}from\"../views/3d/webgl-engine/core/shaderModules/Float2BindUniform.js\";import{Float2PassUniform as i}from\"../views/3d/webgl-engine/core/shaderModules/Float2PassUniform.js\";import{FloatBindUniform as s}from\"../views/3d/webgl-engine/core/shaderModules/FloatBindUniform.js\";import{FloatPassUniform as c}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as l}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{Texture2DPassUniform as u}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{ShaderBuilder as f}from\"../views/webgl/ShaderBuilder.js\";const d=16;function m(){const r=new f,m=r.fragment;return r.include(t),r.include(a),m.include(o),m.uniforms.add(new s(\"radius\",(e=>v(e.camera)))).code.add(l`vec3 sphere[16] = vec3[16](\nvec3(0.186937, 0.0, 0.0),\nvec3(0.700542, 0.0, 0.0),\nvec3(-0.864858, -0.481795, -0.111713),\nvec3(-0.624773, 0.102853, -0.730153),\nvec3(-0.387172, 0.260319, 0.007229),\nvec3(-0.222367, -0.642631, -0.707697),\nvec3(-0.01336, -0.014956, 0.169662),\nvec3(0.122575, 0.1544, -0.456944),\nvec3(-0.177141, 0.85997, -0.42346),\nvec3(-0.131631, 0.814545, 0.524355),\nvec3(-0.779469, 0.007991, 0.624833),\nvec3(0.308092, 0.209288,0.35969),\nvec3(0.359331, -0.184533, -0.377458),\nvec3(0.192633, -0.482999, -0.065284),\nvec3(0.233538, 0.293706, -0.055139),\nvec3(0.417709, -0.386701, 0.442449)\n);\nfloat fallOffFunction(float vv, float vn, float bias) {\nfloat f = max(radius * radius - vv, 0.0);\nreturn f * f * f * max(vn - bias, 0.0);\n}`),m.code.add(l`float aoValueFromPositionsAndNormal(vec3 C, vec3 n_C, vec3 Q) {\nvec3 v = Q - C;\nfloat vv = dot(v, v);\nfloat vn = dot(normalize(v), n_C);\nreturn fallOffFunction(vv, vn, 0.1);\n}`),m.uniforms.add(new u(\"normalMap\",(e=>e.normalTexture)),new u(\"depthMap\",(e=>e.depthTexture)),new c(\"projScale\",(e=>e.projScale)),new u(\"rnm\",(e=>e.noiseTexture)),new i(\"rnmScale\",((r,t)=>e(p,t.camera.fullWidth/r.noiseTexture.descriptor.width,t.camera.fullHeight/r.noiseTexture.descriptor.height))),new c(\"intensity\",(e=>e.intensity)),new n(\"screenSize\",(r=>e(p,r.camera.fullWidth,r.camera.fullHeight)))),r.outputs.add(\"fragOcclusion\",\"float\"),m.main.add(l`\n      float depth = depthFromTexture(depthMap, uv);\n\n      // Early out if depth is out of range, such as in the sky\n      if (depth >= 1.0 || depth <= 0.0) {\n        fragOcclusion = 1.0;\n        return;\n      }\n\n      // get the normal of current fragment\n      vec4 norm4 = texture(normalMap, uv);\n      if(norm4.a != 1.0) {\n        fragOcclusion = 1.0;\n        return;\n      }\n      vec3 norm = vec3(-1.0) + 2.0 * norm4.xyz;\n\n      float currentPixelDepth = linearizeDepth(depth);\n      vec3 currentPixelPos = reconstructPosition(gl_FragCoord.xy, currentPixelDepth);\n\n      float sum = 0.0;\n      vec3 tapPixelPos;\n\n      vec3 fres = normalize(2.0 * texture(rnm, uv * rnmScale).xyz - 1.0);\n\n      // note: the factor 2.0 should not be necessary, but makes ssao much nicer.\n      // bug or deviation from CE somewhere else?\n      float ps = projScale / (2.0 * currentPixelPos.z * zScale.x + zScale.y);\n\n      for(int i = 0; i < ${l.int(d)}; ++i) {\n        vec2 unitOffset = reflect(sphere[i], fres).xy;\n        vec2 offset = vec2(-unitOffset * radius * ps);\n\n        // don't use current or very nearby samples\n        if( abs(offset.x) < 2.0 || abs(offset.y) < 2.0){\n          continue;\n        }\n\n        vec2 tc = vec2(gl_FragCoord.xy + offset);\n        if (tc.x < 0.0 || tc.y < 0.0 || tc.x > screenSize.x || tc.y > screenSize.y) continue;\n        vec2 tcTap = tc / screenSize;\n        float occluderFragmentDepth = linearDepthFromTexture(depthMap, tcTap);\n\n        tapPixelPos = reconstructPosition(tc, occluderFragmentDepth);\n\n        sum += aoValueFromPositionsAndNormal(currentPixelPos, norm, tapPixelPos);\n      }\n\n      // output the result\n      float A = max(1.0 - sum * intensity / float(${l.int(d)}), 0.0);\n\n      // Anti-tone map to reduce contrast and drag dark region farther: (x^0.2 + 1.2 * x^4) / 2.2\n      A = (pow(A, 0.2) + 1.2 * A * A * A * A) / 2.2;\n\n      fragOcclusion = A;`),r}function v(e){return Math.max(10,20*e.computeScreenPixelSizeAtDist(Math.abs(4*e.relativeElevation)))}const p=r(),g=Object.freeze(Object.defineProperty({__proto__:null,build:m,getRadius:v},Symbol.toStringTag,{value:\"Module\"}));export{g as S,m as b,v as g};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAAOA,GAAG,IAAIC,CAAC,QAAK,uCAAuC;AAAC,SAAOC,MAAM,IAAIC,CAAC,QAAK,+CAA+C;AAAC,SAAOC,eAAe,IAAIC,CAAC,QAAK,qEAAqE;AAAC,SAAOC,SAAS,IAAIC,CAAC,QAAK,sEAAsE;AAAC,SAAOC,WAAW,IAAIC,CAAC,QAAK,sEAAsE;AAAC,SAAOC,iBAAiB,IAAIC,CAAC,QAAK,kEAAkE;AAAC,SAAOC,iBAAiB,IAAIC,CAAC,QAAK,kEAAkE;AAAC,SAAOC,gBAAgB,IAAIC,CAAC,QAAK,iEAAiE;AAAC,SAAOC,gBAAgB,IAAIC,CAAC,QAAK,iEAAiE;AAAC,SAAOC,IAAI,IAAIC,CAAC,QAAK,qDAAqD;AAAC,SAAOC,oBAAoB,IAAIC,CAAC,QAAK,qEAAqE;AAAC,SAAOC,aAAa,IAAIC,CAAC,QAAK,iCAAiC;AAAC,MAAMC,CAAC,GAAC,EAAE;AAAC,SAASC,CAACA,CAAA,EAAE;EAAC,MAAMtB,CAAC,GAAC,IAAIoB,CAAC,CAAD,CAAC;IAACE,CAAC,GAACtB,CAAC,CAACuB,QAAQ;EAAC,OAAOvB,CAAC,CAACwB,OAAO,CAACtB,CAAC,CAAC,EAACF,CAAC,CAACwB,OAAO,CAAClB,CAAC,CAAC,EAACgB,CAAC,CAACE,OAAO,CAACpB,CAAC,CAAC,EAACkB,CAAC,CAACG,QAAQ,CAACC,GAAG,CAAC,IAAId,CAAC,CAAC,QAAQ,EAAEd,CAAC,IAAE6B,CAAC,CAAC7B,CAAC,CAAC8B,MAAM,CAAE,CAAC,CAAC,CAACC,IAAI,CAACH,GAAG,CAACV,CAAC;AAC/sC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,EAACM,CAAC,CAACO,IAAI,CAACH,GAAG,CAACV,CAAC;AAChB;AACA;AACA;AACA;AACA,EAAE,CAAC,EAACM,CAAC,CAACG,QAAQ,CAACC,GAAG,CAAC,IAAIR,CAAC,CAAC,WAAW,EAAEpB,CAAC,IAAEA,CAAC,CAACgC,aAAc,CAAC,EAAC,IAAIZ,CAAC,CAAC,UAAU,EAAEpB,CAAC,IAAEA,CAAC,CAACiC,YAAa,CAAC,EAAC,IAAIjB,CAAC,CAAC,WAAW,EAAEhB,CAAC,IAAEA,CAAC,CAACkC,SAAU,CAAC,EAAC,IAAId,CAAC,CAAC,KAAK,EAAEpB,CAAC,IAAEA,CAAC,CAACmC,YAAa,CAAC,EAAC,IAAIvB,CAAC,CAAC,UAAU,EAAE,CAACV,CAAC,EAACE,CAAC,KAAGJ,CAAC,CAACoC,CAAC,EAAChC,CAAC,CAAC0B,MAAM,CAACO,SAAS,GAACnC,CAAC,CAACiC,YAAY,CAACG,UAAU,CAACC,KAAK,EAACnC,CAAC,CAAC0B,MAAM,CAACU,UAAU,GAACtC,CAAC,CAACiC,YAAY,CAACG,UAAU,CAACG,MAAM,CAAE,CAAC,EAAC,IAAIzB,CAAC,CAAC,WAAW,EAAEhB,CAAC,IAAEA,CAAC,CAAC0C,SAAU,CAAC,EAAC,IAAIhC,CAAC,CAAC,YAAY,EAAER,CAAC,IAAEF,CAAC,CAACoC,CAAC,EAAClC,CAAC,CAAC4B,MAAM,CAACO,SAAS,EAACnC,CAAC,CAAC4B,MAAM,CAACU,UAAU,CAAE,CAAC,CAAC,EAACtC,CAAC,CAACyC,OAAO,CAACf,GAAG,CAAC,eAAe,EAAC,OAAO,CAAC,EAACJ,CAAC,CAACoB,IAAI,CAAChB,GAAG,CAACV,CAAC;AAC3c;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2BA,CAAC,CAAC2B,GAAG,CAACtB,CAAC,CAAC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoDL,CAAC,CAAC2B,GAAG,CAACtB,CAAC,CAAC;AAC5D;AACA;AACA;AACA;AACA,yBAAyB,CAAC,EAACrB,CAAC;AAAA;AAAC,SAAS2B,CAACA,CAAC7B,CAAC,EAAC;EAAC,OAAO8C,IAAI,CAACC,GAAG,CAAC,EAAE,EAAC,EAAE,GAAC/C,CAAC,CAACgD,4BAA4B,CAACF,IAAI,CAACG,GAAG,CAAC,CAAC,GAACjD,CAAC,CAACkD,iBAAiB,CAAC,CAAC,CAAC;AAAA;AAAC,MAAMd,CAAC,GAAClC,CAAC,CAAC,CAAC;EAACiD,CAAC,GAACC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACE,cAAc,CAAC;IAACC,SAAS,EAAC,IAAI;IAACC,KAAK,EAAChC,CAAC;IAACiC,SAAS,EAAC5B;EAAC,CAAC,EAAC6B,MAAM,CAACC,WAAW,EAAC;IAACC,KAAK,EAAC;EAAQ,CAAC,CAAC,CAAC;AAAC,SAAOT,CAAC,IAAIU,CAAC,EAACrC,CAAC,IAAIsC,CAAC,EAACjC,CAAC,IAAIsB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}