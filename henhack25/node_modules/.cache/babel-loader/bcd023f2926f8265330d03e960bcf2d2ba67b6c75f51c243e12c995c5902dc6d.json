{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nolan\\\\tasks\\\\HenHacks2025\\\\henhack25\\\\src\\\\Map.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"@arcgis/core/assets/esri/themes/light/main.css\";\nimport MapView from \"@arcgis/core/views/MapView\";\nimport WebMap from \"@arcgis/core/WebMap\";\nimport PopupTemplate from \"@arcgis/core/PopupTemplate\";\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport { Button } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n; // Replace with the actual library name\n\nexport const MapComponent = ({\n  goToHomePage\n}) => {\n  _s();\n  const mapDiv = useRef(null);\n  const [recipesArray, setRecipesArray] = useState([]);\n  async function handleSubmit() {\n    try {\n      const apiKey = \"AIzaSyDR-VHD19VDVq_t8ORrz4SCctc5Z_Rc6uQ\";\n      if (!apiKey) {\n        console.error(\"API key not found in environment variables.\");\n        return;\n      }\n      const genAI = new GoogleGenerativeAI(apiKey);\n      const model = genAI.getGenerativeModel({\n        model: \"gemini-2.0-flash\"\n      });\n      const prompt = `Generate a recipe from the medieval period of each region [Wales, Venetian Areas, Sweden, Sultanate of Iconium, Serbs, Principality of Russia, Principality of Pomerania, Principality of Antioch, Pomerania, Papal States, Norway, Latvians, Kingdom of Sicily, Kingdom of Scotland, Kingdom of Portugal, Kingdom of Poland, Kingdom of Navarre, Kingdom of Leon, Kingdom of Jerusalem, Kingdom of Italy, Kingdom of Hungary, Kingdom of Granada, Kingdom of Georgia, Kingdom of France, Kingdom of England, Kingdom of Cyprus, Kingdom of Castille, Kingdom of Burgundy, Kingdom of Bohemia, Khanate of the Golden Horde, Khanate of the Golden Hor, Ireland, German Empire, Duchy of Edessa, Denmark, Crown of Aragon, Byzantine Empire, Bulgaria, Ayyubid Dynasty, Almohad Dynasty] using the following ingredients:.\n    Format the response as an individual valid JSON with the following keys:\n    {\n      \"Region\": \"Region name\",\n      \"time\": \"Estimated preparation and cooking time\",\n      \"ingredients\": [\"List of ingredients with quantities\"],\n      \"instructions\": [\"Step 1\", \"Step 2\", \"Step 3\", ...],\n      \"macronutrients\": {\n        \"calories\": \"value\",\n        \"protein\": \"value\",\n        \"carbs\": \"value\",\n        \"fat\": \"value\"\n      }\n    }\n    Return only the JSON objects without extra formatting.`;\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const text = await response.text(); // Await the text response\n\n      // Ensure the response text is valid JSON\n      const jsonStartIndex = text.indexOf('{');\n      const jsonEndIndex = text.lastIndexOf('}') + 1;\n      const jsonString = text.substring(jsonStartIndex, jsonEndIndex);\n      const recipesData = JSON.parse(jsonString);\n\n      // Assuming you want to store multiple recipes\n      setRecipesArray(recipesData);\n    } catch (error) {\n      console.error(\"Error generating recipe:\", error);\n    }\n  }\n  useEffect(() => {\n    if (mapDiv.current) {\n      const webmap = new WebMap({\n        portalItem: {\n          id: \"047cb3b3562f4760a2f5c3b05d83d4fd\"\n        }\n      });\n      const view = new MapView({\n        map: webmap,\n        container: mapDiv.current,\n        center: [10, 50],\n        zoom: 4\n      });\n      view.when(() => {\n        console.log(\"Map and View are ready\");\n\n        // Loop through layers in the WebMap and find the FeatureLayer\n        webmap.layers.forEach(layer => {\n          if (layer.type === \"feature\") {\n            const featureLayer = layer;\n\n            // Define a PopupTemplate (if it's not already defined)\n            featureLayer.popupTemplate = new PopupTemplate({\n              title: `{REGIONNAME}`,\n              // Use the field of your feature layer\n              content: \"{Description}\" // Content can be adjusted to show relevant fields\n            });\n\n            // Add click event to the view for interaction\n            view.on(\"click\", event => {\n              view.hitTest(event).then(response => {\n                var _response$results$;\n                const graphic = (_response$results$ = response.results[0]) === null || _response$results$ === void 0 ? void 0 : _response$results$.graphic;\n                if (graphic) {\n                  const regionName = graphic.attributes.Name; // Assuming 'Name' is the field for the region's name\n                  const regionDescription = graphic.attributes.Description;\n                  // Open the popup for the clicked feature\n\n                  if (view.popup) {\n                    view.popup.open({\n                      title: regionName,\n                      content: regionDescription,\n                      location: event.mapPoint // Show popup at clicked point\n                    });\n                  }\n                }\n              });\n            });\n            const fields = featureLayer.fields;\n            console.log(\"Layer Fields: \", fields);\n          }\n        });\n      }, error => {\n        console.error(\"Error loading WebMap: \", error);\n      });\n      return () => {\n        if (mapDiv.current) {\n          mapDiv.current.innerHTML = \"\";\n        }\n      };\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"header\",\n      children: \"Explore the Recipes of Europe!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: goToHomePage,\n      className: \"submitAns\",\n      children: \"Go Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapDiv,\n      style: {\n        height: \"100vh\",\n        width: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 7\n  }, this);\n};\n_s(MapComponent, \"bo9ip0Zlc40q6NNYY4Tp2iUFujQ=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useRef","useState","MapView","WebMap","PopupTemplate","GoogleGenerativeAI","Button","jsxDEV","_jsxDEV","MapComponent","goToHomePage","_s","mapDiv","recipesArray","setRecipesArray","handleSubmit","apiKey","console","error","genAI","model","getGenerativeModel","prompt","result","generateContent","response","text","jsonStartIndex","indexOf","jsonEndIndex","lastIndexOf","jsonString","substring","recipesData","JSON","parse","current","webmap","portalItem","id","view","map","container","center","zoom","when","log","layers","forEach","layer","type","featureLayer","popupTemplate","title","content","on","event","hitTest","then","_response$results$","graphic","results","regionName","attributes","Name","regionDescription","Description","popup","open","location","mapPoint","fields","innerHTML","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","style","height","width","_c","$RefreshReg$"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/src/Map.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState, JSX } from \"react\";\r\nimport \"@arcgis/core/assets/esri/themes/light/main.css\";\r\nimport MapView from \"@arcgis/core/views/MapView\";\r\nimport WebMap from \"@arcgis/core/WebMap\";\r\nimport FeatureLayer from \"@arcgis/core/layers/FeatureLayer\";\r\nimport Graphic from \"@arcgis/core/Graphic\";\r\nimport PopupTemplate from \"@arcgis/core/PopupTemplate\";\r\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";import { Button } from \"react-bootstrap\";\r\n; // Replace with the actual library name\r\n\r\n\r\ninterface MapPageProps {\r\n    goToHomePage: () => void;\r\n  }\r\n\r\n  interface Recipe {\r\n    Region: string;\r\n    time: string;\r\n    ingredients: string[];\r\n    instructions: string[];\r\n    macronutrients: {\r\n      calories: string;\r\n      protein: string;\r\n      carbs: string;\r\n      fat: string;\r\n    };\r\n  }\r\n\r\n\r\nexport const MapComponent = ({ goToHomePage }: MapPageProps): JSX.Element => {\r\n  const mapDiv = useRef<HTMLDivElement>(null);\r\n  const [recipesArray, setRecipesArray] = useState<Recipe[]>([]);\r\n    \r\n\r\n\r\n\r\nasync function handleSubmit() {\r\n    try {\r\n      const apiKey = \"AIzaSyDR-VHD19VDVq_t8ORrz4SCctc5Z_Rc6uQ\";\r\n      if (!apiKey) {\r\n        console.error(\"API key not found in environment variables.\");\r\n        return;\r\n      }\r\n\r\n      const genAI = new GoogleGenerativeAI(apiKey);\r\n      const model = genAI.getGenerativeModel({ model: \"gemini-2.0-flash\" });\r\n      const prompt = `Generate a recipe from the medieval period of each region [Wales, Venetian Areas, Sweden, Sultanate of Iconium, Serbs, Principality of Russia, Principality of Pomerania, Principality of Antioch, Pomerania, Papal States, Norway, Latvians, Kingdom of Sicily, Kingdom of Scotland, Kingdom of Portugal, Kingdom of Poland, Kingdom of Navarre, Kingdom of Leon, Kingdom of Jerusalem, Kingdom of Italy, Kingdom of Hungary, Kingdom of Granada, Kingdom of Georgia, Kingdom of France, Kingdom of England, Kingdom of Cyprus, Kingdom of Castille, Kingdom of Burgundy, Kingdom of Bohemia, Khanate of the Golden Horde, Khanate of the Golden Hor, Ireland, German Empire, Duchy of Edessa, Denmark, Crown of Aragon, Byzantine Empire, Bulgaria, Ayyubid Dynasty, Almohad Dynasty] using the following ingredients:.\r\n    Format the response as an individual valid JSON with the following keys:\r\n    {\r\n      \"Region\": \"Region name\",\r\n      \"time\": \"Estimated preparation and cooking time\",\r\n      \"ingredients\": [\"List of ingredients with quantities\"],\r\n      \"instructions\": [\"Step 1\", \"Step 2\", \"Step 3\", ...],\r\n      \"macronutrients\": {\r\n        \"calories\": \"value\",\r\n        \"protein\": \"value\",\r\n        \"carbs\": \"value\",\r\n        \"fat\": \"value\"\r\n      }\r\n    }\r\n    Return only the JSON objects without extra formatting.`;\r\n\r\n      const result = await model.generateContent(prompt);\r\n      const response = await result.response;\r\n      const text = await response.text(); // Await the text response\r\n\r\n    // Ensure the response text is valid JSON\r\n    const jsonStartIndex = text.indexOf('{');\r\n    const jsonEndIndex = text.lastIndexOf('}') + 1;\r\n    const jsonString = text.substring(jsonStartIndex, jsonEndIndex);\r\n\r\n    const recipesData = JSON.parse(jsonString);\r\n  \r\n    // Assuming you want to store multiple recipes\r\n    setRecipesArray(recipesData)\r\n\r\n\r\n    } catch (error) {\r\n      console.error(\"Error generating recipe:\", error);\r\n    }\r\n  }\r\n\r\n    useEffect(() => {\r\n      if (mapDiv.current) {\r\n\r\n      const webmap = new WebMap({\r\n        portalItem: { id: \"047cb3b3562f4760a2f5c3b05d83d4fd\" }\r\n      });\r\n\r\n      const view = new MapView({\r\n        map: webmap,\r\n        container: mapDiv.current,\r\n        center: [10, 50], \r\n        zoom: 4, \r\n      });\r\n\r\n      view.when(() => {\r\n        console.log(\"Map and View are ready\");\r\n\r\n        // Loop through layers in the WebMap and find the FeatureLayer\r\n        webmap.layers.forEach((layer: any) => {\r\n          if (layer.type === \"feature\") {\r\n            const featureLayer = layer as FeatureLayer;\r\n        \r\n              \r\n            // Define a PopupTemplate (if it's not already defined)\r\n            featureLayer.popupTemplate = new PopupTemplate({\r\n              title: `{REGIONNAME}`, // Use the field of your feature layer\r\n              content: \"{Description}\", // Content can be adjusted to show relevant fields\r\n            });\r\n\r\n            // Add click event to the view for interaction\r\n            view.on(\"click\", (event: any) => {\r\n              view.hitTest(event).then((response: any) => {\r\n                const graphic = response.results[0]?.graphic;\r\n                if (graphic) {\r\n                    const regionName = graphic.attributes.Name; // Assuming 'Name' is the field for the region's name\r\n                    const regionDescription = graphic.attributes.Description;\r\n                  // Open the popup for the clicked feature\r\n\r\n                  if (view.popup) {\r\n                    view.popup.open({\r\n                      title: regionName,\r\n                      content: regionDescription,\r\n                      location: event.mapPoint, // Show popup at clicked point\r\n                    });\r\n                  }\r\n                }\r\n              });\r\n            });\r\n            const fields = featureLayer.fields;\r\n            console.log(\"Layer Fields: \", fields)\r\n          }\r\n          \r\n        });\r\n      }, (error: any) => {\r\n        console.error(\"Error loading WebMap: \", error);\r\n      });\r\n\r\n      return () => {\r\n        if (mapDiv.current) {\r\n          mapDiv.current.innerHTML = \"\";\r\n        }\r\n      };\r\n    }\r\n  }, []);\r\n\r\n\r\n\r\n\r\n \r\n  return (\r\n      <div>\r\n        <h2 className=\"header\">Explore the Recipes of Europe!</h2>\r\n        <Button onClick={goToHomePage} className=\"submitAns\">\r\n          Go Home\r\n        </Button>\r\n          <div ref={mapDiv} style={{ height: \"100vh\", width: \"100%\" }} />\r\n          \r\n          \r\n      </div>\r\n  );\r\n};\r\n\r\nexport default MapComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}