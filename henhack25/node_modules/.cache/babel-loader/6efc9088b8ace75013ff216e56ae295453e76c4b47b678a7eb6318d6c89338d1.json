{"ast":null,"code":"import { noChange as t } from \"../lit-html.js\";\nimport { directive as s, Directive as i, PartType as r } from \"../directive.js\";\n/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst e = s(class extends i {\n  constructor(t) {\n    if (super(t), t.type !== r.ATTRIBUTE || \"class\" !== t.name || t.strings?.length > 2) throw Error(\"`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.\");\n  }\n  render(t) {\n    return \" \" + Object.keys(t).filter(s => t[s]).join(\" \") + \" \";\n  }\n  update(s, _ref) {\n    let [i] = _ref;\n    if (void 0 === this.st) {\n      this.st = new Set(), void 0 !== s.strings && (this.nt = new Set(s.strings.join(\" \").split(/\\s/).filter(t => \"\" !== t)));\n      for (const t in i) i[t] && !this.nt?.has(t) && this.st.add(t);\n      return this.render(i);\n    }\n    const r = s.element.classList;\n    for (const t of this.st) t in i || (r.remove(t), this.st.delete(t));\n    for (const t in i) {\n      const s = !!i[t];\n      s === this.st.has(t) || this.nt?.has(t) || (s ? (r.add(t), this.st.add(t)) : (r.remove(t), this.st.delete(t)));\n    }\n    return t;\n  }\n});\nexport { e as classMap };","map":{"version":3,"names":["e","s","i","constructor","t","type","r","ATTRIBUTE","name","strings","length","Error","render","Object","keys","filter","join","update","_ref","st","Set","nt","split","has","add","element","classList","remove","delete","classMap"],"sources":["C:\\Users\\nolan\\tasks\\HenHacks2025\\henhack25\\node_modules\\lit-html\\src\\directives\\class-map.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {AttributePart, noChange} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  DirectiveParameters,\n  PartInfo,\n  PartType,\n} from '../directive.js';\n\n/**\n * A key-value set of class names to truthy values.\n */\nexport interface ClassInfo {\n  readonly [name: string]: string | boolean | number;\n}\n\nclass ClassMapDirective extends Directive {\n  /**\n   * Stores the ClassInfo object applied to a given AttributePart.\n   * Used to unset existing values when a new ClassInfo object is applied.\n   */\n  private _previousClasses?: Set<string>;\n  private _staticClasses?: Set<string>;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (\n      partInfo.type !== PartType.ATTRIBUTE ||\n      partInfo.name !== 'class' ||\n      (partInfo.strings?.length as number) > 2\n    ) {\n      throw new Error(\n        '`classMap()` can only be used in the `class` attribute ' +\n          'and must be the only part in the attribute.'\n      );\n    }\n  }\n\n  render(classInfo: ClassInfo) {\n    // Add spaces to ensure separation from static classes\n    return (\n      ' ' +\n      Object.keys(classInfo)\n        .filter((key) => classInfo[key])\n        .join(' ') +\n      ' '\n    );\n  }\n\n  override update(part: AttributePart, [classInfo]: DirectiveParameters<this>) {\n    // Remember dynamic classes on the first render\n    if (this._previousClasses === undefined) {\n      this._previousClasses = new Set();\n      if (part.strings !== undefined) {\n        this._staticClasses = new Set(\n          part.strings\n            .join(' ')\n            .split(/\\s/)\n            .filter((s) => s !== '')\n        );\n      }\n      for (const name in classInfo) {\n        if (classInfo[name] && !this._staticClasses?.has(name)) {\n          this._previousClasses.add(name);\n        }\n      }\n      return this.render(classInfo);\n    }\n\n    const classList = part.element.classList;\n\n    // Remove old classes that no longer apply\n    for (const name of this._previousClasses) {\n      if (!(name in classInfo)) {\n        classList.remove(name);\n        this._previousClasses!.delete(name);\n      }\n    }\n\n    // Add or remove classes based on their classMap value\n    for (const name in classInfo) {\n      // We explicitly want a loose truthy check of `value` because it seems\n      // more convenient that '' and 0 are skipped.\n      const value = !!classInfo[name];\n      if (\n        value !== this._previousClasses.has(name) &&\n        !this._staticClasses?.has(name)\n      ) {\n        if (value) {\n          classList.add(name);\n          this._previousClasses.add(name);\n        } else {\n          classList.remove(name);\n          this._previousClasses.delete(name);\n        }\n      }\n    }\n    return noChange;\n  }\n}\n\n/**\n * A directive that applies dynamic CSS classes.\n *\n * This must be used in the `class` attribute and must be the only part used in\n * the attribute. It takes each property in the `classInfo` argument and adds\n * the property name to the element's `classList` if the property value is\n * truthy; if the property value is falsy, the property name is removed from\n * the element's `class`.\n *\n * For example `{foo: bar}` applies the class `foo` if the value of `bar` is\n * truthy.\n *\n * @param classInfo\n */\nexport const classMap = directive(ClassMapDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {ClassMapDirective};\n"],"mappings":";;;;;;;MAyHaA,CAAA,GAAWC,CAAA,CAnGxB,cAAgCC,CAAA;EAQ9BC,YAAYC,CAAA;IAEV,IADA,MAAMA,CAAA,GAEJA,CAAA,CAASC,IAAA,KAASC,CAAA,CAASC,SAAA,IACT,YAAlBH,CAAA,CAASI,IAAA,IACRJ,CAAA,CAASK,OAAA,EAASC,MAAA,GAAoB,GAEvC,MAAUC,KAAA,CACR,qGAIL;EAAA;EAEDC,OAAOR,CAAA;IAEL,OACE,MACAS,MAAA,CAAOC,IAAA,CAAKV,CAAA,EACTW,MAAA,CAAQd,CAAA,IAAQG,CAAA,CAAUH,CAAA,GAC1Be,IAAA,CAAK,OACR,GAEH;EAAA;EAEQC,OAAOhB,CAAA,EAAAiB,IAAA,EAAsB;IAAA,IAAtB,CAAsBhB,CAAA,IAAAgB,IAAA;IAEpC,SAA8B,MAA1B,KAAKC,EAAA,EAAgC;MACvC,KAAKA,EAAA,GAAmB,IAAIC,GAAA,SACP,MAAjBnB,CAAA,CAAKQ,OAAA,KACP,KAAKY,EAAA,GAAiB,IAAID,GAAA,CACxBnB,CAAA,CAAKQ,OAAA,CACFO,IAAA,CAAK,KACLM,KAAA,CAAM,MACNP,MAAA,CAAQX,CAAA,IAAY,OAANA,CAAA;MAGrB,KAAK,MAAMA,CAAA,IAAQF,CAAA,EACbA,CAAA,CAAUE,CAAA,MAAU,KAAKiB,EAAA,EAAgBE,GAAA,CAAInB,CAAA,KAC/C,KAAKe,EAAA,CAAiBK,GAAA,CAAIpB,CAAA;MAG9B,OAAO,KAAKQ,MAAA,CAAOV,CAAA,CACpB;IAAA;IAED,MAAMI,CAAA,GAAYL,CAAA,CAAKwB,OAAA,CAAQC,SAAA;IAG/B,KAAK,MAAMtB,CAAA,IAAQ,KAAKe,EAAA,EAChBf,CAAA,IAAQF,CAAA,KACZI,CAAA,CAAUqB,MAAA,CAAOvB,CAAA,GACjB,KAAKe,EAAA,CAAkBS,MAAA,CAAOxB,CAAA;IAKlC,KAAK,MAAMA,CAAA,IAAQF,CAAA,EAAW;MAG5B,MAAMD,CAAA,KAAUC,CAAA,CAAUE,CAAA;MAExBH,CAAA,KAAU,KAAKkB,EAAA,CAAiBI,GAAA,CAAInB,CAAA,KACnC,KAAKiB,EAAA,EAAgBE,GAAA,CAAInB,CAAA,MAEtBH,CAAA,IACFK,CAAA,CAAUkB,GAAA,CAAIpB,CAAA,GACd,KAAKe,EAAA,CAAiBK,GAAA,CAAIpB,CAAA,MAE1BE,CAAA,CAAUqB,MAAA,CAAOvB,CAAA,GACjB,KAAKe,EAAA,CAAiBS,MAAA,CAAOxB,CAAA,GAGlC;IAAA;IACD,OAAOA,CACR;EAAA;AAAA;AAAA,SAAAJ,CAAA,IAAA6B,QAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}