{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport { FoamColor as e } from \"./FoamRendering.glsl.js\";\nimport { Gamma as o } from \"./Gamma.glsl.js\";\nimport { PhysicallyBasedRenderingWater as t } from \"./PhysicallyBasedRendering.glsl.js\";\nimport { distanceFadeStart as r, distanceFadeEnd as i } from \"./ScreenSpaceConstants.js\";\nimport { ScreenSpaceReflections as n } from \"./ScreenSpaceReflections.glsl.js\";\nimport { CloudsParallaxShading as a } from \"../util/CloudsParallaxShading.glsl.js\";\nimport { FloatBindUniform as l } from \"../../shaderModules/FloatBindUniform.js\";\nimport { glsl as d } from \"../../shaderModules/glsl.js\";\nimport { Matrix4BindUniform as c } from \"../../shaderModules/Matrix4BindUniform.js\";\nimport { Texture2DBindUniform as s } from \"../../shaderModules/Texture2DBindUniform.js\";\nimport { ToneMapping as f } from \"../../../shaders/ToneMapping.glsl.js\";\nfunction m(m, v) {\n  m.include(t, v), m.include(o), m.include(e), v.cloudReflections && m.include(a), m.include(n, v);\n  const u = m.fragment;\n  u.include(f), u.constants.add(\"fresnelSky\", \"vec3\", [.02, 1, 15]), u.constants.add(\"fresnelMaterial\", \"vec2\", [.02, .1]), u.constants.add(\"roughness\", \"float\", .015), u.constants.add(\"foamIntensityExternal\", \"float\", 1.7), u.constants.add(\"ssrIntensity\", \"float\", .65), u.constants.add(\"ssrHeightFadeStart\", \"float\", r), u.constants.add(\"ssrHeightFadeEnd\", \"float\", i), u.constants.add(\"waterDiffusion\", \"float\", .92), u.constants.add(\"waterSeaColorMod\", \"float\", .8), u.constants.add(\"correctionViewingPowerFactor\", \"float\", .4), u.constants.add(\"skyZenitColor\", \"vec3\", [.52, .68, .9]), u.constants.add(\"skyColor\", \"vec3\", [.67, .79, .9]), u.constants.add(\"cloudFresnelModifier\", \"vec2\", [1.2, .01]), u.code.add(d`PBRShadingWater shadingInfo;\nvec3 getSkyGradientColor(in float cosTheta, in vec3 horizon, in vec3 zenit) {\nfloat exponent = pow((1.0 - cosTheta), fresnelSky[2]);\nreturn mix(zenit, horizon, exponent);\n}`), u.uniforms.add(new l(\"lightingSpecularStrength\", e => e.lighting.mainLight.specularStrength), new l(\"lightingEnvironmentStrength\", e => e.lighting.mainLight.environmentStrength)), u.code.add(d`vec3 getSeaColor(in vec3 n, in vec3 v, in vec3 l, vec3 color, in vec3 lightIntensity, in vec3 localUp, in float shadow, float foamIntensity, vec3 viewPosition, vec3 position) {\nfloat reflectionHit = 0.0;\nfloat reflectionHitDiffused = 0.0;\nvec3 seaWaterColor = linearizeGamma(color);\nvec3 h = normalize(l + v);\nshadingInfo.NdotV = clamp(dot(n, v), 0.001, 1.0);\nshadingInfo.VdotN = clamp(dot(v, n), 0.001, 1.0);\nshadingInfo.NdotH = clamp(dot(n, h), 0.0, 1.0);\nshadingInfo.VdotH = clamp(dot(v, h), 0.0, 1.0);\nshadingInfo.LdotH = clamp(dot(l, h), 0.0, 1.0);\nfloat upDotV = max(dot(localUp,v), 0.0);\nvec3 skyHorizon = linearizeGamma(skyColor);\nvec3 skyZenit = linearizeGamma(skyZenitColor);\nvec3 skyColor = getSkyGradientColor(upDotV, skyHorizon, skyZenit );\nfloat upDotL = max(dot(localUp,l),0.0);\nfloat daytimeMod = 0.1 + upDotL * 0.9;\nskyColor *= daytimeMod;\nfloat shadowModifier = clamp(shadow, 0.8, 1.0);\nvec3 fresnelModifier = fresnelReflection(shadingInfo.VdotN, vec3(fresnelSky[0]), fresnelSky[1]);\nvec3 reflSky = lightingEnvironmentStrength * fresnelModifier * skyColor * shadowModifier;\nvec3 reflSea = seaWaterColor * mix(skyColor, upDotL * lightIntensity * LIGHT_NORMALIZATION, 2.0 / 3.0) * shadowModifier;\nvec3 specular = vec3(0.0);\nif(upDotV > 0.0 && upDotL > 0.0) {\nvec3 specularSun = brdfSpecularWater(shadingInfo, roughness, vec3(fresnelMaterial[0]), fresnelMaterial[1]);\nvec3 incidentLight = lightIntensity * LIGHT_NORMALIZATION * shadow;\nfloat NdotL = clamp(dot(n, l), 0.0, 1.0);\nspecular = lightingSpecularStrength * NdotL * incidentLight * specularSun;\n}\nvec3 foam = vec3(0.0);\nif(upDotV > 0.0) {\nfoam = foamIntensity2FoamColor(foamIntensityExternal, foamIntensity, skyZenitColor, daytimeMod);\n}\nfloat correctionViewingFactor = pow(max(dot(v, localUp), 0.0), correctionViewingPowerFactor);\nvec3 normalCorrectedClouds = mix(localUp, n, correctionViewingFactor);\nvec3 reflectedWorld = normalize(reflect(-v, normalCorrectedClouds));`), v.cloudReflections && u.uniforms.add(new l(\"cloudsOpacity\", e => e.clouds.opacity)).code.add(d`vec4 cloudsColor = renderClouds(reflectedWorld, position);\ncloudsColor.a = 1.0 - cloudsColor.a;\ncloudsColor = pow(cloudsColor, vec4(GAMMA));\ncloudsColor *= clamp(fresnelModifier.y * cloudFresnelModifier[0] - cloudFresnelModifier[1], 0.0, 1.0) * cloudsOpacity;`), v.screenSpaceReflections ? u.uniforms.add(new c(\"view\", e => e.camera.viewMatrix), new s(\"lastFrameColorTexture\", e => e.ssr.lastFrameColor?.getTexture()), new l(\"fadeFactorSSR\", e => e.ssr.fadeFactor)).code.add(d`vec3 viewDir = normalize(viewPosition);\nvec4 viewNormalVectorCoordinate = view * vec4(n, 0.0);\nvec3 viewNormal = normalize(viewNormalVectorCoordinate.xyz);\nvec4 viewUp = view * vec4(localUp, 0.0);\nvec3 viewNormalCorrectedSSR = mix(viewUp.xyz, viewNormal, correctionViewingFactor);\nvec3 reflected = normalize(reflect(viewDir, viewNormalCorrectedSSR));\nvec3 hitCoordinate = screenSpaceIntersection(reflected, viewPosition, viewDir, viewUp.xyz);\nvec3 reflectedColor = vec3(0.0);\nif (hitCoordinate.z > 0.0)\n{\nvec2 reprojectedCoordinate = reprojectionCoordinate(hitCoordinate);\nvec2 dCoords = smoothstep(0.3, 0.6, abs(vec2(0.5, 0.5) - hitCoordinate.xy));\nfloat heightMod = smoothstep(ssrHeightFadeEnd, ssrHeightFadeStart, -viewPosition.z);\nreflectionHit = clamp(1.0 - (1.3 * dCoords.y), 0.0, 1.0) * heightMod * fadeFactorSSR;\nreflectionHitDiffused = waterDiffusion * reflectionHit;\nreflectedColor = linearizeGamma(texture(lastFrameColorTexture, reprojectedCoordinate).xyz) *\nreflectionHitDiffused * fresnelModifier.y * ssrIntensity;\n}\nfloat seaColorMod =  mix(waterSeaColorMod, waterSeaColorMod * 0.5, reflectionHitDiffused);\nvec3 waterRenderedColor = tonemapACES((1.0 - reflectionHitDiffused) * reflSky + reflectedColor +\nreflSea * seaColorMod + specular + foam);`) : u.code.add(d`vec3 waterRenderedColor = tonemapACES(reflSky + reflSea * waterSeaColorMod + specular + foam);`), v.cloudReflections ? v.screenSpaceReflections ? u.code.add(d`return waterRenderedColor * (1.0 - (1.0 - reflectionHit) * cloudsColor.a) + (1.0 - reflectionHit) * cloudsColor.xyz;\n}`) : u.code.add(d`return waterRenderedColor * (1.0 - cloudsColor.a) + cloudsColor.xyz;\n}`) : u.code.add(d`return waterRenderedColor;\n}`);\n}\nexport { m as Water };","map":{"version":3,"names":["FoamColor","e","Gamma","o","PhysicallyBasedRenderingWater","t","distanceFadeStart","r","distanceFadeEnd","i","ScreenSpaceReflections","n","CloudsParallaxShading","a","FloatBindUniform","l","glsl","d","Matrix4BindUniform","c","Texture2DBindUniform","s","ToneMapping","f","m","v","include","cloudReflections","u","fragment","constants","add","code","uniforms","lighting","mainLight","specularStrength","environmentStrength","clouds","opacity","screenSpaceReflections","camera","viewMatrix","ssr","lastFrameColor","getTexture","fadeFactor","Water"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/Water.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{FoamColor as e}from\"./FoamRendering.glsl.js\";import{Gamma as o}from\"./Gamma.glsl.js\";import{PhysicallyBasedRenderingWater as t}from\"./PhysicallyBasedRendering.glsl.js\";import{distanceFadeStart as r,distanceFadeEnd as i}from\"./ScreenSpaceConstants.js\";import{ScreenSpaceReflections as n}from\"./ScreenSpaceReflections.glsl.js\";import{CloudsParallaxShading as a}from\"../util/CloudsParallaxShading.glsl.js\";import{FloatBindUniform as l}from\"../../shaderModules/FloatBindUniform.js\";import{glsl as d}from\"../../shaderModules/glsl.js\";import{Matrix4BindUniform as c}from\"../../shaderModules/Matrix4BindUniform.js\";import{Texture2DBindUniform as s}from\"../../shaderModules/Texture2DBindUniform.js\";import{ToneMapping as f}from\"../../../shaders/ToneMapping.glsl.js\";function m(m,v){m.include(t,v),m.include(o),m.include(e),v.cloudReflections&&m.include(a),m.include(n,v);const u=m.fragment;u.include(f),u.constants.add(\"fresnelSky\",\"vec3\",[.02,1,15]),u.constants.add(\"fresnelMaterial\",\"vec2\",[.02,.1]),u.constants.add(\"roughness\",\"float\",.015),u.constants.add(\"foamIntensityExternal\",\"float\",1.7),u.constants.add(\"ssrIntensity\",\"float\",.65),u.constants.add(\"ssrHeightFadeStart\",\"float\",r),u.constants.add(\"ssrHeightFadeEnd\",\"float\",i),u.constants.add(\"waterDiffusion\",\"float\",.92),u.constants.add(\"waterSeaColorMod\",\"float\",.8),u.constants.add(\"correctionViewingPowerFactor\",\"float\",.4),u.constants.add(\"skyZenitColor\",\"vec3\",[.52,.68,.9]),u.constants.add(\"skyColor\",\"vec3\",[.67,.79,.9]),u.constants.add(\"cloudFresnelModifier\",\"vec2\",[1.2,.01]),u.code.add(d`PBRShadingWater shadingInfo;\nvec3 getSkyGradientColor(in float cosTheta, in vec3 horizon, in vec3 zenit) {\nfloat exponent = pow((1.0 - cosTheta), fresnelSky[2]);\nreturn mix(zenit, horizon, exponent);\n}`),u.uniforms.add(new l(\"lightingSpecularStrength\",(e=>e.lighting.mainLight.specularStrength)),new l(\"lightingEnvironmentStrength\",(e=>e.lighting.mainLight.environmentStrength))),u.code.add(d`vec3 getSeaColor(in vec3 n, in vec3 v, in vec3 l, vec3 color, in vec3 lightIntensity, in vec3 localUp, in float shadow, float foamIntensity, vec3 viewPosition, vec3 position) {\nfloat reflectionHit = 0.0;\nfloat reflectionHitDiffused = 0.0;\nvec3 seaWaterColor = linearizeGamma(color);\nvec3 h = normalize(l + v);\nshadingInfo.NdotV = clamp(dot(n, v), 0.001, 1.0);\nshadingInfo.VdotN = clamp(dot(v, n), 0.001, 1.0);\nshadingInfo.NdotH = clamp(dot(n, h), 0.0, 1.0);\nshadingInfo.VdotH = clamp(dot(v, h), 0.0, 1.0);\nshadingInfo.LdotH = clamp(dot(l, h), 0.0, 1.0);\nfloat upDotV = max(dot(localUp,v), 0.0);\nvec3 skyHorizon = linearizeGamma(skyColor);\nvec3 skyZenit = linearizeGamma(skyZenitColor);\nvec3 skyColor = getSkyGradientColor(upDotV, skyHorizon, skyZenit );\nfloat upDotL = max(dot(localUp,l),0.0);\nfloat daytimeMod = 0.1 + upDotL * 0.9;\nskyColor *= daytimeMod;\nfloat shadowModifier = clamp(shadow, 0.8, 1.0);\nvec3 fresnelModifier = fresnelReflection(shadingInfo.VdotN, vec3(fresnelSky[0]), fresnelSky[1]);\nvec3 reflSky = lightingEnvironmentStrength * fresnelModifier * skyColor * shadowModifier;\nvec3 reflSea = seaWaterColor * mix(skyColor, upDotL * lightIntensity * LIGHT_NORMALIZATION, 2.0 / 3.0) * shadowModifier;\nvec3 specular = vec3(0.0);\nif(upDotV > 0.0 && upDotL > 0.0) {\nvec3 specularSun = brdfSpecularWater(shadingInfo, roughness, vec3(fresnelMaterial[0]), fresnelMaterial[1]);\nvec3 incidentLight = lightIntensity * LIGHT_NORMALIZATION * shadow;\nfloat NdotL = clamp(dot(n, l), 0.0, 1.0);\nspecular = lightingSpecularStrength * NdotL * incidentLight * specularSun;\n}\nvec3 foam = vec3(0.0);\nif(upDotV > 0.0) {\nfoam = foamIntensity2FoamColor(foamIntensityExternal, foamIntensity, skyZenitColor, daytimeMod);\n}\nfloat correctionViewingFactor = pow(max(dot(v, localUp), 0.0), correctionViewingPowerFactor);\nvec3 normalCorrectedClouds = mix(localUp, n, correctionViewingFactor);\nvec3 reflectedWorld = normalize(reflect(-v, normalCorrectedClouds));`),v.cloudReflections&&u.uniforms.add(new l(\"cloudsOpacity\",(e=>e.clouds.opacity))).code.add(d`vec4 cloudsColor = renderClouds(reflectedWorld, position);\ncloudsColor.a = 1.0 - cloudsColor.a;\ncloudsColor = pow(cloudsColor, vec4(GAMMA));\ncloudsColor *= clamp(fresnelModifier.y * cloudFresnelModifier[0] - cloudFresnelModifier[1], 0.0, 1.0) * cloudsOpacity;`),v.screenSpaceReflections?u.uniforms.add(new c(\"view\",(e=>e.camera.viewMatrix)),new s(\"lastFrameColorTexture\",(e=>e.ssr.lastFrameColor?.getTexture())),new l(\"fadeFactorSSR\",(e=>e.ssr.fadeFactor))).code.add(d`vec3 viewDir = normalize(viewPosition);\nvec4 viewNormalVectorCoordinate = view * vec4(n, 0.0);\nvec3 viewNormal = normalize(viewNormalVectorCoordinate.xyz);\nvec4 viewUp = view * vec4(localUp, 0.0);\nvec3 viewNormalCorrectedSSR = mix(viewUp.xyz, viewNormal, correctionViewingFactor);\nvec3 reflected = normalize(reflect(viewDir, viewNormalCorrectedSSR));\nvec3 hitCoordinate = screenSpaceIntersection(reflected, viewPosition, viewDir, viewUp.xyz);\nvec3 reflectedColor = vec3(0.0);\nif (hitCoordinate.z > 0.0)\n{\nvec2 reprojectedCoordinate = reprojectionCoordinate(hitCoordinate);\nvec2 dCoords = smoothstep(0.3, 0.6, abs(vec2(0.5, 0.5) - hitCoordinate.xy));\nfloat heightMod = smoothstep(ssrHeightFadeEnd, ssrHeightFadeStart, -viewPosition.z);\nreflectionHit = clamp(1.0 - (1.3 * dCoords.y), 0.0, 1.0) * heightMod * fadeFactorSSR;\nreflectionHitDiffused = waterDiffusion * reflectionHit;\nreflectedColor = linearizeGamma(texture(lastFrameColorTexture, reprojectedCoordinate).xyz) *\nreflectionHitDiffused * fresnelModifier.y * ssrIntensity;\n}\nfloat seaColorMod =  mix(waterSeaColorMod, waterSeaColorMod * 0.5, reflectionHitDiffused);\nvec3 waterRenderedColor = tonemapACES((1.0 - reflectionHitDiffused) * reflSky + reflectedColor +\nreflSea * seaColorMod + specular + foam);`):u.code.add(d`vec3 waterRenderedColor = tonemapACES(reflSky + reflSea * waterSeaColorMod + specular + foam);`),v.cloudReflections?v.screenSpaceReflections?u.code.add(d`return waterRenderedColor * (1.0 - (1.0 - reflectionHit) * cloudsColor.a) + (1.0 - reflectionHit) * cloudsColor.xyz;\n}`):u.code.add(d`return waterRenderedColor * (1.0 - cloudsColor.a) + cloudsColor.xyz;\n}`):u.code.add(d`return waterRenderedColor;\n}`)}export{m as Water};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}