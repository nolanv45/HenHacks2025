{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { ContextRequestEvent } from './context-request-event.js';\n/**\n * A ContextRoot can be used to gather unsatisfied context requests and\n * re-dispatch them when new providers which satisfy matching context keys are\n * available.\n *\n * This allows providers to be added to a DOM tree, or upgraded, after the\n * consumers.\n */\nexport class ContextRoot {\n  constructor() {\n    this.pendingContextRequests = new Map();\n    this.onContextProvider = event => {\n      const pendingRequestData = this.pendingContextRequests.get(event.context);\n      if (pendingRequestData === undefined) {\n        // No pending requests for this context at this time\n        return;\n      }\n      // Clear our list. Any still unsatisfied requests will re-add themselves\n      // when we dispatch the events below.\n      this.pendingContextRequests.delete(event.context);\n      // Loop over all pending requests and re-dispatch them from their source\n      const {\n        requests\n      } = pendingRequestData;\n      for (const {\n        elementRef,\n        callbackRef\n      } of requests) {\n        const element = elementRef.deref();\n        const callback = callbackRef.deref();\n        if (element === undefined || callback === undefined) {\n          // The element was GC'ed. Do nothing.\n        } else {\n          // Re-dispatch if we still have the element and callback\n          element.dispatchEvent(new ContextRequestEvent(event.context, element, callback, true));\n        }\n      }\n    };\n    this.onContextRequest = event => {\n      // Events that are not subscribing should not be buffered\n      if (event.subscribe !== true) {\n        return;\n      }\n      // Note, it's important to use the initial target\n      // since that's the requesting element and the event may be re-targeted\n      // to an outer host element.\n      const element = event.contextTarget ?? event.composedPath()[0];\n      const callback = event.callback;\n      let pendingContextRequests = this.pendingContextRequests.get(event.context);\n      if (pendingContextRequests === undefined) {\n        this.pendingContextRequests.set(event.context, pendingContextRequests = {\n          callbacks: new WeakMap(),\n          requests: []\n        });\n      }\n      let callbacks = pendingContextRequests.callbacks.get(element);\n      if (callbacks === undefined) {\n        pendingContextRequests.callbacks.set(element, callbacks = new WeakSet());\n      }\n      if (callbacks.has(callback)) {\n        // We're already tracking this element/callback pair\n        return;\n      }\n      callbacks.add(callback);\n      pendingContextRequests.requests.push({\n        elementRef: new WeakRef(element),\n        callbackRef: new WeakRef(callback)\n      });\n    };\n  }\n  /**\n   * Attach the ContextRoot to a given element to intercept `context-request` and\n   * `context-provider` events.\n   *\n   * @param element an element to add event listeners to\n   */\n  attach(element) {\n    element.addEventListener('context-request', this.onContextRequest);\n    element.addEventListener('context-provider', this.onContextProvider);\n  }\n  /**\n   * Removes the ContextRoot event listeners from a given element.\n   *\n   * @param element an element from which to remove event listeners\n   */\n  detach(element) {\n    element.removeEventListener('context-request', this.onContextRequest);\n    element.removeEventListener('context-provider', this.onContextProvider);\n  }\n}","map":{"version":3,"names":["ContextRequestEvent","ContextRoot","constructor","pendingContextRequests","Map","onContextProvider","event","pendingRequestData","get","context","undefined","delete","requests","elementRef","callbackRef","element","deref","callback","dispatchEvent","onContextRequest","subscribe","contextTarget","composedPath","set","callbacks","WeakMap","WeakSet","has","add","push","WeakRef","attach","addEventListener","detach","removeEventListener"],"sources":["C:\\Users\\nolan\\tasks\\HenHacks2025\\henhack25\\node_modules\\@lit\\context\\src\\lib\\context-root.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {Context} from './create-context.js';\nimport {ContextCallback, ContextRequestEvent} from './context-request-event.js';\nimport {ContextProviderEvent} from './controllers/context-provider.js';\n\n/**\n * A ContextRoot can be used to gather unsatisfied context requests and\n * re-dispatch them when new providers which satisfy matching context keys are\n * available.\n *\n * This allows providers to be added to a DOM tree, or upgraded, after the\n * consumers.\n */\nexport class ContextRoot {\n  private pendingContextRequests = new Map<\n    Context<unknown, unknown>,\n    {\n      // The WeakMap lets us detect if we're seen an element/callback pair yet,\n      // without needing to iterate the `requests` array\n      callbacks: WeakMap<HTMLElement, WeakSet<ContextCallback<unknown>>>;\n\n      // Requests lets us iterate over every element/callback that we need to\n      // replay context events for\n      // Both the element and callback must be stored in WeakRefs because the\n      // callback most likely has a strong ref to the element.\n      requests: Array<{\n        elementRef: WeakRef<HTMLElement>;\n        callbackRef: WeakRef<ContextCallback<unknown>>;\n      }>;\n    }\n  >();\n\n  /**\n   * Attach the ContextRoot to a given element to intercept `context-request` and\n   * `context-provider` events.\n   *\n   * @param element an element to add event listeners to\n   */\n  attach(element: HTMLElement): void {\n    element.addEventListener('context-request', this.onContextRequest);\n    element.addEventListener('context-provider', this.onContextProvider);\n  }\n\n  /**\n   * Removes the ContextRoot event listeners from a given element.\n   *\n   * @param element an element from which to remove event listeners\n   */\n  detach(element: HTMLElement): void {\n    element.removeEventListener('context-request', this.onContextRequest);\n    element.removeEventListener('context-provider', this.onContextProvider);\n  }\n\n  private onContextProvider = (\n    event: ContextProviderEvent<Context<unknown, unknown>>\n  ) => {\n    const pendingRequestData = this.pendingContextRequests.get(event.context);\n    if (pendingRequestData === undefined) {\n      // No pending requests for this context at this time\n      return;\n    }\n\n    // Clear our list. Any still unsatisfied requests will re-add themselves\n    // when we dispatch the events below.\n    this.pendingContextRequests.delete(event.context);\n\n    // Loop over all pending requests and re-dispatch them from their source\n    const {requests} = pendingRequestData;\n    for (const {elementRef, callbackRef} of requests) {\n      const element = elementRef.deref();\n      const callback = callbackRef.deref();\n\n      if (element === undefined || callback === undefined) {\n        // The element was GC'ed. Do nothing.\n      } else {\n        // Re-dispatch if we still have the element and callback\n        element.dispatchEvent(\n          new ContextRequestEvent(event.context, element, callback, true)\n        );\n      }\n    }\n  };\n\n  private onContextRequest = (\n    event: ContextRequestEvent<Context<unknown, unknown>>\n  ) => {\n    // Events that are not subscribing should not be buffered\n    if (event.subscribe !== true) {\n      return;\n    }\n\n    // Note, it's important to use the initial target\n    // since that's the requesting element and the event may be re-targeted\n    // to an outer host element.\n    const element = (event.contextTarget ??\n      event.composedPath()[0]) as HTMLElement;\n    const callback = event.callback;\n\n    let pendingContextRequests = this.pendingContextRequests.get(event.context);\n    if (pendingContextRequests === undefined) {\n      this.pendingContextRequests.set(\n        event.context,\n        (pendingContextRequests = {\n          callbacks: new WeakMap(),\n          requests: [],\n        })\n      );\n    }\n\n    let callbacks = pendingContextRequests.callbacks.get(element);\n    if (callbacks === undefined) {\n      pendingContextRequests.callbacks.set(\n        element,\n        (callbacks = new WeakSet())\n      );\n    }\n\n    if (callbacks.has(callback)) {\n      // We're already tracking this element/callback pair\n      return;\n    }\n\n    callbacks.add(callback);\n    pendingContextRequests.requests.push({\n      elementRef: new WeakRef(element),\n      callbackRef: new WeakRef(callback),\n    });\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}