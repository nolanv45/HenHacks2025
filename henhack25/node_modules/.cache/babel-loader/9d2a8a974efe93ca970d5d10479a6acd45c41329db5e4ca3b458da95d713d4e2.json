{"ast":null,"code":"import { nothing as t } from \"../lit-html.js\";\nimport { AsyncDirective as i } from \"../async-directive.js\";\nimport { directive as s } from \"../directive.js\";\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst e = () => new h();\nclass h {}\nconst o = new WeakMap(),\n  n = s(class extends i {\n    render(i) {\n      return t;\n    }\n    update(i, _ref) {\n      let [s] = _ref;\n      const e = s !== this.Y;\n      return e && void 0 !== this.Y && this.rt(void 0), (e || this.lt !== this.ct) && (this.Y = s, this.ht = i.options?.host, this.rt(this.ct = i.element)), t;\n    }\n    rt(t) {\n      if (this.isConnected || (t = void 0), \"function\" == typeof this.Y) {\n        const i = this.ht ?? globalThis;\n        let s = o.get(i);\n        void 0 === s && (s = new WeakMap(), o.set(i, s)), void 0 !== s.get(this.Y) && this.Y.call(this.ht, void 0), s.set(this.Y, t), void 0 !== t && this.Y.call(this.ht, t);\n      } else this.Y.value = t;\n    }\n    get lt() {\n      return \"function\" == typeof this.Y ? o.get(this.ht ?? globalThis)?.get(this.Y) : this.Y?.value;\n    }\n    disconnected() {\n      this.lt === this.ct && this.rt(void 0);\n    }\n    reconnected() {\n      this.rt(this.ct);\n    }\n  });\nexport { e as createRef, n as ref };","map":{"version":3,"names":["e","createRef","h","o","WeakMap","n","s","i","render","t","update","_ref","Y","rt","lt","ct","ht","options","host","element","isConnected","globalThis","get","set","call","value","disconnected","reconnected","ref"],"sources":["C:\\Users\\nolan\\tasks\\HenHacks2025\\henhack25\\node_modules\\lit-html\\src\\directives\\ref.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {nothing, ElementPart} from '../lit-html.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\n\n/**\n * Creates a new Ref object, which is container for a reference to an element.\n */\nexport const createRef = <T = Element>() => new Ref<T>();\n\n/**\n * An object that holds a ref value.\n */\nclass Ref<T = Element> {\n  /**\n   * The current Element value of the ref, or else `undefined` if the ref is no\n   * longer rendered.\n   */\n  readonly value?: T;\n}\n\nexport type {Ref};\n\ninterface RefInternal {\n  value: Element | undefined;\n}\n\n// When callbacks are used for refs, this map tracks the last value the callback\n// was called with, for ensuring a directive doesn't clear the ref if the ref\n// has already been rendered to a new spot. It is double-keyed on both the\n// context (`options.host`) and the callback, since we auto-bind class methods\n// to `options.host`.\nconst lastElementForContextAndCallback = new WeakMap<\n  object,\n  WeakMap<Function, Element | undefined>\n>();\n\nexport type RefOrCallback<T = Element> = Ref<T> | ((el: T | undefined) => void);\n\nclass RefDirective extends AsyncDirective {\n  private _element?: Element;\n  private _ref?: RefOrCallback;\n  private _context?: object;\n\n  render(_ref?: RefOrCallback) {\n    return nothing;\n  }\n\n  override update(part: ElementPart, [ref]: Parameters<this['render']>) {\n    const refChanged = ref !== this._ref;\n    if (refChanged && this._ref !== undefined) {\n      // The ref passed to the directive has changed;\n      // unset the previous ref's value\n      this._updateRefValue(undefined);\n    }\n    if (refChanged || this._lastElementForRef !== this._element) {\n      // We either got a new ref or this is the first render;\n      // store the ref/element & update the ref value\n      this._ref = ref;\n      this._context = part.options?.host;\n      this._updateRefValue((this._element = part.element));\n    }\n    return nothing;\n  }\n\n  private _updateRefValue(element: Element | undefined) {\n    if (!this.isConnected) {\n      element = undefined;\n    }\n    if (typeof this._ref === 'function') {\n      // If the current ref was called with a previous value, call with\n      // `undefined`; We do this to ensure callbacks are called in a consistent\n      // way regardless of whether a ref might be moving up in the tree (in\n      // which case it would otherwise be called with the new value before the\n      // previous one unsets it) and down in the tree (where it would be unset\n      // before being set). Note that element lookup is keyed by\n      // both the context and the callback, since we allow passing unbound\n      // functions that are called on options.host, and we want to treat\n      // these as unique \"instances\" of a function.\n      const context = this._context ?? globalThis;\n      let lastElementForCallback =\n        lastElementForContextAndCallback.get(context);\n      if (lastElementForCallback === undefined) {\n        lastElementForCallback = new WeakMap();\n        lastElementForContextAndCallback.set(context, lastElementForCallback);\n      }\n      if (lastElementForCallback.get(this._ref) !== undefined) {\n        this._ref.call(this._context, undefined);\n      }\n      lastElementForCallback.set(this._ref, element);\n      // Call the ref with the new element value\n      if (element !== undefined) {\n        this._ref.call(this._context, element);\n      }\n    } else {\n      (this._ref as RefInternal)!.value = element;\n    }\n  }\n\n  private get _lastElementForRef() {\n    return typeof this._ref === 'function'\n      ? lastElementForContextAndCallback\n          .get(this._context ?? globalThis)\n          ?.get(this._ref)\n      : this._ref?.value;\n  }\n\n  override disconnected() {\n    // Only clear the box if our element is still the one in it (i.e. another\n    // directive instance hasn't rendered its element to it before us); that\n    // only happens in the event of the directive being cleared (not via manual\n    // disconnection)\n    if (this._lastElementForRef === this._element) {\n      this._updateRefValue(undefined);\n    }\n  }\n\n  override reconnected() {\n    // If we were manually disconnected, we can safely put our element back in\n    // the box, since no rendering could have occurred to change its state\n    this._updateRefValue(this._element);\n  }\n}\n\n/**\n * Sets the value of a Ref object or calls a ref callback with the element it's\n * bound to.\n *\n * A Ref object acts as a container for a reference to an element. A ref\n * callback is a function that takes an element as its only argument.\n *\n * The ref directive sets the value of the Ref object or calls the ref callback\n * during rendering, if the referenced element changed.\n *\n * Note: If a ref callback is rendered to a different element position or is\n * removed in a subsequent render, it will first be called with `undefined`,\n * followed by another call with the new element it was rendered to (if any).\n *\n * ```js\n * // Using Ref object\n * const inputRef = createRef();\n * render(html`<input ${ref(inputRef)}>`, container);\n * inputRef.value.focus();\n *\n * // Using callback\n * const callback = (inputElement) => inputElement.focus();\n * render(html`<input ${ref(callback)}>`, container);\n * ```\n */\nexport const ref = directive(RefDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {RefDirective};\n"],"mappings":";;;;;;;;AAWa,MAAAA,CAAA,GAAYC,CAAA,KAAmB,IAAIC,CAAA;AAKhD,MAAMA,CAAA;AAmBN,MAAMC,CAAA,GAAmC,IAAIC,OAAA;EAqHhCC,CAAA,GAAMC,CAAA,CA9GnB,cAA2BC,CAAA;IAKzBC,OAAOD,CAAA;MACL,OAAOE,CACR;IAAA;IAEQC,OAAOH,CAAA,EAAAI,IAAA,EAAoB;MAAA,IAApB,CAAoBL,CAAA,IAAAK,IAAA;MAClC,MAAMX,CAAA,GAAaM,CAAA,KAAQ,KAAKM,CAAA;MAahC,OAZIZ,CAAA,SAA4B,MAAd,KAAKY,CAAA,IAGrB,KAAKC,EAAA,MAAgB,KAEnBb,CAAA,IAAc,KAAKc,EAAA,KAAuB,KAAKC,EAAA,MAGjD,KAAKH,CAAA,GAAON,CAAA,EACZ,KAAKU,EAAA,GAAWT,CAAA,CAAKU,OAAA,EAASC,IAAA,EAC9B,KAAKL,EAAA,CAAiB,KAAKE,EAAA,GAAWR,CAAA,CAAKY,OAAA,IAEtCV,CACR;IAAA;IAEOI,GAAgBJ,CAAA;MAItB,IAHK,KAAKW,WAAA,KACRX,CAAA,QAAU,IAEa,qBAAd,KAAKG,CAAA,EAAqB;QAUnC,MAAML,CAAA,GAAU,KAAKS,EAAA,IAAYK,UAAA;QACjC,IAAIf,CAAA,GACFH,CAAA,CAAiCmB,GAAA,CAAIf,CAAA;QAAA,KACR,MAA3BD,CAAA,KACFA,CAAA,GAAyB,IAAIF,OAAA,IAC7BD,CAAA,CAAiCoB,GAAA,CAAIhB,CAAA,EAASD,CAAA,SAEF,MAA1CA,CAAA,CAAuBgB,GAAA,CAAI,KAAKV,CAAA,KAClC,KAAKA,CAAA,CAAKY,IAAA,CAAK,KAAKR,EAAA,OAAU,IAEhCV,CAAA,CAAuBiB,GAAA,CAAI,KAAKX,CAAA,EAAMH,CAAA,QAEtB,MAAZA,CAAA,IACF,KAAKG,CAAA,CAAKY,IAAA,CAAK,KAAKR,EAAA,EAAUP,CAAA,CAEjC;MAAA,OACE,KAAKG,CAAA,CAAsBa,KAAA,GAAQhB,CAEvC;IAAA;IAED,IAAAK,EAAYA,CAAA;MACV,OAA4B,qBAAd,KAAKF,CAAA,GACfT,CAAA,CACGmB,GAAA,CAAI,KAAKN,EAAA,IAAYK,UAAA,GACpBC,GAAA,CAAI,KAAKV,CAAA,IACb,KAAKA,CAAA,EAAMa,KAChB;IAAA;IAEQC,aAAA;MAKH,KAAKZ,EAAA,KAAuB,KAAKC,EAAA,IACnC,KAAKF,EAAA,MAAgB,EAExB;IAAA;IAEQc,YAAA;MAGP,KAAKd,EAAA,CAAgB,KAAKE,EAAA,CAC3B;IAAA;EAAA;AAAA,SAAAf,CAAA,IAAAC,SAAA,EAAAI,CAAA,IAAAuB,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}