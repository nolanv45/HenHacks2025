{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { nothing } from '../lit-html.js';\nimport { directive, Directive } from '../directive.js';\nimport { setCommittedValue } from '../directive-helpers.js';\nclass Keyed extends Directive {\n  constructor() {\n    super(...arguments);\n    this.key = nothing;\n  }\n  render(k, v) {\n    this.key = k;\n    return v;\n  }\n  update(part, [k, v]) {\n    if (k !== this.key) {\n      // Clear the part before returning a value. The one-arg form of\n      // setCommittedValue sets the value to a sentinel which forces a\n      // commit the next render.\n      setCommittedValue(part);\n      this.key = k;\n    }\n    return v;\n  }\n}\n/**\n * Associates a renderable value with a unique key. When the key changes, the\n * previous DOM is removed and disposed before rendering the next value, even\n * if the value - such as a template - is the same.\n *\n * This is useful for forcing re-renders of stateful components, or working\n * with code that expects new data to generate new HTML elements, such as some\n * animation techniques.\n */\nexport const keyed = directive(Keyed);","map":{"version":3,"names":["nothing","directive","Directive","setCommittedValue","Keyed","constructor","key","render","k","v","update","part","keyed"],"sources":["C:\\Users\\nolan\\tasks\\HenHacks2025\\henhack25\\node_modules\\lit-html\\src\\directives\\keyed.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {nothing} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  ChildPart,\n  DirectiveParameters,\n} from '../directive.js';\nimport {setCommittedValue} from '../directive-helpers.js';\n\nclass Keyed extends Directive {\n  key: unknown = nothing;\n\n  render(k: unknown, v: unknown) {\n    this.key = k;\n    return v;\n  }\n\n  override update(part: ChildPart, [k, v]: DirectiveParameters<this>) {\n    if (k !== this.key) {\n      // Clear the part before returning a value. The one-arg form of\n      // setCommittedValue sets the value to a sentinel which forces a\n      // commit the next render.\n      setCommittedValue(part);\n      this.key = k;\n    }\n    return v;\n  }\n}\n\n/**\n * Associates a renderable value with a unique key. When the key changes, the\n * previous DOM is removed and disposed before rendering the next value, even\n * if the value - such as a template - is the same.\n *\n * This is useful for forcing re-renders of stateful components, or working\n * with code that expects new data to generate new HTML elements, such as some\n * animation techniques.\n */\nexport const keyed = directive(Keyed);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {Keyed};\n"],"mappings":"AAAA;;;;;AAMA,SAAQA,OAAO,QAAO,gBAAgB;AACtC,SACEC,SAAS,EACTC,SAAS,QAGJ,iBAAiB;AACxB,SAAQC,iBAAiB,QAAO,yBAAyB;AAEzD,MAAMC,KAAM,SAAQF,SAAS;EAA7BG,YAAA;;IACE,KAAAC,GAAG,GAAYN,OAAO;EAiBxB;EAfEO,MAAMA,CAACC,CAAU,EAAEC,CAAU;IAC3B,IAAI,CAACH,GAAG,GAAGE,CAAC;IACZ,OAAOC,CAAC;EACV;EAESC,MAAMA,CAACC,IAAe,EAAE,CAACH,CAAC,EAAEC,CAAC,CAA4B;IAChE,IAAID,CAAC,KAAK,IAAI,CAACF,GAAG,EAAE;MAClB;MACA;MACA;MACAH,iBAAiB,CAACQ,IAAI,CAAC;MACvB,IAAI,CAACL,GAAG,GAAGE,CAAC;IACd;IACA,OAAOC,CAAC;EACV;;AAGF;;;;;;;;;AASA,OAAO,MAAMG,KAAK,GAAGX,SAAS,CAACG,KAAK,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}