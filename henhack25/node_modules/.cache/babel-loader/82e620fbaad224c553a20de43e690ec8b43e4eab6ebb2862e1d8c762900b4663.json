{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport { clone as e } from \"../../../core/lang.js\";\nimport { millisecondsPerTimeUnit as t } from \"../../../core/timeUtils.js\";\nimport { polygonCentroid as i, extentCentroid as s } from \"../../../geometry/support/centroid.js\";\nimport { getPolygonExtent as a, getGeometryExtent as r } from \"../../../geometry/support/extentUtils.js\";\nimport { toQuantizationTransform as n } from \"../../../geometry/support/quantizationUtils.js\";\nimport { isValid as o, equals as l } from \"../../../geometry/support/spatialReferenceUtils.js\";\nimport u from \"./AttributesBuilder.js\";\nimport { cleanFromGeometryEngine as c, getGeometry as m, transformCentroid as d } from \"./geometryUtils.js\";\nimport { project as h } from \"./projectionSupport.js\";\nimport { getDateInNumber as p } from \"./queryUtils.js\";\nimport { makeEdgeCandidate as f, makeVertexCandidate as y } from \"./SnappingCandidate.js\";\nimport { isDateField as g, isDateOnlyField as x, isTimestampOffsetField as I, isStringField as T, isTimeOnlyField as F } from \"../../support/fieldUtils.js\";\nimport _ from \"../../../rest/support/AutoIntervalBinParameters.js\";\nimport V from \"../../../rest/support/DateBinParameters.js\";\nimport v from \"../../../rest/support/FixedBoundariesBinParameters.js\";\nimport b from \"../../../rest/support/FixedIntervalBinParameters.js\";\nimport { isNullCountSupported as S, calculateStringStatistics as R, calculateStatistics as B, processSummaryStatisticsResult as z, calculateUniqueValuesCount as A, createUVResult as w, calculateClassBreaks as M, resolveCBResult as D, calculateHistogram as P, getAttributeComparator as q, calculatePercentile as N, binIndex as Z, getBinParams as j } from \"../../../statistics/utils.js\";\nconst G = \"bin\";\nclass C {\n  constructor(e, t, i) {\n    this.items = e, this.query = t, this.geometryType = i.geometryType, this.hasM = i.hasM, this.hasZ = i.hasZ, this.fieldsIndex = i.fieldsIndex, this.objectIdField = i.objectIdField, this.spatialReference = i.spatialReference, this.featureAdapter = i.featureAdapter;\n  }\n  get size() {\n    return this.items.length;\n  }\n  createQueryResponseForCount() {\n    const e = new u(this.query, this.featureAdapter, this.fieldsIndex);\n    if (!this.query.outStatistics) return e.countDistinctValues(this.items);\n    const {\n        groupByFieldsForStatistics: t,\n        having: i,\n        outStatistics: s\n      } = this.query,\n      a = t?.length;\n    if (!!!a) return 1;\n    const r = new Map(),\n      n = new Map(),\n      o = new Set();\n    for (const l of s) {\n      const {\n          statisticType: s\n        } = l,\n        a = \"exceedslimit\" !== s ? l.onStatisticField : void 0;\n      if (!n.has(a)) {\n        const i = [];\n        for (const s of t) {\n          const t = this._getAttributeValues(e, s, this.items, r);\n          i.push(t);\n        }\n        n.set(a, this._calculateUniqueValues(i, this.items, e.returnDistinctValues));\n      }\n      const u = n.get(a);\n      for (const t in u) {\n        const {\n            data: s,\n            items: a\n          } = u[t],\n          r = s.join(\",\");\n        i && !e.validateItems(a, i) || o.add(r);\n      }\n    }\n    return o.size;\n  }\n  async createQueryResponse() {\n    let e;\n    if (this.query.outStatistics) {\n      e = this.query.outStatistics.some(e => \"exceedslimit\" === e.statisticType) ? this._createExceedsLimitQueryResponse() : await this._createStatisticsQueryResponse(this.query, this.items);\n    } else e = this._createFeatureQueryResponse(this.query);\n    if (this.query.returnQueryGeometry) {\n      const t = this.query.geometry;\n      o(this.query.outSR) && !l(t.spatialReference, this.query.outSR) ? e.queryGeometry = c({\n        spatialReference: this.query.outSR,\n        ...h(t, t.spatialReference, this.query.outSR)\n      }) : e.queryGeometry = c({\n        spatialReference: this.query.outSR,\n        ...t\n      });\n    }\n    return e;\n  }\n  createSnappingResponse(e, t) {\n    const i = this.featureAdapter,\n      s = O(this.hasZ, this.hasM),\n      {\n        point: a,\n        mode: r\n      } = e,\n      n = \"number\" == typeof e.distance ? e.distance : e.distance.x,\n      o = \"number\" == typeof e.distance ? e.distance : e.distance.y,\n      l = {\n        candidates: []\n      },\n      u = \"esriGeometryPolygon\" === this.geometryType,\n      c = \"esriGeometryPolyline\" === this.geometryType,\n      m = this._getPointCreator(r, this.spatialReference, t),\n      d = new H(null, 0),\n      h = new H(null, 0),\n      p = {\n        x: 0,\n        y: 0,\n        z: 0\n      };\n    for (const g of this.items) {\n      const t = i.getGeometry(g);\n      if (null == t) continue;\n      const {\n          coords: r\n        } = t,\n        x = t.isPoint ? Q : t.lengths;\n      if (d.coords = r, h.coords = r, e.returnEdge) {\n        let e = 0;\n        for (let t = 0; t < x.length; t++) {\n          const r = x[t],\n            c = e;\n          for (let t = 0; t < r; t++, e += s) {\n            if (!u && t === r - 1) continue;\n            const y = d;\n            y.coordsIndex = e;\n            const x = h;\n            x.coordsIndex = t === r - 1 ? c : e + s;\n            const I = p;\n            if (!E(p, a, y, x)) continue;\n            const T = (a.x - I.x) / n,\n              F = (a.y - I.y) / o,\n              _ = T * T + F * F;\n            _ <= 1 && l.candidates.push(f(i.getObjectId(g), m(I), Math.sqrt(_), m(y), m(x)));\n          }\n        }\n      }\n      if (\"all\" === e.vertexMode) {\n        let e = 0;\n        for (let t = 0; t < x.length; t++) {\n          const r = x[t],\n            c = e,\n            p = h;\n          p.coordsIndex = c;\n          for (let t = 0; t < r; t++, e += s) {\n            const s = d;\n            if (s.coordsIndex = e, u && t === r - 1 && s.x === p.x && s.y === p.y) continue;\n            const c = (a.x - s.x) / n,\n              h = (a.y - s.y) / o,\n              f = c * c + h * h;\n            f <= 1 && l.candidates.push(y(i.getObjectId(g), m(s), Math.sqrt(f)));\n          }\n        }\n      } else if (c && \"ends\" === e.vertexMode) {\n        let e = 0;\n        const t = [];\n        for (let i = 0; i < x.length; i++) {\n          t.push(e);\n          const a = x[i];\n          e += a * s, !u && a > 1 && t.push(e - s);\n        }\n        for (const s of t) {\n          const e = d;\n          e.coordsIndex = s;\n          const t = (a.x - e.x) / n,\n            r = (a.y - e.y) / o,\n            u = t * t + r * r;\n          u <= 1 && l.candidates.push(y(i.getObjectId(g), m(e), Math.sqrt(u)));\n        }\n      }\n    }\n    return l.candidates.sort((e, t) => e.distance - t.distance), l;\n  }\n  _getPointCreator(e, t, i) {\n    const s = null == i || l(t, i) ? e => e : e => h(e, t, i),\n      {\n        hasZ: a\n      } = this,\n      r = 0;\n    return \"3d\" === e ? a ? _ref => {\n      let {\n        x: e,\n        y: t,\n        z: i\n      } = _ref;\n      return s({\n        x: e,\n        y: t,\n        z: i\n      });\n    } : _ref2 => {\n      let {\n        x: e,\n        y: t\n      } = _ref2;\n      return s({\n        x: e,\n        y: t,\n        z: r\n      });\n    } : _ref3 => {\n      let {\n        x: e,\n        y: t\n      } = _ref3;\n      return s({\n        x: e,\n        y: t\n      });\n    };\n  }\n  async createSummaryStatisticsResponse(e) {\n    const {\n        field: t,\n        valueExpression: i,\n        normalizationField: s,\n        normalizationType: a,\n        normalizationTotal: r,\n        minValue: n,\n        maxValue: o,\n        scale: l,\n        timeZone: u,\n        outStatisticTypes: c\n      } = e,\n      m = this.fieldsIndex.get(t),\n      d = g(m) || x(m) || I(m),\n      h = await this._getDataValues({\n        field: t,\n        valueExpression: i,\n        normalizationField: s,\n        normalizationType: a,\n        normalizationTotal: r,\n        scale: l,\n        timeZone: u\n      }, this.items),\n      p = S({\n        normalizationType: a,\n        normalizationField: s,\n        minValue: n,\n        maxValue: o\n      }),\n      f = {\n        value: .5,\n        fieldType: m?.type\n      },\n      y = T(m) ? R({\n        values: h,\n        supportsNullCount: p,\n        percentileParams: f,\n        outStatisticTypes: c\n      }) : B({\n        values: h,\n        minValue: n,\n        maxValue: o,\n        useSampleStdDev: !a,\n        supportsNullCount: p,\n        percentileParams: f,\n        outStatisticTypes: c\n      });\n    return z(y, c, d);\n  }\n  async createUniqueValuesResponse(e) {\n    const {\n        field: t,\n        valueExpression: i,\n        domains: s,\n        returnAllCodedValues: a,\n        scale: r,\n        timeZone: n\n      } = e,\n      o = await this._getDataValues({\n        field: t,\n        field2: e.field2,\n        field3: e.field3,\n        fieldDelimiter: e.fieldDelimiter,\n        valueExpression: i,\n        scale: r,\n        timeZone: n\n      }, this.items, !1),\n      l = A(o);\n    return w(l, s, a, e.fieldDelimiter);\n  }\n  async createClassBreaksResponse(e) {\n    const {\n        field: t,\n        valueExpression: i,\n        normalizationField: s,\n        normalizationType: a,\n        normalizationTotal: r,\n        classificationMethod: n,\n        standardDeviationInterval: o,\n        minValue: l,\n        maxValue: u,\n        numClasses: c,\n        scale: m,\n        timeZone: d\n      } = e,\n      h = await this._getDataValues({\n        field: t,\n        valueExpression: i,\n        normalizationField: s,\n        normalizationType: a,\n        normalizationTotal: r,\n        scale: m,\n        timeZone: d\n      }, this.items),\n      p = M(h, {\n        field: t,\n        normalizationField: s,\n        normalizationType: a,\n        normalizationTotal: r,\n        classificationMethod: n,\n        standardDeviationInterval: o,\n        minValue: l,\n        maxValue: u,\n        numClasses: c\n      });\n    return D(p, n);\n  }\n  async createHistogramResponse(e) {\n    const {\n        field: t,\n        valueExpression: i,\n        normalizationField: s,\n        normalizationType: a,\n        normalizationTotal: r,\n        classificationMethod: n,\n        standardDeviationInterval: o,\n        minValue: l,\n        maxValue: u,\n        numBins: c,\n        scale: m,\n        timeZone: d\n      } = e,\n      h = await this._getDataValues({\n        field: t,\n        valueExpression: i,\n        normalizationField: s,\n        normalizationType: a,\n        normalizationTotal: r,\n        scale: m,\n        timeZone: d\n      }, this.items);\n    return P(h, {\n      field: t,\n      normalizationField: s,\n      normalizationType: a,\n      normalizationTotal: r,\n      classificationMethod: n,\n      standardDeviationInterval: o,\n      minValue: l,\n      maxValue: u,\n      numBins: c\n    });\n  }\n  _sortFeatures(e, t, i) {\n    if (e.length > 1 && t?.length) for (const s of t.slice().reverse()) {\n      const t = s.split(\" \"),\n        a = t[0],\n        r = this.fieldsIndex.get(a),\n        n = !!t[1] && \"desc\" === t[1].toLowerCase(),\n        o = q(r?.type, n);\n      e.sort((e, t) => {\n        const s = i(e, a, r),\n          n = i(t, a, r);\n        return o(s, n);\n      });\n    }\n  }\n  _createFeatureQueryResponse(e) {\n    const {\n        items: t,\n        geometryType: i,\n        hasM: s,\n        hasZ: a,\n        objectIdField: r,\n        spatialReference: o\n      } = this,\n      {\n        outFields: l,\n        outSR: u,\n        quantizationParameters: m,\n        resultRecordCount: d,\n        resultOffset: h,\n        returnZ: p,\n        returnM: f\n      } = e,\n      y = null != d && t.length > (h || 0) + d,\n      g = l && (l.includes(\"*\") ? [...this.fieldsIndex.fields] : l.map(e => this.fieldsIndex.get(e)));\n    return {\n      exceededTransferLimit: y,\n      features: this._createFeatures(e, t),\n      fields: g,\n      geometryType: i,\n      hasM: s && f,\n      hasZ: a && p,\n      objectIdFieldName: r,\n      spatialReference: c(u || o),\n      transform: m && n(m) || null\n    };\n  }\n  _createFeatures(e, t) {\n    const i = new u(e, this.featureAdapter, this.fieldsIndex),\n      {\n        hasM: s,\n        hasZ: a\n      } = this,\n      {\n        orderByFields: r,\n        quantizationParameters: o,\n        returnGeometry: l,\n        returnCentroid: c,\n        maxAllowableOffset: h,\n        resultOffset: p,\n        resultRecordCount: f,\n        returnZ: y = !1,\n        returnM: g = !1\n      } = e,\n      x = a && y,\n      I = s && g;\n    let T = [],\n      F = 0;\n    const _ = [...t];\n    if (this._sortFeatures(_, r, (e, t, s) => i.getFieldValue(e, t, s)), this.geometryType && (l || c)) {\n      const e = n(o) ?? void 0,\n        t = \"esriGeometryPolygon\" === this.geometryType || \"esriGeometryPolyline\" === this.geometryType;\n      if (l && !c) for (const s of _) {\n        const a = this.featureAdapter.getGeometry(s),\n          r = {\n            attributes: i.getAttributes(s),\n            geometry: m(this.geometryType, this.hasZ, this.hasM, a, h, e, x, I)\n          };\n        t && a && !r.geometry && (r.centroid = d(this, this.featureAdapter.getCentroid(s, this), e)), T[F++] = r;\n      } else if (!l && c) for (const s of _) T[F++] = {\n        attributes: i.getAttributes(s),\n        centroid: d(this, this.featureAdapter.getCentroid(s, this), e)\n      };else for (const s of _) T[F++] = {\n        attributes: i.getAttributes(s),\n        centroid: d(this, this.featureAdapter.getCentroid(s, this), e),\n        geometry: m(this.geometryType, this.hasZ, this.hasM, this.featureAdapter.getGeometry(s), h, e, x, I)\n      };\n    } else for (const n of _) {\n      const e = i.getAttributes(n);\n      e && (T[F++] = {\n        attributes: e\n      });\n    }\n    const V = p || 0;\n    if (null != f) {\n      const e = V + f;\n      T = T.slice(V, Math.min(T.length, e));\n    }\n    return T;\n  }\n  _createExceedsLimitQueryResponse() {\n    let e = !1,\n      t = Number.POSITIVE_INFINITY,\n      i = Number.POSITIVE_INFINITY,\n      s = Number.POSITIVE_INFINITY;\n    for (const a of this.query.outStatistics ?? []) if (\"exceedslimit\" === a.statisticType) {\n      t = null != a.maxPointCount ? a.maxPointCount : Number.POSITIVE_INFINITY, i = null != a.maxRecordCount ? a.maxRecordCount : Number.POSITIVE_INFINITY, s = null != a.maxVertexCount ? a.maxVertexCount : Number.POSITIVE_INFINITY;\n      break;\n    }\n    if (\"esriGeometryPoint\" === this.geometryType) e = this.items.length > t;else if (this.items.length > i) e = !0;else {\n      const t = O(this.hasZ, this.hasM),\n        i = this.featureAdapter;\n      e = this.items.reduce((e, t) => {\n        const s = i.getGeometry(t);\n        return e + (null != s && s.coords.length || 0);\n      }, 0) / t > s;\n    }\n    return {\n      fields: [{\n        name: \"exceedslimit\",\n        type: \"esriFieldTypeInteger\",\n        alias: \"exceedslimit\",\n        sqlType: \"sqlTypeInteger\",\n        domain: null,\n        defaultValue: null\n      }],\n      features: [{\n        attributes: {\n          exceedslimit: Number(e)\n        }\n      }]\n    };\n  }\n  async _createStatisticsQueryResponse(e, t) {\n    let i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      attributes: {}\n    };\n    const s = [],\n      a = new Map(),\n      r = new Map(),\n      n = new Map(),\n      o = new Map(),\n      l = new u(e, this.featureAdapter, this.fieldsIndex),\n      c = e.outStatistics,\n      {\n        groupByFieldsForStatistics: m,\n        having: d,\n        orderByFields: h,\n        resultRecordCount: p\n      } = e,\n      f = m?.length,\n      y = !!f,\n      g = y ? m[0] : null,\n      x = y && !this.fieldsIndex.get(g);\n    for (const u of c ?? []) {\n      const {\n          outStatisticFieldName: e,\n          statisticType: c\n        } = u,\n        h = u,\n        p = \"exceedslimit\" !== c ? u.onStatisticField : void 0,\n        I = \"percentile_disc\" === c || \"percentile_cont\" === c,\n        F = \"EnvelopeAggregate\" === c || \"CentroidAggregate\" === c || \"ConvexHullAggregate\" === c,\n        _ = y && 1 === f && (p === g || x) && \"count\" === c;\n      if (y) {\n        if (!n.has(p)) {\n          const e = [];\n          for (const i of m) {\n            const s = this._getAttributeValues(l, i, t, a);\n            e.push(s);\n          }\n          n.set(p, this._calculateUniqueValues(e, t, !F && l.returnDistinctValues));\n        }\n        const i = n.get(p);\n        if (!i) continue;\n        const s = Object.keys(i);\n        for (const r of s) {\n          const {\n              count: s,\n              data: n,\n              items: u,\n              itemPositions: c\n            } = i[r],\n            f = n.join(\",\");\n          if (!d || l.validateItems(u, d)) {\n            const i = o.get(f) || {\n              attributes: {}\n            };\n            if (F) {\n              i.aggregateGeometries || (i.aggregateGeometries = {});\n              const {\n                aggregateGeometries: e,\n                outStatisticFieldName: t\n              } = await this._getAggregateGeometry(h, u);\n              i.aggregateGeometries[t] = e;\n            } else {\n              let r = null;\n              if (_) r = s;else {\n                const e = this._getAttributeValues(l, p, t, a),\n                  i = c.map(t => e[t]);\n                r = I && \"statisticParameters\" in h ? this._getPercentileValue(h, i) : this._getStatisticValue(h, i, null, l.returnDistinctValues);\n              }\n              i.attributes[e] = r;\n            }\n            let r = 0;\n            m.forEach((e, t) => i.attributes[this.fieldsIndex.get(e) ? e : \"EXPR_\" + ++r] = n[t]), o.set(f, i);\n          }\n        }\n      } else if (F) {\n        i.aggregateGeometries || (i.aggregateGeometries = {});\n        const {\n          aggregateGeometries: e,\n          outStatisticFieldName: s\n        } = await this._getAggregateGeometry(h, t);\n        i.aggregateGeometries[s] = e;\n      } else {\n        const s = this._getAttributeValues(l, p, t, a);\n        i.attributes[e] = I && \"statisticParameters\" in h ? this._getPercentileValue(h, s) : this._getStatisticValue(h, s, r, l.returnDistinctValues);\n      }\n      const V = \"min\" !== c && \"max\" !== c || !T(this.fieldsIndex.get(p)) && !this._isAnyDateField(p) ? null : this.fieldsIndex.get(p)?.type;\n      s.push({\n        name: e,\n        alias: e,\n        type: V || \"esriFieldTypeDouble\"\n      });\n    }\n    const I = y ? Array.from(o.values()) : [i];\n    return this._sortFeatures(I, h, (e, t) => e.attributes[t]), p && (I.length = Math.min(p, I.length)), {\n      fields: s,\n      features: I\n    };\n  }\n  _isAnyDateField(e) {\n    const t = this.fieldsIndex.get(e);\n    return g(t) || x(t) || I(t) || F(t);\n  }\n  async _getAggregateGeometry(e, t) {\n    const {\n        convexHull: n,\n        union: o\n      } = await import(\"../../../geometry/geometryEngineJSON.js\"),\n      {\n        statisticType: l,\n        outStatisticFieldName: u\n      } = e,\n      {\n        featureAdapter: c,\n        spatialReference: d,\n        geometryType: h,\n        hasZ: p,\n        hasM: f\n      } = this,\n      y = t.map(e => m(h, p, f, c.getGeometry(e))),\n      g = n(d, y, !0)[0],\n      x = {\n        aggregateGeometries: null,\n        outStatisticFieldName: null\n      };\n    if (\"EnvelopeAggregate\" === l) {\n      const e = g ? a(g) : r(o(d, y));\n      x.aggregateGeometries = {\n        ...e,\n        spatialReference: d\n      }, x.outStatisticFieldName = u || \"extent\";\n    } else if (\"CentroidAggregate\" === l) {\n      const e = g ? i(g) : s(r(o(d, y)));\n      x.aggregateGeometries = {\n        x: e[0],\n        y: e[1],\n        spatialReference: d\n      }, x.outStatisticFieldName = u || \"centroid\";\n    } else \"ConvexHullAggregate\" === l && (x.aggregateGeometries = g, x.outStatisticFieldName = u || \"convexHull\");\n    return x;\n  }\n  _getStatisticValue(e, t, i, s) {\n    const {\n      onStatisticField: a,\n      statisticType: r\n    } = e;\n    let n = null;\n    n = i?.has(a) ? i.get(a) : T(this.fieldsIndex.get(a)) || this._isAnyDateField(a) ? R({\n      values: t,\n      returnDistinct: s\n    }) : B({\n      values: s ? [...new Set(t)] : t,\n      minValue: null,\n      maxValue: null,\n      useSampleStdDev: !0\n    }), i && i.set(a, n);\n    return n[\"var\" === r ? \"variance\" : r];\n  }\n  _getPercentileValue(e, t) {\n    const {\n        onStatisticField: i,\n        statisticParameters: s,\n        statisticType: a\n      } = e,\n      {\n        value: r,\n        orderBy: n\n      } = s,\n      o = this.fieldsIndex.get(i);\n    return N(t, {\n      value: r,\n      orderBy: n,\n      fieldType: o?.type,\n      isDiscrete: \"percentile_disc\" === a\n    });\n  }\n  _getAttributeValues(e, t, i, s) {\n    if (s.has(t)) return s.get(t);\n    const a = this.fieldsIndex.get(t),\n      r = i.map(i => e.getFieldValue(i, t, a));\n    return s.set(t, r), r;\n  }\n  _calculateUniqueValues(e, t, i) {\n    const s = {},\n      a = t.length;\n    for (let r = 0; r < a; r++) {\n      const a = t[r],\n        n = [];\n      for (const t of e) n.push(t[r]);\n      const o = n.join(\",\");\n      null == s[o] ? s[o] = {\n        count: 1,\n        data: n,\n        items: [a],\n        itemPositions: [r]\n      } : (i || s[o].count++, s[o].items.push(a), s[o].itemPositions.push(r));\n    }\n    return s;\n  }\n  async _getDataValues(t, i) {\n    let s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !0;\n    const a = new u(this.query, this.featureAdapter, this.fieldsIndex),\n      {\n        valueExpression: r,\n        scale: n,\n        timeZone: o\n      } = t;\n    return r ? a.getExpressionValues(i, r, {\n      viewingMode: \"map\",\n      scale: n,\n      spatialReference: this.query.outSR || this.spatialReference\n    }, {\n      geometryType: this.geometryType,\n      hasZ: this.hasZ,\n      hasM: this.hasM\n    }, o) : a.getDataValues(i, e(t), s);\n  }\n  async _calculateHistogramBins(e, t, i) {\n    if (null == t.min && null == t.max) return [];\n    const s = t.intervals,\n      a = t.min ?? 0,\n      r = t.max ?? 0,\n      n = s.map(_ref4 => {\n        let [e, t] = _ref4;\n        return {\n          minValue: e,\n          maxValue: t,\n          count: 0,\n          items: []\n        };\n      });\n    for (let o = 0; o < e.length; o++) {\n      const t = e[o],\n        l = i[o];\n      if (null != t && t >= a && t <= r) {\n        const e = Z(s, t);\n        e > -1 && (n[e].count++, n[e].items.push(l));\n      }\n    }\n    return n;\n  }\n  async createQueryBinsResponse(e) {\n    const t = e.bin?.splitBy;\n    if (!t) return this._createBinsResponse(e);\n    const {\n        value: i,\n        outAlias: s,\n        valueType: a\n      } = t,\n      r = [],\n      n = [{\n        name: s ?? i,\n        alias: s ?? i,\n        type: a ?? \"esriFieldTypeString\"\n      }, {\n        name: G,\n        alias: G,\n        type: \"esriFieldTypeInteger\"\n      }],\n      o = new u(e, this.featureAdapter, this.fieldsIndex),\n      l = new Map(),\n      c = [...this.items];\n    this._sortFeatures(c, [i], (e, t, i) => o.getFieldValue(e, t, i));\n    const m = this._getAttributeValues(o, i, c, l),\n      d = this._calculateUniqueValues([m], c, o.returnDistinctValues);\n    for (const u in d) {\n      const {\n          items: t\n        } = d[u],\n        a = await this._createBinsResponse(e, t);\n      if (r.push(...a.features.map(e => ({\n        ...e,\n        attributes: {\n          ...e.attributes,\n          [s ?? i]: u\n        }\n      }))), a.fields) for (const e of a.fields) n.some(t => t.name === e.name) || n.push(e);\n    }\n    return {\n      fields: n,\n      features: r\n    };\n  }\n  async _createBinsResponse(e, t) {\n    const i = e.bin;\n    switch (t = t ?? this.items, i.type) {\n      case \"autoIntervalBin\":\n        return this._createAutoIntervalBinsResponse(_.fromJSON(i), e, t);\n      case \"dateBin\":\n        return this._createDateBinsResponse(V.fromJSON(i), e, t);\n      case \"fixedBoundariesBin\":\n        return this._createFixedBoundariesBinsResponse(v.fromJSON(i), e, t);\n      case \"fixedIntervalBin\":\n        return this._createFixedIntervalBinsResponse(b.fromJSON(i), e, t);\n    }\n  }\n  async _createAutoIntervalBinsResponse(e, t, i) {\n    const {\n        field: s,\n        normalizationField: a,\n        numBins: r,\n        normalizationType: n,\n        normalizationTotal: o,\n        start: l,\n        end: u\n      } = e,\n      c = await this._getDataValues({\n        field: e.field,\n        normalizationField: e.normalizationField,\n        normalizationType: e.normalizationType,\n        normalizationTotal: e.normalizationTotal,\n        timeZone: t.outTimeReference?.ianaTimeZone\n      }, i),\n      m = j(c, {\n        field: s,\n        normalizationField: a,\n        normalizationType: n,\n        normalizationTotal: o,\n        numBins: r,\n        minValue: p(l, !1),\n        maxValue: p(u, !1)\n      }),\n      d = await this._calculateHistogramBins(c, m, i);\n    return this._createFeaturesFromHistogramBins(d, t);\n  }\n  async _createDateBinsResponse(e, i, s) {\n    const {\n        field: a,\n        interval: r,\n        start: n,\n        end: o\n      } = e,\n      l = r.unit,\n      u = \"quarters\" === l ? 3 * t.months : t[l],\n      c = r.value * u / t.milliseconds,\n      m = await this._getDataValues({\n        field: e.field,\n        timeZone: i.outTimeReference?.ianaTimeZone\n      }, s),\n      d = F(this.fieldsIndex.get(a)),\n      h = j(m, {\n        field: a,\n        classificationMethod: \"defined-interval\",\n        definedInterval: c,\n        minValue: p(n, d),\n        maxValue: p(o, d)\n      }, !0),\n      f = await this._calculateHistogramBins(m, h, s);\n    return this._createFeaturesFromHistogramBins(f, i);\n  }\n  async _createFixedBoundariesBinsResponse(e, t, i) {\n    const {\n        field: s\n      } = e,\n      a = await this._getDataValues({\n        field: s,\n        timeZone: t.outTimeReference?.ianaTimeZone\n      }, i),\n      r = F(this.fieldsIndex.get(s)),\n      n = e.boundaries.map(e => p(e, r)).sort((e, t) => e - t),\n      o = [];\n    for (let c = 0; c < n.length - 1; c++) o.push([n[c], n[c + 1]]);\n    const l = {\n        intervals: o,\n        min: n.at(0),\n        max: n.at(-1)\n      },\n      u = await this._calculateHistogramBins(a, l, i);\n    return this._createFeaturesFromHistogramBins(u, t);\n  }\n  async _createFixedIntervalBinsResponse(e, t, i) {\n    const {\n        field: s,\n        interval: a,\n        start: r,\n        end: n\n      } = e,\n      o = await this._getDataValues({\n        field: e.field,\n        normalizationField: e.normalizationField,\n        normalizationType: e.normalizationType,\n        normalizationTotal: e.normalizationTotal,\n        timeZone: t.outTimeReference?.ianaTimeZone\n      }, i),\n      l = F(this.fieldsIndex.get(s)),\n      u = j(o, {\n        field: s,\n        classificationMethod: \"defined-interval\",\n        definedInterval: a,\n        minValue: p(r, l),\n        maxValue: p(n, l)\n      }, !0),\n      c = await this._calculateHistogramBins(o, u, i);\n    return this._createFeaturesFromHistogramBins(c, t);\n  }\n  async _createFeaturesFromHistogramBins(e, t) {\n    const {\n        upperBoundaryAlias: i,\n        lowerBoundaryAlias: s\n      } = t,\n      a = s || \"lowerBoundary\",\n      r = i || \"upperBoundary\",\n      n = [],\n      o = [{\n        name: a,\n        alias: a,\n        type: \"esriFieldTypeDouble\"\n      }, {\n        name: r,\n        alias: r,\n        type: \"esriFieldTypeDouble\"\n      }],\n      l = t.bin?.stackBy?.value,\n      u = t.bin?.stackBy?.outAlias;\n    l && o.push({\n      name: G,\n      alias: G,\n      type: \"esriFieldTypeInteger\"\n    }, {\n      name: u ?? l,\n      alias: u ?? l,\n      type: \"esriFieldTypeString\"\n    });\n    let c = 0;\n    for (const m of e) {\n      const {\n          minValue: e,\n          maxValue: i,\n          items: s\n        } = m,\n        d = {\n          attributes: {}\n        };\n      let h;\n      if (d.attributes[a] = e, d.attributes[r] = i, l ? (h = await this._createStatisticsQueryResponse({\n        ...t,\n        groupByFieldsForStatistics: [l],\n        orderByFields: [l]\n      }, s), d.attributes[G] = ++c, \"flat\" === t.bin.jsonStyle ? n.push(...h.features.map(_ref5 => {\n        let {\n          attributes: {\n            EXPR_1: e,\n            ...t\n          },\n          ...i\n        } = _ref5;\n        return {\n          ...i,\n          attributes: u ?? e ? {\n            ...t,\n            [u ?? e]: e,\n            ...d.attributes\n          } : {\n            ...t,\n            ...d.attributes\n          }\n        };\n      })) : (d.stackedAttributes = h.features.map(_ref6 => {\n        let {\n          attributes: {\n            EXPR_1: e,\n            ...t\n          }\n        } = _ref6;\n        return u ?? e ? {\n          ...t,\n          [u ?? e]: e\n        } : t;\n      }), n.push(d))) : (t.bin?.splitBy && (d.attributes[G] = ++c), h = await this._createStatisticsQueryResponse(t, s, d), n.push(d)), h.fields) for (const t of h.fields) o.some(e => e.name === t.name) || o.push(t);\n    }\n    return \"desc\" === t.binOrder && n.reverse(), {\n      fields: o,\n      features: n\n    };\n  }\n}\nfunction E(e, t, i, s) {\n  const a = s.x - i.x,\n    r = s.y - i.y,\n    n = t.x - i.x,\n    o = t.y - i.y,\n    l = a * a + r * r;\n  if (0 === l) return !1;\n  const u = n * a + o * r,\n    c = Math.min(1, Math.max(0, u / l));\n  return e.x = i.x + a * c, e.y = i.y + r * c, !0;\n}\nfunction O(e, t) {\n  return e ? t ? 4 : 3 : t ? 3 : 2;\n}\nclass H {\n  constructor(e, t) {\n    this.coords = e, this.coordsIndex = t;\n  }\n  get x() {\n    return this.coords[this.coordsIndex];\n  }\n  get y() {\n    return this.coords[this.coordsIndex + 1];\n  }\n  get z() {\n    return this.coords[this.coordsIndex + 2];\n  }\n}\nconst Q = [1];\nexport { C as QueryEngineResult };","map":{"version":3,"names":["clone","e","millisecondsPerTimeUnit","t","polygonCentroid","i","extentCentroid","s","getPolygonExtent","a","getGeometryExtent","r","toQuantizationTransform","n","isValid","o","equals","l","u","cleanFromGeometryEngine","c","getGeometry","m","transformCentroid","d","project","h","getDateInNumber","p","makeEdgeCandidate","f","makeVertexCandidate","y","isDateField","g","isDateOnlyField","x","isTimestampOffsetField","I","isStringField","T","isTimeOnlyField","F","_","V","v","b","isNullCountSupported","S","calculateStringStatistics","R","calculateStatistics","B","processSummaryStatisticsResult","z","calculateUniqueValuesCount","A","createUVResult","w","calculateClassBreaks","M","resolveCBResult","D","calculateHistogram","P","getAttributeComparator","q","calculatePercentile","N","binIndex","Z","getBinParams","j","G","C","constructor","items","query","geometryType","hasM","hasZ","fieldsIndex","objectIdField","spatialReference","featureAdapter","size","length","createQueryResponseForCount","outStatistics","countDistinctValues","groupByFieldsForStatistics","having","Map","Set","statisticType","onStatisticField","has","_getAttributeValues","push","set","_calculateUniqueValues","returnDistinctValues","get","data","join","validateItems","add","createQueryResponse","some","_createExceedsLimitQueryResponse","_createStatisticsQueryResponse","_createFeatureQueryResponse","returnQueryGeometry","geometry","outSR","queryGeometry","createSnappingResponse","O","point","mode","distance","candidates","_getPointCreator","H","coords","isPoint","Q","lengths","returnEdge","coordsIndex","E","getObjectId","Math","sqrt","vertexMode","sort","_ref","_ref2","_ref3","createSummaryStatisticsResponse","field","valueExpression","normalizationField","normalizationType","normalizationTotal","minValue","maxValue","scale","timeZone","outStatisticTypes","_getDataValues","value","fieldType","type","values","supportsNullCount","percentileParams","useSampleStdDev","createUniqueValuesResponse","domains","returnAllCodedValues","field2","field3","fieldDelimiter","createClassBreaksResponse","classificationMethod","standardDeviationInterval","numClasses","createHistogramResponse","numBins","_sortFeatures","slice","reverse","split","toLowerCase","outFields","quantizationParameters","resultRecordCount","resultOffset","returnZ","returnM","includes","fields","map","exceededTransferLimit","features","_createFeatures","objectIdFieldName","transform","orderByFields","returnGeometry","returnCentroid","maxAllowableOffset","getFieldValue","attributes","getAttributes","centroid","getCentroid","min","Number","POSITIVE_INFINITY","maxPointCount","maxRecordCount","maxVertexCount","reduce","name","alias","sqlType","domain","defaultValue","exceedslimit","arguments","undefined","outStatisticFieldName","Object","keys","count","itemPositions","aggregateGeometries","_getAggregateGeometry","_getPercentileValue","_getStatisticValue","forEach","_isAnyDateField","Array","from","convexHull","union","returnDistinct","statisticParameters","orderBy","isDiscrete","getExpressionValues","viewingMode","getDataValues","_calculateHistogramBins","max","intervals","_ref4","createQueryBinsResponse","bin","splitBy","_createBinsResponse","outAlias","valueType","_createAutoIntervalBinsResponse","fromJSON","_createDateBinsResponse","_createFixedBoundariesBinsResponse","_createFixedIntervalBinsResponse","start","end","outTimeReference","ianaTimeZone","_createFeaturesFromHistogramBins","interval","unit","months","milliseconds","definedInterval","boundaries","at","upperBoundaryAlias","lowerBoundaryAlias","stackBy","jsonStyle","_ref5","EXPR_1","stackedAttributes","_ref6","binOrder","QueryEngineResult"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/node_modules/@arcgis/core/layers/graphics/data/QueryEngineResult.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{clone as e}from\"../../../core/lang.js\";import{millisecondsPerTimeUnit as t}from\"../../../core/timeUtils.js\";import{polygonCentroid as i,extentCentroid as s}from\"../../../geometry/support/centroid.js\";import{getPolygonExtent as a,getGeometryExtent as r}from\"../../../geometry/support/extentUtils.js\";import{toQuantizationTransform as n}from\"../../../geometry/support/quantizationUtils.js\";import{isValid as o,equals as l}from\"../../../geometry/support/spatialReferenceUtils.js\";import u from\"./AttributesBuilder.js\";import{cleanFromGeometryEngine as c,getGeometry as m,transformCentroid as d}from\"./geometryUtils.js\";import{project as h}from\"./projectionSupport.js\";import{getDateInNumber as p}from\"./queryUtils.js\";import{makeEdgeCandidate as f,makeVertexCandidate as y}from\"./SnappingCandidate.js\";import{isDateField as g,isDateOnlyField as x,isTimestampOffsetField as I,isStringField as T,isTimeOnlyField as F}from\"../../support/fieldUtils.js\";import _ from\"../../../rest/support/AutoIntervalBinParameters.js\";import V from\"../../../rest/support/DateBinParameters.js\";import v from\"../../../rest/support/FixedBoundariesBinParameters.js\";import b from\"../../../rest/support/FixedIntervalBinParameters.js\";import{isNullCountSupported as S,calculateStringStatistics as R,calculateStatistics as B,processSummaryStatisticsResult as z,calculateUniqueValuesCount as A,createUVResult as w,calculateClassBreaks as M,resolveCBResult as D,calculateHistogram as P,getAttributeComparator as q,calculatePercentile as N,binIndex as Z,getBinParams as j}from\"../../../statistics/utils.js\";const G=\"bin\";class C{constructor(e,t,i){this.items=e,this.query=t,this.geometryType=i.geometryType,this.hasM=i.hasM,this.hasZ=i.hasZ,this.fieldsIndex=i.fieldsIndex,this.objectIdField=i.objectIdField,this.spatialReference=i.spatialReference,this.featureAdapter=i.featureAdapter}get size(){return this.items.length}createQueryResponseForCount(){const e=new u(this.query,this.featureAdapter,this.fieldsIndex);if(!this.query.outStatistics)return e.countDistinctValues(this.items);const{groupByFieldsForStatistics:t,having:i,outStatistics:s}=this.query,a=t?.length;if(!!!a)return 1;const r=new Map,n=new Map,o=new Set;for(const l of s){const{statisticType:s}=l,a=\"exceedslimit\"!==s?l.onStatisticField:void 0;if(!n.has(a)){const i=[];for(const s of t){const t=this._getAttributeValues(e,s,this.items,r);i.push(t)}n.set(a,this._calculateUniqueValues(i,this.items,e.returnDistinctValues))}const u=n.get(a);for(const t in u){const{data:s,items:a}=u[t],r=s.join(\",\");i&&!e.validateItems(a,i)||o.add(r)}}return o.size}async createQueryResponse(){let e;if(this.query.outStatistics){e=this.query.outStatistics.some((e=>\"exceedslimit\"===e.statisticType))?this._createExceedsLimitQueryResponse():await this._createStatisticsQueryResponse(this.query,this.items)}else e=this._createFeatureQueryResponse(this.query);if(this.query.returnQueryGeometry){const t=this.query.geometry;o(this.query.outSR)&&!l(t.spatialReference,this.query.outSR)?e.queryGeometry=c({spatialReference:this.query.outSR,...h(t,t.spatialReference,this.query.outSR)}):e.queryGeometry=c({spatialReference:this.query.outSR,...t})}return e}createSnappingResponse(e,t){const i=this.featureAdapter,s=O(this.hasZ,this.hasM),{point:a,mode:r}=e,n=\"number\"==typeof e.distance?e.distance:e.distance.x,o=\"number\"==typeof e.distance?e.distance:e.distance.y,l={candidates:[]},u=\"esriGeometryPolygon\"===this.geometryType,c=\"esriGeometryPolyline\"===this.geometryType,m=this._getPointCreator(r,this.spatialReference,t),d=new H(null,0),h=new H(null,0),p={x:0,y:0,z:0};for(const g of this.items){const t=i.getGeometry(g);if(null==t)continue;const{coords:r}=t,x=t.isPoint?Q:t.lengths;if(d.coords=r,h.coords=r,e.returnEdge){let e=0;for(let t=0;t<x.length;t++){const r=x[t],c=e;for(let t=0;t<r;t++,e+=s){if(!u&&t===r-1)continue;const y=d;y.coordsIndex=e;const x=h;x.coordsIndex=t===r-1?c:e+s;const I=p;if(!E(p,a,y,x))continue;const T=(a.x-I.x)/n,F=(a.y-I.y)/o,_=T*T+F*F;_<=1&&l.candidates.push(f(i.getObjectId(g),m(I),Math.sqrt(_),m(y),m(x)))}}}if(\"all\"===e.vertexMode){let e=0;for(let t=0;t<x.length;t++){const r=x[t],c=e,p=h;p.coordsIndex=c;for(let t=0;t<r;t++,e+=s){const s=d;if(s.coordsIndex=e,u&&t===r-1&&s.x===p.x&&s.y===p.y)continue;const c=(a.x-s.x)/n,h=(a.y-s.y)/o,f=c*c+h*h;f<=1&&l.candidates.push(y(i.getObjectId(g),m(s),Math.sqrt(f)))}}}else if(c&&\"ends\"===e.vertexMode){let e=0;const t=[];for(let i=0;i<x.length;i++){t.push(e);const a=x[i];e+=a*s,!u&&a>1&&t.push(e-s)}for(const s of t){const e=d;e.coordsIndex=s;const t=(a.x-e.x)/n,r=(a.y-e.y)/o,u=t*t+r*r;u<=1&&l.candidates.push(y(i.getObjectId(g),m(e),Math.sqrt(u)))}}}return l.candidates.sort(((e,t)=>e.distance-t.distance)),l}_getPointCreator(e,t,i){const s=null==i||l(t,i)?e=>e:e=>h(e,t,i),{hasZ:a}=this,r=0;return\"3d\"===e?a?({x:e,y:t,z:i})=>s({x:e,y:t,z:i}):({x:e,y:t})=>s({x:e,y:t,z:r}):({x:e,y:t})=>s({x:e,y:t})}async createSummaryStatisticsResponse(e){const{field:t,valueExpression:i,normalizationField:s,normalizationType:a,normalizationTotal:r,minValue:n,maxValue:o,scale:l,timeZone:u,outStatisticTypes:c}=e,m=this.fieldsIndex.get(t),d=g(m)||x(m)||I(m),h=await this._getDataValues({field:t,valueExpression:i,normalizationField:s,normalizationType:a,normalizationTotal:r,scale:l,timeZone:u},this.items),p=S({normalizationType:a,normalizationField:s,minValue:n,maxValue:o}),f={value:.5,fieldType:m?.type},y=T(m)?R({values:h,supportsNullCount:p,percentileParams:f,outStatisticTypes:c}):B({values:h,minValue:n,maxValue:o,useSampleStdDev:!a,supportsNullCount:p,percentileParams:f,outStatisticTypes:c});return z(y,c,d)}async createUniqueValuesResponse(e){const{field:t,valueExpression:i,domains:s,returnAllCodedValues:a,scale:r,timeZone:n}=e,o=await this._getDataValues({field:t,field2:e.field2,field3:e.field3,fieldDelimiter:e.fieldDelimiter,valueExpression:i,scale:r,timeZone:n},this.items,!1),l=A(o);return w(l,s,a,e.fieldDelimiter)}async createClassBreaksResponse(e){const{field:t,valueExpression:i,normalizationField:s,normalizationType:a,normalizationTotal:r,classificationMethod:n,standardDeviationInterval:o,minValue:l,maxValue:u,numClasses:c,scale:m,timeZone:d}=e,h=await this._getDataValues({field:t,valueExpression:i,normalizationField:s,normalizationType:a,normalizationTotal:r,scale:m,timeZone:d},this.items),p=M(h,{field:t,normalizationField:s,normalizationType:a,normalizationTotal:r,classificationMethod:n,standardDeviationInterval:o,minValue:l,maxValue:u,numClasses:c});return D(p,n)}async createHistogramResponse(e){const{field:t,valueExpression:i,normalizationField:s,normalizationType:a,normalizationTotal:r,classificationMethod:n,standardDeviationInterval:o,minValue:l,maxValue:u,numBins:c,scale:m,timeZone:d}=e,h=await this._getDataValues({field:t,valueExpression:i,normalizationField:s,normalizationType:a,normalizationTotal:r,scale:m,timeZone:d},this.items);return P(h,{field:t,normalizationField:s,normalizationType:a,normalizationTotal:r,classificationMethod:n,standardDeviationInterval:o,minValue:l,maxValue:u,numBins:c})}_sortFeatures(e,t,i){if(e.length>1&&t?.length)for(const s of t.slice().reverse()){const t=s.split(\" \"),a=t[0],r=this.fieldsIndex.get(a),n=!!t[1]&&\"desc\"===t[1].toLowerCase(),o=q(r?.type,n);e.sort(((e,t)=>{const s=i(e,a,r),n=i(t,a,r);return o(s,n)}))}}_createFeatureQueryResponse(e){const{items:t,geometryType:i,hasM:s,hasZ:a,objectIdField:r,spatialReference:o}=this,{outFields:l,outSR:u,quantizationParameters:m,resultRecordCount:d,resultOffset:h,returnZ:p,returnM:f}=e,y=null!=d&&t.length>(h||0)+d,g=l&&(l.includes(\"*\")?[...this.fieldsIndex.fields]:l.map((e=>this.fieldsIndex.get(e))));return{exceededTransferLimit:y,features:this._createFeatures(e,t),fields:g,geometryType:i,hasM:s&&f,hasZ:a&&p,objectIdFieldName:r,spatialReference:c(u||o),transform:m&&n(m)||null}}_createFeatures(e,t){const i=new u(e,this.featureAdapter,this.fieldsIndex),{hasM:s,hasZ:a}=this,{orderByFields:r,quantizationParameters:o,returnGeometry:l,returnCentroid:c,maxAllowableOffset:h,resultOffset:p,resultRecordCount:f,returnZ:y=!1,returnM:g=!1}=e,x=a&&y,I=s&&g;let T=[],F=0;const _=[...t];if(this._sortFeatures(_,r,((e,t,s)=>i.getFieldValue(e,t,s))),this.geometryType&&(l||c)){const e=n(o)??void 0,t=\"esriGeometryPolygon\"===this.geometryType||\"esriGeometryPolyline\"===this.geometryType;if(l&&!c)for(const s of _){const a=this.featureAdapter.getGeometry(s),r={attributes:i.getAttributes(s),geometry:m(this.geometryType,this.hasZ,this.hasM,a,h,e,x,I)};t&&a&&!r.geometry&&(r.centroid=d(this,this.featureAdapter.getCentroid(s,this),e)),T[F++]=r}else if(!l&&c)for(const s of _)T[F++]={attributes:i.getAttributes(s),centroid:d(this,this.featureAdapter.getCentroid(s,this),e)};else for(const s of _)T[F++]={attributes:i.getAttributes(s),centroid:d(this,this.featureAdapter.getCentroid(s,this),e),geometry:m(this.geometryType,this.hasZ,this.hasM,this.featureAdapter.getGeometry(s),h,e,x,I)}}else for(const n of _){const e=i.getAttributes(n);e&&(T[F++]={attributes:e})}const V=p||0;if(null!=f){const e=V+f;T=T.slice(V,Math.min(T.length,e))}return T}_createExceedsLimitQueryResponse(){let e=!1,t=Number.POSITIVE_INFINITY,i=Number.POSITIVE_INFINITY,s=Number.POSITIVE_INFINITY;for(const a of this.query.outStatistics??[])if(\"exceedslimit\"===a.statisticType){t=null!=a.maxPointCount?a.maxPointCount:Number.POSITIVE_INFINITY,i=null!=a.maxRecordCount?a.maxRecordCount:Number.POSITIVE_INFINITY,s=null!=a.maxVertexCount?a.maxVertexCount:Number.POSITIVE_INFINITY;break}if(\"esriGeometryPoint\"===this.geometryType)e=this.items.length>t;else if(this.items.length>i)e=!0;else{const t=O(this.hasZ,this.hasM),i=this.featureAdapter;e=this.items.reduce(((e,t)=>{const s=i.getGeometry(t);return e+(null!=s&&s.coords.length||0)}),0)/t>s}return{fields:[{name:\"exceedslimit\",type:\"esriFieldTypeInteger\",alias:\"exceedslimit\",sqlType:\"sqlTypeInteger\",domain:null,defaultValue:null}],features:[{attributes:{exceedslimit:Number(e)}}]}}async _createStatisticsQueryResponse(e,t,i={attributes:{}}){const s=[],a=new Map,r=new Map,n=new Map,o=new Map,l=new u(e,this.featureAdapter,this.fieldsIndex),c=e.outStatistics,{groupByFieldsForStatistics:m,having:d,orderByFields:h,resultRecordCount:p}=e,f=m?.length,y=!!f,g=y?m[0]:null,x=y&&!this.fieldsIndex.get(g);for(const u of c??[]){const{outStatisticFieldName:e,statisticType:c}=u,h=u,p=\"exceedslimit\"!==c?u.onStatisticField:void 0,I=\"percentile_disc\"===c||\"percentile_cont\"===c,F=\"EnvelopeAggregate\"===c||\"CentroidAggregate\"===c||\"ConvexHullAggregate\"===c,_=y&&1===f&&(p===g||x)&&\"count\"===c;if(y){if(!n.has(p)){const e=[];for(const i of m){const s=this._getAttributeValues(l,i,t,a);e.push(s)}n.set(p,this._calculateUniqueValues(e,t,!F&&l.returnDistinctValues))}const i=n.get(p);if(!i)continue;const s=Object.keys(i);for(const r of s){const{count:s,data:n,items:u,itemPositions:c}=i[r],f=n.join(\",\");if(!d||l.validateItems(u,d)){const i=o.get(f)||{attributes:{}};if(F){i.aggregateGeometries||(i.aggregateGeometries={});const{aggregateGeometries:e,outStatisticFieldName:t}=await this._getAggregateGeometry(h,u);i.aggregateGeometries[t]=e}else{let r=null;if(_)r=s;else{const e=this._getAttributeValues(l,p,t,a),i=c.map((t=>e[t]));r=I&&\"statisticParameters\"in h?this._getPercentileValue(h,i):this._getStatisticValue(h,i,null,l.returnDistinctValues)}i.attributes[e]=r}let r=0;m.forEach(((e,t)=>i.attributes[this.fieldsIndex.get(e)?e:\"EXPR_\"+ ++r]=n[t])),o.set(f,i)}}}else if(F){i.aggregateGeometries||(i.aggregateGeometries={});const{aggregateGeometries:e,outStatisticFieldName:s}=await this._getAggregateGeometry(h,t);i.aggregateGeometries[s]=e}else{const s=this._getAttributeValues(l,p,t,a);i.attributes[e]=I&&\"statisticParameters\"in h?this._getPercentileValue(h,s):this._getStatisticValue(h,s,r,l.returnDistinctValues)}const V=\"min\"!==c&&\"max\"!==c||!T(this.fieldsIndex.get(p))&&!this._isAnyDateField(p)?null:this.fieldsIndex.get(p)?.type;s.push({name:e,alias:e,type:V||\"esriFieldTypeDouble\"})}const I=y?Array.from(o.values()):[i];return this._sortFeatures(I,h,((e,t)=>e.attributes[t])),p&&(I.length=Math.min(p,I.length)),{fields:s,features:I}}_isAnyDateField(e){const t=this.fieldsIndex.get(e);return g(t)||x(t)||I(t)||F(t)}async _getAggregateGeometry(e,t){const{convexHull:n,union:o}=await import(\"../../../geometry/geometryEngineJSON.js\"),{statisticType:l,outStatisticFieldName:u}=e,{featureAdapter:c,spatialReference:d,geometryType:h,hasZ:p,hasM:f}=this,y=t.map((e=>m(h,p,f,c.getGeometry(e)))),g=n(d,y,!0)[0],x={aggregateGeometries:null,outStatisticFieldName:null};if(\"EnvelopeAggregate\"===l){const e=g?a(g):r(o(d,y));x.aggregateGeometries={...e,spatialReference:d},x.outStatisticFieldName=u||\"extent\"}else if(\"CentroidAggregate\"===l){const e=g?i(g):s(r(o(d,y)));x.aggregateGeometries={x:e[0],y:e[1],spatialReference:d},x.outStatisticFieldName=u||\"centroid\"}else\"ConvexHullAggregate\"===l&&(x.aggregateGeometries=g,x.outStatisticFieldName=u||\"convexHull\");return x}_getStatisticValue(e,t,i,s){const{onStatisticField:a,statisticType:r}=e;let n=null;n=i?.has(a)?i.get(a):T(this.fieldsIndex.get(a))||this._isAnyDateField(a)?R({values:t,returnDistinct:s}):B({values:s?[...new Set(t)]:t,minValue:null,maxValue:null,useSampleStdDev:!0}),i&&i.set(a,n);return n[\"var\"===r?\"variance\":r]}_getPercentileValue(e,t){const{onStatisticField:i,statisticParameters:s,statisticType:a}=e,{value:r,orderBy:n}=s,o=this.fieldsIndex.get(i);return N(t,{value:r,orderBy:n,fieldType:o?.type,isDiscrete:\"percentile_disc\"===a})}_getAttributeValues(e,t,i,s){if(s.has(t))return s.get(t);const a=this.fieldsIndex.get(t),r=i.map((i=>e.getFieldValue(i,t,a)));return s.set(t,r),r}_calculateUniqueValues(e,t,i){const s={},a=t.length;for(let r=0;r<a;r++){const a=t[r],n=[];for(const t of e)n.push(t[r]);const o=n.join(\",\");null==s[o]?s[o]={count:1,data:n,items:[a],itemPositions:[r]}:(i||s[o].count++,s[o].items.push(a),s[o].itemPositions.push(r))}return s}async _getDataValues(t,i,s=!0){const a=new u(this.query,this.featureAdapter,this.fieldsIndex),{valueExpression:r,scale:n,timeZone:o}=t;return r?a.getExpressionValues(i,r,{viewingMode:\"map\",scale:n,spatialReference:this.query.outSR||this.spatialReference},{geometryType:this.geometryType,hasZ:this.hasZ,hasM:this.hasM},o):a.getDataValues(i,e(t),s)}async _calculateHistogramBins(e,t,i){if(null==t.min&&null==t.max)return[];const s=t.intervals,a=t.min??0,r=t.max??0,n=s.map((([e,t])=>({minValue:e,maxValue:t,count:0,items:[]})));for(let o=0;o<e.length;o++){const t=e[o],l=i[o];if(null!=t&&t>=a&&t<=r){const e=Z(s,t);e>-1&&(n[e].count++,n[e].items.push(l))}}return n}async createQueryBinsResponse(e){const t=e.bin?.splitBy;if(!t)return this._createBinsResponse(e);const{value:i,outAlias:s,valueType:a}=t,r=[],n=[{name:s??i,alias:s??i,type:a??\"esriFieldTypeString\"},{name:G,alias:G,type:\"esriFieldTypeInteger\"}],o=new u(e,this.featureAdapter,this.fieldsIndex),l=new Map,c=[...this.items];this._sortFeatures(c,[i],((e,t,i)=>o.getFieldValue(e,t,i)));const m=this._getAttributeValues(o,i,c,l),d=this._calculateUniqueValues([m],c,o.returnDistinctValues);for(const u in d){const{items:t}=d[u],a=await this._createBinsResponse(e,t);if(r.push(...a.features.map((e=>({...e,attributes:{...e.attributes,[s??i]:u}})))),a.fields)for(const e of a.fields)n.some((t=>t.name===e.name))||n.push(e)}return{fields:n,features:r}}async _createBinsResponse(e,t){const i=e.bin;switch(t=t??this.items,i.type){case\"autoIntervalBin\":return this._createAutoIntervalBinsResponse(_.fromJSON(i),e,t);case\"dateBin\":return this._createDateBinsResponse(V.fromJSON(i),e,t);case\"fixedBoundariesBin\":return this._createFixedBoundariesBinsResponse(v.fromJSON(i),e,t);case\"fixedIntervalBin\":return this._createFixedIntervalBinsResponse(b.fromJSON(i),e,t)}}async _createAutoIntervalBinsResponse(e,t,i){const{field:s,normalizationField:a,numBins:r,normalizationType:n,normalizationTotal:o,start:l,end:u}=e,c=await this._getDataValues({field:e.field,normalizationField:e.normalizationField,normalizationType:e.normalizationType,normalizationTotal:e.normalizationTotal,timeZone:t.outTimeReference?.ianaTimeZone},i),m=j(c,{field:s,normalizationField:a,normalizationType:n,normalizationTotal:o,numBins:r,minValue:p(l,!1),maxValue:p(u,!1)}),d=await this._calculateHistogramBins(c,m,i);return this._createFeaturesFromHistogramBins(d,t)}async _createDateBinsResponse(e,i,s){const{field:a,interval:r,start:n,end:o}=e,l=r.unit,u=\"quarters\"===l?3*t.months:t[l],c=r.value*u/t.milliseconds,m=await this._getDataValues({field:e.field,timeZone:i.outTimeReference?.ianaTimeZone},s),d=F(this.fieldsIndex.get(a)),h=j(m,{field:a,classificationMethod:\"defined-interval\",definedInterval:c,minValue:p(n,d),maxValue:p(o,d)},!0),f=await this._calculateHistogramBins(m,h,s);return this._createFeaturesFromHistogramBins(f,i)}async _createFixedBoundariesBinsResponse(e,t,i){const{field:s}=e,a=await this._getDataValues({field:s,timeZone:t.outTimeReference?.ianaTimeZone},i),r=F(this.fieldsIndex.get(s)),n=e.boundaries.map((e=>p(e,r))).sort(((e,t)=>e-t)),o=[];for(let c=0;c<n.length-1;c++)o.push([n[c],n[c+1]]);const l={intervals:o,min:n.at(0),max:n.at(-1)},u=await this._calculateHistogramBins(a,l,i);return this._createFeaturesFromHistogramBins(u,t)}async _createFixedIntervalBinsResponse(e,t,i){const{field:s,interval:a,start:r,end:n}=e,o=await this._getDataValues({field:e.field,normalizationField:e.normalizationField,normalizationType:e.normalizationType,normalizationTotal:e.normalizationTotal,timeZone:t.outTimeReference?.ianaTimeZone},i),l=F(this.fieldsIndex.get(s)),u=j(o,{field:s,classificationMethod:\"defined-interval\",definedInterval:a,minValue:p(r,l),maxValue:p(n,l)},!0),c=await this._calculateHistogramBins(o,u,i);return this._createFeaturesFromHistogramBins(c,t)}async _createFeaturesFromHistogramBins(e,t){const{upperBoundaryAlias:i,lowerBoundaryAlias:s}=t,a=s||\"lowerBoundary\",r=i||\"upperBoundary\",n=[],o=[{name:a,alias:a,type:\"esriFieldTypeDouble\"},{name:r,alias:r,type:\"esriFieldTypeDouble\"}],l=t.bin?.stackBy?.value,u=t.bin?.stackBy?.outAlias;l&&o.push({name:G,alias:G,type:\"esriFieldTypeInteger\"},{name:u??l,alias:u??l,type:\"esriFieldTypeString\"});let c=0;for(const m of e){const{minValue:e,maxValue:i,items:s}=m,d={attributes:{}};let h;if(d.attributes[a]=e,d.attributes[r]=i,l?(h=await this._createStatisticsQueryResponse({...t,groupByFieldsForStatistics:[l],orderByFields:[l]},s),d.attributes[G]=++c,\"flat\"===t.bin.jsonStyle?n.push(...h.features.map((({attributes:{EXPR_1:e,...t},...i})=>({...i,attributes:u??e?{...t,[u??e]:e,...d.attributes}:{...t,...d.attributes}})))):(d.stackedAttributes=h.features.map((({attributes:{EXPR_1:e,...t}})=>u??e?{...t,[u??e]:e}:t)),n.push(d))):(t.bin?.splitBy&&(d.attributes[G]=++c),h=await this._createStatisticsQueryResponse(t,s,d),n.push(d)),h.fields)for(const t of h.fields)o.some((e=>e.name===t.name))||o.push(t)}return\"desc\"===t.binOrder&&n.reverse(),{fields:o,features:n}}}function E(e,t,i,s){const a=s.x-i.x,r=s.y-i.y,n=t.x-i.x,o=t.y-i.y,l=a*a+r*r;if(0===l)return!1;const u=n*a+o*r,c=Math.min(1,Math.max(0,u/l));return e.x=i.x+a*c,e.y=i.y+r*c,!0}function O(e,t){return e?t?4:3:t?3:2}class H{constructor(e,t){this.coords=e,this.coordsIndex=t}get x(){return this.coords[this.coordsIndex]}get y(){return this.coords[this.coordsIndex+1]}get z(){return this.coords[this.coordsIndex+2]}}const Q=[1];export{C as QueryEngineResult};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}