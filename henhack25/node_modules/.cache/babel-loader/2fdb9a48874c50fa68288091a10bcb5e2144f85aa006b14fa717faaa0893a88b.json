{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n// Any new exports need to be added to the export statement in\n// `packages/lit/src/index.all.ts`.\nimport { html as coreHtml, svg as coreSvg, mathml as coreMathml } from './lit-html.js';\n/**\n * Prevents JSON injection attacks.\n *\n * The goals of this brand:\n *   1) fast to check\n *   2) code is small on the wire\n *   3) multiple versions of Lit in a single page will all produce mutually\n *      interoperable StaticValues\n *   4) normal JSON.parse (without an unusual reviver) can not produce a\n *      StaticValue\n *\n * Symbols satisfy (1), (2), and (4). We use Symbol.for to satisfy (3), but\n * we don't care about the key, so we break ties via (2) and use the empty\n * string.\n */\nconst brand = Symbol.for('');\n/** Safely extracts the string part of a StaticValue. */\nconst unwrapStaticValue = value => {\n  if (value?.r !== brand) {\n    return undefined;\n  }\n  return value?.['_$litStatic$'];\n};\n/**\n * Wraps a string so that it behaves like part of the static template\n * strings instead of a dynamic value.\n *\n * Users must take care to ensure that adding the static string to the template\n * results in well-formed HTML, or else templates may break unexpectedly.\n *\n * Note that this function is unsafe to use on untrusted content, as it will be\n * directly parsed into HTML. Do not pass user input to this function\n * without sanitizing it.\n *\n * Static values can be changed, but they will cause a complete re-render\n * since they effectively create a new template.\n */\nexport const unsafeStatic = value => ({\n  ['_$litStatic$']: value,\n  r: brand\n});\nconst textFromStatic = value => {\n  if (value['_$litStatic$'] !== undefined) {\n    return value['_$litStatic$'];\n  } else {\n    throw new Error(`Value passed to 'literal' function must be a 'literal' result: ${value}. Use 'unsafeStatic' to pass non-literal values, but\n            take care to ensure page security.`);\n  }\n};\n/**\n * Tags a string literal so that it behaves like part of the static template\n * strings instead of a dynamic value.\n *\n * The only values that may be used in template expressions are other tagged\n * `literal` results or `unsafeStatic` values (note that untrusted content\n * should never be passed to `unsafeStatic`).\n *\n * Users must take care to ensure that adding the static string to the template\n * results in well-formed HTML, or else templates may break unexpectedly.\n *\n * Static values can be changed, but they will cause a complete re-render since\n * they effectively create a new template.\n */\nexport const literal = (strings, ...values) => ({\n  ['_$litStatic$']: values.reduce((acc, v, idx) => acc + textFromStatic(v) + strings[idx + 1], strings[0]),\n  r: brand\n});\nconst stringsCache = new Map();\n/**\n * Wraps a lit-html template tag (`html` or `svg`) to add static value support.\n */\nexport const withStatic = coreTag => (strings, ...values) => {\n  const l = values.length;\n  let staticValue;\n  let dynamicValue;\n  const staticStrings = [];\n  const dynamicValues = [];\n  let i = 0;\n  let hasStatics = false;\n  let s;\n  while (i < l) {\n    s = strings[i];\n    // Collect any unsafeStatic values, and their following template strings\n    // so that we treat a run of template strings and unsafe static values as\n    // a single template string.\n    while (i < l && (dynamicValue = values[i], staticValue = unwrapStaticValue(dynamicValue)) !== undefined) {\n      s += staticValue + strings[++i];\n      hasStatics = true;\n    }\n    // If the last value is static, we don't need to push it.\n    if (i !== l) {\n      dynamicValues.push(dynamicValue);\n    }\n    staticStrings.push(s);\n    i++;\n  }\n  // If the last value isn't static (which would have consumed the last\n  // string), then we need to add the last string.\n  if (i === l) {\n    staticStrings.push(strings[l]);\n  }\n  if (hasStatics) {\n    const key = staticStrings.join('$$lit$$');\n    strings = stringsCache.get(key);\n    if (strings === undefined) {\n      // Beware: in general this pattern is unsafe, and doing so may bypass\n      // lit's security checks and allow an attacker to execute arbitrary\n      // code and inject arbitrary content.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      staticStrings.raw = staticStrings;\n      stringsCache.set(key, strings = staticStrings);\n    }\n    values = dynamicValues;\n  }\n  return coreTag(strings, ...values);\n};\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const html = withStatic(coreHtml);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const svg = withStatic(coreSvg);\n/**\n * Interprets a template literal as MathML fragment that can efficiently render\n * to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const mathml = withStatic(coreMathml);","map":{"version":3,"names":["html","coreHtml","svg","coreSvg","mathml","coreMathml","brand","Symbol","for","unwrapStaticValue","value","r","undefined","unsafeStatic","textFromStatic","Error","literal","strings","values","reduce","acc","v","idx","stringsCache","Map","withStatic","coreTag","l","length","staticValue","dynamicValue","staticStrings","dynamicValues","i","hasStatics","s","push","key","join","get","raw","set"],"sources":["C:\\Users\\nolan\\tasks\\HenHacks2025\\henhack25\\node_modules\\lit-html\\src\\static.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// Any new exports need to be added to the export statement in\n// `packages/lit/src/index.all.ts`.\n\nimport {\n  html as coreHtml,\n  svg as coreSvg,\n  mathml as coreMathml,\n  TemplateResult,\n} from './lit-html.js';\n\nexport interface StaticValue {\n  /** The value to interpolate as-is into the template. */\n  _$litStatic$: string;\n\n  /**\n   * A value that can't be decoded from ordinary JSON, make it harder for\n   * an attacker-controlled data that goes through JSON.parse to produce a valid\n   * StaticValue.\n   */\n  r: typeof brand;\n}\n\n/**\n * Prevents JSON injection attacks.\n *\n * The goals of this brand:\n *   1) fast to check\n *   2) code is small on the wire\n *   3) multiple versions of Lit in a single page will all produce mutually\n *      interoperable StaticValues\n *   4) normal JSON.parse (without an unusual reviver) can not produce a\n *      StaticValue\n *\n * Symbols satisfy (1), (2), and (4). We use Symbol.for to satisfy (3), but\n * we don't care about the key, so we break ties via (2) and use the empty\n * string.\n */\nconst brand = Symbol.for('');\n\n/** Safely extracts the string part of a StaticValue. */\nconst unwrapStaticValue = (value: unknown): string | undefined => {\n  if ((value as Partial<StaticValue>)?.r !== brand) {\n    return undefined;\n  }\n  return (value as Partial<StaticValue>)?.['_$litStatic$'];\n};\n\n/**\n * Wraps a string so that it behaves like part of the static template\n * strings instead of a dynamic value.\n *\n * Users must take care to ensure that adding the static string to the template\n * results in well-formed HTML, or else templates may break unexpectedly.\n *\n * Note that this function is unsafe to use on untrusted content, as it will be\n * directly parsed into HTML. Do not pass user input to this function\n * without sanitizing it.\n *\n * Static values can be changed, but they will cause a complete re-render\n * since they effectively create a new template.\n */\nexport const unsafeStatic = (value: string): StaticValue => ({\n  ['_$litStatic$']: value,\n  r: brand,\n});\n\nconst textFromStatic = (value: StaticValue) => {\n  if (value['_$litStatic$'] !== undefined) {\n    return value['_$litStatic$'];\n  } else {\n    throw new Error(\n      `Value passed to 'literal' function must be a 'literal' result: ${value}. Use 'unsafeStatic' to pass non-literal values, but\n            take care to ensure page security.`\n    );\n  }\n};\n\n/**\n * Tags a string literal so that it behaves like part of the static template\n * strings instead of a dynamic value.\n *\n * The only values that may be used in template expressions are other tagged\n * `literal` results or `unsafeStatic` values (note that untrusted content\n * should never be passed to `unsafeStatic`).\n *\n * Users must take care to ensure that adding the static string to the template\n * results in well-formed HTML, or else templates may break unexpectedly.\n *\n * Static values can be changed, but they will cause a complete re-render since\n * they effectively create a new template.\n */\nexport const literal = (\n  strings: TemplateStringsArray,\n  ...values: unknown[]\n): StaticValue => ({\n  ['_$litStatic$']: values.reduce(\n    (acc, v, idx) => acc + textFromStatic(v as StaticValue) + strings[idx + 1],\n    strings[0]\n  ) as string,\n  r: brand,\n});\n\nconst stringsCache = new Map<string, TemplateStringsArray>();\n\n/**\n * Wraps a lit-html template tag (`html` or `svg`) to add static value support.\n */\nexport const withStatic =\n  (coreTag: typeof coreHtml | typeof coreSvg | typeof coreMathml) =>\n  (strings: TemplateStringsArray, ...values: unknown[]): TemplateResult => {\n    const l = values.length;\n    let staticValue: string | undefined;\n    let dynamicValue: unknown;\n    const staticStrings: Array<string> = [];\n    const dynamicValues: Array<unknown> = [];\n    let i = 0;\n    let hasStatics = false;\n    let s: string;\n\n    while (i < l) {\n      s = strings[i];\n      // Collect any unsafeStatic values, and their following template strings\n      // so that we treat a run of template strings and unsafe static values as\n      // a single template string.\n      while (\n        i < l &&\n        ((dynamicValue = values[i]),\n        (staticValue = unwrapStaticValue(dynamicValue))) !== undefined\n      ) {\n        s += staticValue + strings[++i];\n        hasStatics = true;\n      }\n      // If the last value is static, we don't need to push it.\n      if (i !== l) {\n        dynamicValues.push(dynamicValue);\n      }\n      staticStrings.push(s);\n      i++;\n    }\n    // If the last value isn't static (which would have consumed the last\n    // string), then we need to add the last string.\n    if (i === l) {\n      staticStrings.push(strings[l]);\n    }\n\n    if (hasStatics) {\n      const key = staticStrings.join('$$lit$$');\n      strings = stringsCache.get(key)!;\n      if (strings === undefined) {\n        // Beware: in general this pattern is unsafe, and doing so may bypass\n        // lit's security checks and allow an attacker to execute arbitrary\n        // code and inject arbitrary content.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (staticStrings as any).raw = staticStrings;\n        stringsCache.set(\n          key,\n          (strings = staticStrings as unknown as TemplateStringsArray)\n        );\n      }\n      values = dynamicValues;\n    }\n    return coreTag(strings, ...values);\n  };\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const html = withStatic(coreHtml);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const svg = withStatic(coreSvg);\n\n/**\n * Interprets a template literal as MathML fragment that can efficiently render\n * to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const mathml = withStatic(coreMathml);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}