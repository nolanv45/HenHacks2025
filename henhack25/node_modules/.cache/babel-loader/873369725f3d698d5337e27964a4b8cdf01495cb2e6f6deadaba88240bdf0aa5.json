{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport \"../../../tiling/TileInfoView.js\";\nimport e from \"../../../tiling/TileKey.js\";\nimport \"../../../tiling/TileQueue.js\";\nimport \"../../../tiling/TileStrategy.js\";\nimport { tileSize as s } from \"../definitions.js\";\nimport { MeshData as t } from \"./MeshData.js\";\nconst i = 1,\n  r = 2,\n  n = 4,\n  h = 8,\n  o = 16,\n  c = 32,\n  a = 64,\n  l = 128;\nfunction f(e) {\n  switch (e) {\n    case i:\n    case h:\n    case c:\n      return -1;\n    case r:\n    case a:\n      return 0;\n    case n:\n    case o:\n    case l:\n      return 1;\n  }\n}\nfunction u(e) {\n  switch (e) {\n    case i:\n    case r:\n    case n:\n      return -1;\n    case h:\n    case o:\n      return 0;\n    case c:\n    case a:\n    case l:\n      return 1;\n  }\n}\nconst d = i | h | c,\n  _ = n | o | l,\n  m = i | r | n,\n  p = c | a | l;\nclass g {\n  constructor(e, s, i, r, n = 0) {\n    this.tileKey = e, this._bufferingEnabled = s, this._sizeHint = n, this._meshes = {\n      self: new t(this.id, this._sizeHint),\n      neighbors: new Array()\n    }, this._currentRecordOverlaps = 0, this._currentEntityOverlaps = 0;\n    const h = r ? 1 : 0;\n    this._copyBufferedDataIntoSelf = i && this._bufferingEnabled && e.level === h;\n  }\n  get id() {\n    return this.tileKey.id;\n  }\n  vertexCount() {\n    return this._meshes.self.vertexCount();\n  }\n  indexCount() {\n    return this._meshes.self.indexCount();\n  }\n  indexEnsureSize(e) {\n    this._meshes.self.indexEnsureSize(e);\n  }\n  entityStart(e, s = e) {\n    this._currentEntityOverlaps = 0, this._meshes.self.entityStart(e, s);\n  }\n  entityRecordCount() {\n    return this._meshes.self.entityRecordCount();\n  }\n  entityEnd() {\n    if (this._meshes.self.entityEnd(), this._bufferingEnabled) {\n      if (this._copyBufferedDataIntoSelf) return;\n      for (let e = 0; e < 8; e++) {\n        const s = 1 << e;\n        !!(this._currentEntityOverlaps & s) && this._meshes.neighbors[e].entityEnd();\n      }\n    }\n  }\n  recordStart(e, s, t) {\n    this._currentRecordOverlaps = 0, this._meshes.self.recordStart(e, s, t);\n  }\n  recordEnd(e = 0) {\n    const s = this._meshes.self.recordEnd(this._currentRecordOverlaps);\n    return s && 0 !== this._currentRecordOverlaps ? (this._copyIntoNeighbors(), this._currentEntityOverlaps |= this._currentRecordOverlaps, !0) : s;\n  }\n  recordBounds(e, s, t, i) {\n    this._bufferingEnabled && this._addOverlap(e, s, t, i);\n  }\n  recordCount() {\n    return this._meshes.self.recordCount();\n  }\n  metricStart(e) {\n    this._meshes.self.metricStart(e);\n  }\n  metricBoxWrite(e) {\n    this._meshes.self.metricBoxWrite(e);\n  }\n  metricEnd() {\n    this._meshes.self.metricEnd();\n  }\n  vertexWrite(e) {\n    this._meshes.self.vertexWrite(e);\n  }\n  vertexWriteF32(e) {\n    this._meshes.self.vertexWriteF32(e);\n  }\n  vertexWriteRegion(e) {\n    this._meshes.self.vertexWriteRegion(e);\n  }\n  indexWrite(e) {\n    this._meshes.self.indexWrite(e);\n  }\n  serialize(s) {\n    const t = {\n        message: [],\n        transferList: []\n      },\n      i = this._meshes.self.serialize();\n    return t.message.push({\n      tileId: this.tileKey.id,\n      ...i.message\n    }), t.transferList.push(...i.transferList), this._meshes.neighbors.forEach((i, r) => {\n      const n = i.serialize(),\n        h = 1 << r,\n        o = f(h),\n        c = u(h),\n        a = new e(this.tileKey).getNormalizedNeighbor(o, c, s);\n      t.message.push({\n        tileId: a.id,\n        ...n.message\n      }), t.transferList.push(...n.transferList);\n    }), t;\n  }\n  _addOverlap(e, t, i, r) {\n    const n = Math.min(s / 2, i),\n      h = Math.min(s / 2, r),\n      o = 255 ^ ((e < 0 + n ? _ : e >= s - n ? d : _ | d) | (t < 0 + h ? p : t >= s - h ? m : p | m));\n    this._currentRecordOverlaps |= o;\n  }\n  _copyIntoNeighbors() {\n    for (let e = 0; e < 8; e++) {\n      const i = 1 << e;\n      if (!!(this._currentRecordOverlaps & i)) {\n        if (this._copyBufferedDataIntoSelf) {\n          const e = -f(i) * s,\n            t = -u(i) * s;\n          if (0 !== t) continue;\n          this._meshes.self.copyLast(e, t);\n          continue;\n        }\n        if (!this._meshes.neighbors[e]) {\n          const s = Math.floor(this._sizeHint / 16);\n          this._meshes.neighbors[e] = new t(i, s);\n        }\n        const r = this._meshes.neighbors[e],\n          n = -f(i) * s,\n          h = -u(i) * s;\n        r.copyLastFrom(this._meshes.self, n, h);\n      }\n    }\n  }\n}\nexport { g as MultiTileMeshData };","map":{"version":3,"names":["e","tileSize","s","MeshData","t","i","r","n","h","o","c","a","l","f","u","d","_","m","p","g","constructor","tileKey","_bufferingEnabled","_sizeHint","_meshes","self","id","neighbors","Array","_currentRecordOverlaps","_currentEntityOverlaps","_copyBufferedDataIntoSelf","level","vertexCount","indexCount","indexEnsureSize","entityStart","entityRecordCount","entityEnd","recordStart","recordEnd","_copyIntoNeighbors","recordBounds","_addOverlap","recordCount","metricStart","metricBoxWrite","metricEnd","vertexWrite","vertexWriteF32","vertexWriteRegion","indexWrite","serialize","message","transferList","push","tileId","forEach","getNormalizedNeighbor","Math","min","copyLast","floor","copyLastFrom","MultiTileMeshData"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/node_modules/@arcgis/core/views/2d/engine/webgl/mesh/MultiTileMeshData.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport\"../../../tiling/TileInfoView.js\";import e from\"../../../tiling/TileKey.js\";import\"../../../tiling/TileQueue.js\";import\"../../../tiling/TileStrategy.js\";import{tileSize as s}from\"../definitions.js\";import{MeshData as t}from\"./MeshData.js\";const i=1,r=2,n=4,h=8,o=16,c=32,a=64,l=128;function f(e){switch(e){case i:case h:case c:return-1;case r:case a:return 0;case n:case o:case l:return 1}}function u(e){switch(e){case i:case r:case n:return-1;case h:case o:return 0;case c:case a:case l:return 1}}const d=i|h|c,_=n|o|l,m=i|r|n,p=c|a|l;class g{constructor(e,s,i,r,n=0){this.tileKey=e,this._bufferingEnabled=s,this._sizeHint=n,this._meshes={self:new t(this.id,this._sizeHint),neighbors:new Array},this._currentRecordOverlaps=0,this._currentEntityOverlaps=0;const h=r?1:0;this._copyBufferedDataIntoSelf=i&&this._bufferingEnabled&&e.level===h}get id(){return this.tileKey.id}vertexCount(){return this._meshes.self.vertexCount()}indexCount(){return this._meshes.self.indexCount()}indexEnsureSize(e){this._meshes.self.indexEnsureSize(e)}entityStart(e,s=e){this._currentEntityOverlaps=0,this._meshes.self.entityStart(e,s)}entityRecordCount(){return this._meshes.self.entityRecordCount()}entityEnd(){if(this._meshes.self.entityEnd(),this._bufferingEnabled){if(this._copyBufferedDataIntoSelf)return;for(let e=0;e<8;e++){const s=1<<e;!!(this._currentEntityOverlaps&s)&&this._meshes.neighbors[e].entityEnd()}}}recordStart(e,s,t){this._currentRecordOverlaps=0,this._meshes.self.recordStart(e,s,t)}recordEnd(e=0){const s=this._meshes.self.recordEnd(this._currentRecordOverlaps);return s&&0!==this._currentRecordOverlaps?(this._copyIntoNeighbors(),this._currentEntityOverlaps|=this._currentRecordOverlaps,!0):s}recordBounds(e,s,t,i){this._bufferingEnabled&&this._addOverlap(e,s,t,i)}recordCount(){return this._meshes.self.recordCount()}metricStart(e){this._meshes.self.metricStart(e)}metricBoxWrite(e){this._meshes.self.metricBoxWrite(e)}metricEnd(){this._meshes.self.metricEnd()}vertexWrite(e){this._meshes.self.vertexWrite(e)}vertexWriteF32(e){this._meshes.self.vertexWriteF32(e)}vertexWriteRegion(e){this._meshes.self.vertexWriteRegion(e)}indexWrite(e){this._meshes.self.indexWrite(e)}serialize(s){const t={message:[],transferList:[]},i=this._meshes.self.serialize();return t.message.push({tileId:this.tileKey.id,...i.message}),t.transferList.push(...i.transferList),this._meshes.neighbors.forEach(((i,r)=>{const n=i.serialize(),h=1<<r,o=f(h),c=u(h),a=new e(this.tileKey).getNormalizedNeighbor(o,c,s);t.message.push({tileId:a.id,...n.message}),t.transferList.push(...n.transferList)})),t}_addOverlap(e,t,i,r){const n=Math.min(s/2,i),h=Math.min(s/2,r),o=255^((e<0+n?_:e>=s-n?d:_|d)|(t<0+h?p:t>=s-h?m:p|m));this._currentRecordOverlaps|=o}_copyIntoNeighbors(){for(let e=0;e<8;e++){const i=1<<e;if(!!(this._currentRecordOverlaps&i)){if(this._copyBufferedDataIntoSelf){const e=-f(i)*s,t=-u(i)*s;if(0!==t)continue;this._meshes.self.copyLast(e,t);continue}if(!this._meshes.neighbors[e]){const s=Math.floor(this._sizeHint/16);this._meshes.neighbors[e]=new t(i,s)}const r=this._meshes.neighbors[e],n=-f(i)*s,h=-u(i)*s;r.copyLastFrom(this._meshes.self,n,h)}}}}export{g as MultiTileMeshData};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}