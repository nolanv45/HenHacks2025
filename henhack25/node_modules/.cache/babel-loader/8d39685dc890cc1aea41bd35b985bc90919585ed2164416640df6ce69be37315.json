{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport { HighlightCellGridScreenSpacePass as e } from \"../views/3d/webgl-engine/core/shaderLibrary/HighlightCellGridScreenSpacePass.glsl.js\";\nimport { HighlightReadBitmap as l } from \"../views/3d/webgl-engine/core/shaderLibrary/HighlightReadBitmap.glsl.js\";\nimport { FloatPassUniform as i } from \"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";\nimport { glsl as t } from \"../views/3d/webgl-engine/core/shaderModules/glsl.js\";\nimport { IntegerBindUniform as o } from \"../views/3d/webgl-engine/core/shaderModules/IntegerBindUniform.js\";\nimport { Texture2DPassUniform as n } from \"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";\nimport { ShaderBuilder as r } from \"../views/webgl/ShaderBuilder.js\";\nfunction a() {\n  const a = new r();\n  a.include(e);\n  const {\n    fragment: c\n  } = a;\n  return c.uniforms.add(new n(\"highlightTexture\", e => e.highlightTexture), new n(\"highlightOptionsTexture\", e => e.highlightOptionsTexture), new i(\"pixelRatio\", e => e.pixelRatio), new i(\"occludedIntensityFactor\", e => e.occludedFactor), new o(\"maxHighlightLevel\", e => e.highlights.length - 1)), c.constants.add(\"pixelSampleScale\", \"float\", 1), a.include(l), c.code.add(t`const float pascal17[9] = float[9](12870.0, 11440.0, 8008.0, 4368.0, 1820.0, 560.0, 120.0, 16.0, 1.0);\nconst float denom17 =  65536.0;\nfloat colorWeight[16] = float[16](0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\nfloat colorOcclusion[16] = float[16](0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\nfloat weights[16] = float[16](0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\nvoid applyTexel(vec2 texel, float weight) {\nif (texel != vec2(0.0)){\nint maxChannel = (maxHighlightLevel >> 2) & 1;\nfor (int channelIndex = 0; channelIndex <= maxChannel; ++channelIndex){\nuint channel = readChannel(texel, channelIndex << 2);\nint firstIndex = channelIndex << 2;\nint maxIndex  = min(firstIndex + 3, maxHighlightLevel);\nfor (int highlightIndex = firstIndex; highlightIndex <= maxIndex; ++highlightIndex ) {\nuint v = readChannelBits(channel, highlightIndex);\nif ((v & 1u) == 1u){\ncolorWeight[highlightIndex] += weight;\nif ((v & 2u) == 2u){\ncolorOcclusion[highlightIndex] += weight;\n}\n}\n}\n}\n}\n}\nvec2 readTexel(ivec2 iuv, int du, int dv) {\nreturn texelFetch(highlightTexture, iuv + ivec2(du, dv), 0).rg;\n}\nvoid readAndApplyTexel(ivec2 iuv, int du, int dv, float weight) {\nvec2 texel = readTexel(iuv, du, dv);\napplyTexel(texel, weight);\n}\nvoid readAndApply2TexelsU(ivec2 iuv, int du, int dv, float weight) {\nreadAndApplyTexel(iuv, -du, dv, weight);\nreadAndApplyTexel(iuv, +du, dv, weight);\n}\nfloat getWeight(int pixelDistance) {\nfloat scaledDistance = float(pixelDistance) * pixelSampleScale / pixelRatio;\nfloat d0f = floor(scaledDistance);\nint d0 = int(d0f);\nif (d0 >= 8){\nreturn 0.0;\n}\nfloat w0 = pascal17[d0];\nfloat w1 = pascal17[d0+1];\nfloat f =  scaledDistance - d0f;\nreturn mix(w0, w1, f);\n}`), c.main.add(t`vec2 highlightTextureSize = vec2(textureSize(highlightTexture,0));\nivec2 iuv = ivec2(sUV * highlightTextureSize);\nvec2 centerTexel = texelFetch(highlightTexture, iuv, 0).rg;\nbool outlinePossible = false;\nif (vOutlinePossible > 0.0){\nfor (int highlightLevel=0; highlightLevel<= maxHighlightLevel; ++highlightLevel) {\nif ((readLevelBits(centerTexel,highlightLevel) & 1u) == 0u) {\noutlinePossible = true;\nbreak;\n}\n}\n}\nif (outlinePossible) {\nint maxPixelDistance = clamp(int(8.0 * pixelRatio / pixelSampleScale), 2, 16);\nfloat weightSum = 0.0;\nfor(int y = 0; y <= maxPixelDistance; ++y) {\nfloat w = getWeight(y);\nweights[y] = w;\nweightSum += w * (y == 0 ? 1.0 : 2.0);\n}\nfor(int y = 0; y <= maxPixelDistance; ++y) {\nweights[y] = weights[y] / weightSum;\n}\nfloat weight0 = weights[0];\napplyTexel(centerTexel, weight0 * weight0);\nfor(int y = 0; y <= maxPixelDistance; y += 1) {\nfloat yFactor = weights[y];\nif (y != 0) {\nfloat xFactor = weight0;\nfloat weight = xFactor * yFactor;\nif (weight > 0.0) {\nreadAndApplyTexel(iuv, 0, +y, weight);\nreadAndApplyTexel(iuv, 0, -y, weight);\n}\n}\nfor(int x = 1; x <= maxPixelDistance; x += 1) {\nfloat xFactor = weights[x];\nfloat weight = xFactor * yFactor;\nif (weight > 0.0) {\nreadAndApply2TexelsU(iuv, x, +y, weight);\nif (y != 0){\nreadAndApply2TexelsU(iuv, x, -y, weight);\n}\n}\n}\n}\n} else {\napplyTexel(centerTexel, 1.0);\n}\nint frontColorIndex = 999;\nint maxColorIndex = 0;\nfor (int i = 0; i <= maxHighlightLevel; ++i) {\nif (colorWeight[i] > 0.0){\nfrontColorIndex = min(frontColorIndex, i);\nmaxColorIndex = max(maxColorIndex, i);\n}\n}\nif (frontColorIndex == 999){\nfragColor = vec4(0.0);\nreturn;\n}\nvec4 accumulatedColor = vec4(0.0);\nfor (int curColorIndex = frontColorIndex; curColorIndex <= maxColorIndex; ++curColorIndex) {\nfloat curColorWeight = colorWeight[curColorIndex];\nif (curColorWeight <= 0.01){\ncontinue;\n}\nuint vc = readLevelBits(centerTexel, curColorIndex);\nbool centerFilled = (vc & 1u) == 1u;\nbool centerOccluded = (vc & 3u) == 3u;\nfloat curColorOcclusion = colorOcclusion[curColorIndex];\nbool occluded = centerFilled ? centerOccluded : curColorOcclusion > 0.5 * curColorWeight;\nint colorChannel = centerFilled ? 0 : 1;\nvec4 colorBase = texelFetch(highlightOptionsTexture, ivec2(curColorIndex, colorChannel), 0);\nfloat occlusionFactor = occluded ? occludedIntensityFactor : 1.0;\nfloat outlineFactor = centerFilled ? 1.0 : smoothstep(0.0, 0.03, curColorWeight);\nfloat intensity = colorBase.a * occlusionFactor * outlineFactor;\nvec3 currentColor = colorBase.rgb;\nfloat a0 = accumulatedColor.a;\nfloat a1 = intensity;\nfloat alpha = clamp(a0 + a1 - a0 * a1, 0.0, 1.0);\nif (alpha > 0.001){\nvec3 blendedColor = ((1.0 - a1) * a0 * accumulatedColor.rgb + a1 * currentColor) / alpha;\naccumulatedColor = vec4(blendedColor, alpha);\n}\n}\nfragColor = accumulatedColor;`), a;\n}\nconst c = Object.freeze(Object.defineProperty({\n  __proto__: null,\n  build: a\n}, Symbol.toStringTag, {\n  value: \"Module\"\n}));\nexport { c as H, a as b };","map":{"version":3,"names":["HighlightCellGridScreenSpacePass","e","HighlightReadBitmap","l","FloatPassUniform","i","glsl","t","IntegerBindUniform","o","Texture2DPassUniform","n","ShaderBuilder","r","a","include","fragment","c","uniforms","add","highlightTexture","highlightOptionsTexture","pixelRatio","occludedFactor","highlights","length","constants","code","main","Object","freeze","defineProperty","__proto__","build","Symbol","toStringTag","value","H","b"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/node_modules/@arcgis/core/chunks/HighlightApply.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{HighlightCellGridScreenSpacePass as e}from\"../views/3d/webgl-engine/core/shaderLibrary/HighlightCellGridScreenSpacePass.glsl.js\";import{HighlightReadBitmap as l}from\"../views/3d/webgl-engine/core/shaderLibrary/HighlightReadBitmap.glsl.js\";import{FloatPassUniform as i}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as t}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{IntegerBindUniform as o}from\"../views/3d/webgl-engine/core/shaderModules/IntegerBindUniform.js\";import{Texture2DPassUniform as n}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{ShaderBuilder as r}from\"../views/webgl/ShaderBuilder.js\";function a(){const a=new r;a.include(e);const{fragment:c}=a;return c.uniforms.add(new n(\"highlightTexture\",(e=>e.highlightTexture)),new n(\"highlightOptionsTexture\",(e=>e.highlightOptionsTexture)),new i(\"pixelRatio\",(e=>e.pixelRatio)),new i(\"occludedIntensityFactor\",(e=>e.occludedFactor)),new o(\"maxHighlightLevel\",(e=>e.highlights.length-1))),c.constants.add(\"pixelSampleScale\",\"float\",1),a.include(l),c.code.add(t`const float pascal17[9] = float[9](12870.0, 11440.0, 8008.0, 4368.0, 1820.0, 560.0, 120.0, 16.0, 1.0);\nconst float denom17 =  65536.0;\nfloat colorWeight[16] = float[16](0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\nfloat colorOcclusion[16] = float[16](0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\nfloat weights[16] = float[16](0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\nvoid applyTexel(vec2 texel, float weight) {\nif (texel != vec2(0.0)){\nint maxChannel = (maxHighlightLevel >> 2) & 1;\nfor (int channelIndex = 0; channelIndex <= maxChannel; ++channelIndex){\nuint channel = readChannel(texel, channelIndex << 2);\nint firstIndex = channelIndex << 2;\nint maxIndex  = min(firstIndex + 3, maxHighlightLevel);\nfor (int highlightIndex = firstIndex; highlightIndex <= maxIndex; ++highlightIndex ) {\nuint v = readChannelBits(channel, highlightIndex);\nif ((v & 1u) == 1u){\ncolorWeight[highlightIndex] += weight;\nif ((v & 2u) == 2u){\ncolorOcclusion[highlightIndex] += weight;\n}\n}\n}\n}\n}\n}\nvec2 readTexel(ivec2 iuv, int du, int dv) {\nreturn texelFetch(highlightTexture, iuv + ivec2(du, dv), 0).rg;\n}\nvoid readAndApplyTexel(ivec2 iuv, int du, int dv, float weight) {\nvec2 texel = readTexel(iuv, du, dv);\napplyTexel(texel, weight);\n}\nvoid readAndApply2TexelsU(ivec2 iuv, int du, int dv, float weight) {\nreadAndApplyTexel(iuv, -du, dv, weight);\nreadAndApplyTexel(iuv, +du, dv, weight);\n}\nfloat getWeight(int pixelDistance) {\nfloat scaledDistance = float(pixelDistance) * pixelSampleScale / pixelRatio;\nfloat d0f = floor(scaledDistance);\nint d0 = int(d0f);\nif (d0 >= 8){\nreturn 0.0;\n}\nfloat w0 = pascal17[d0];\nfloat w1 = pascal17[d0+1];\nfloat f =  scaledDistance - d0f;\nreturn mix(w0, w1, f);\n}`),c.main.add(t`vec2 highlightTextureSize = vec2(textureSize(highlightTexture,0));\nivec2 iuv = ivec2(sUV * highlightTextureSize);\nvec2 centerTexel = texelFetch(highlightTexture, iuv, 0).rg;\nbool outlinePossible = false;\nif (vOutlinePossible > 0.0){\nfor (int highlightLevel=0; highlightLevel<= maxHighlightLevel; ++highlightLevel) {\nif ((readLevelBits(centerTexel,highlightLevel) & 1u) == 0u) {\noutlinePossible = true;\nbreak;\n}\n}\n}\nif (outlinePossible) {\nint maxPixelDistance = clamp(int(8.0 * pixelRatio / pixelSampleScale), 2, 16);\nfloat weightSum = 0.0;\nfor(int y = 0; y <= maxPixelDistance; ++y) {\nfloat w = getWeight(y);\nweights[y] = w;\nweightSum += w * (y == 0 ? 1.0 : 2.0);\n}\nfor(int y = 0; y <= maxPixelDistance; ++y) {\nweights[y] = weights[y] / weightSum;\n}\nfloat weight0 = weights[0];\napplyTexel(centerTexel, weight0 * weight0);\nfor(int y = 0; y <= maxPixelDistance; y += 1) {\nfloat yFactor = weights[y];\nif (y != 0) {\nfloat xFactor = weight0;\nfloat weight = xFactor * yFactor;\nif (weight > 0.0) {\nreadAndApplyTexel(iuv, 0, +y, weight);\nreadAndApplyTexel(iuv, 0, -y, weight);\n}\n}\nfor(int x = 1; x <= maxPixelDistance; x += 1) {\nfloat xFactor = weights[x];\nfloat weight = xFactor * yFactor;\nif (weight > 0.0) {\nreadAndApply2TexelsU(iuv, x, +y, weight);\nif (y != 0){\nreadAndApply2TexelsU(iuv, x, -y, weight);\n}\n}\n}\n}\n} else {\napplyTexel(centerTexel, 1.0);\n}\nint frontColorIndex = 999;\nint maxColorIndex = 0;\nfor (int i = 0; i <= maxHighlightLevel; ++i) {\nif (colorWeight[i] > 0.0){\nfrontColorIndex = min(frontColorIndex, i);\nmaxColorIndex = max(maxColorIndex, i);\n}\n}\nif (frontColorIndex == 999){\nfragColor = vec4(0.0);\nreturn;\n}\nvec4 accumulatedColor = vec4(0.0);\nfor (int curColorIndex = frontColorIndex; curColorIndex <= maxColorIndex; ++curColorIndex) {\nfloat curColorWeight = colorWeight[curColorIndex];\nif (curColorWeight <= 0.01){\ncontinue;\n}\nuint vc = readLevelBits(centerTexel, curColorIndex);\nbool centerFilled = (vc & 1u) == 1u;\nbool centerOccluded = (vc & 3u) == 3u;\nfloat curColorOcclusion = colorOcclusion[curColorIndex];\nbool occluded = centerFilled ? centerOccluded : curColorOcclusion > 0.5 * curColorWeight;\nint colorChannel = centerFilled ? 0 : 1;\nvec4 colorBase = texelFetch(highlightOptionsTexture, ivec2(curColorIndex, colorChannel), 0);\nfloat occlusionFactor = occluded ? occludedIntensityFactor : 1.0;\nfloat outlineFactor = centerFilled ? 1.0 : smoothstep(0.0, 0.03, curColorWeight);\nfloat intensity = colorBase.a * occlusionFactor * outlineFactor;\nvec3 currentColor = colorBase.rgb;\nfloat a0 = accumulatedColor.a;\nfloat a1 = intensity;\nfloat alpha = clamp(a0 + a1 - a0 * a1, 0.0, 1.0);\nif (alpha > 0.001){\nvec3 blendedColor = ((1.0 - a1) * a0 * accumulatedColor.rgb + a1 * currentColor) / alpha;\naccumulatedColor = vec4(blendedColor, alpha);\n}\n}\nfragColor = accumulatedColor;`),a}const c=Object.freeze(Object.defineProperty({__proto__:null,build:a},Symbol.toStringTag,{value:\"Module\"}));export{c as H,a as b};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAAOA,gCAAgC,IAAIC,CAAC,QAAK,sFAAsF;AAAC,SAAOC,mBAAmB,IAAIC,CAAC,QAAK,yEAAyE;AAAC,SAAOC,gBAAgB,IAAIC,CAAC,QAAK,iEAAiE;AAAC,SAAOC,IAAI,IAAIC,CAAC,QAAK,qDAAqD;AAAC,SAAOC,kBAAkB,IAAIC,CAAC,QAAK,mEAAmE;AAAC,SAAOC,oBAAoB,IAAIC,CAAC,QAAK,qEAAqE;AAAC,SAAOC,aAAa,IAAIC,CAAC,QAAK,iCAAiC;AAAC,SAASC,CAACA,CAAA,EAAE;EAAC,MAAMA,CAAC,GAAC,IAAID,CAAC,CAAD,CAAC;EAACC,CAAC,CAACC,OAAO,CAACd,CAAC,CAAC;EAAC,MAAK;IAACe,QAAQ,EAACC;EAAC,CAAC,GAACH,CAAC;EAAC,OAAOG,CAAC,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAIR,CAAC,CAAC,kBAAkB,EAAEV,CAAC,IAAEA,CAAC,CAACmB,gBAAiB,CAAC,EAAC,IAAIT,CAAC,CAAC,yBAAyB,EAAEV,CAAC,IAAEA,CAAC,CAACoB,uBAAwB,CAAC,EAAC,IAAIhB,CAAC,CAAC,YAAY,EAAEJ,CAAC,IAAEA,CAAC,CAACqB,UAAW,CAAC,EAAC,IAAIjB,CAAC,CAAC,yBAAyB,EAAEJ,CAAC,IAAEA,CAAC,CAACsB,cAAe,CAAC,EAAC,IAAId,CAAC,CAAC,mBAAmB,EAAER,CAAC,IAAEA,CAAC,CAACuB,UAAU,CAACC,MAAM,GAAC,CAAE,CAAC,CAAC,EAACR,CAAC,CAACS,SAAS,CAACP,GAAG,CAAC,kBAAkB,EAAC,OAAO,EAAC,CAAC,CAAC,EAACL,CAAC,CAACC,OAAO,CAACZ,CAAC,CAAC,EAACc,CAAC,CAACU,IAAI,CAACR,GAAG,CAACZ,CAAC;AACrlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,EAACU,CAAC,CAACW,IAAI,CAACT,GAAG,CAACZ,CAAC;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,CAAC,EAACO,CAAC;AAAA;AAAC,MAAMG,CAAC,GAACY,MAAM,CAACC,MAAM,CAACD,MAAM,CAACE,cAAc,CAAC;EAACC,SAAS,EAAC,IAAI;EAACC,KAAK,EAACnB;AAAC,CAAC,EAACoB,MAAM,CAACC,WAAW,EAAC;EAACC,KAAK,EAAC;AAAQ,CAAC,CAAC,CAAC;AAAC,SAAOnB,CAAC,IAAIoB,CAAC,EAACvB,CAAC,IAAIwB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}