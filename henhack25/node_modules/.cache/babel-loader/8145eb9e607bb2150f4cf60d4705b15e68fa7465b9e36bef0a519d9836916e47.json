{"ast":null,"code":"/*!\n* focus-trap 7.6.4\n* @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE\n*/\nimport { tabbable, focusable, isTabbable, getTabIndex, isFocusable } from 'tabbable';\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: true,\n    configurable: true,\n    writable: true\n  }) : e[r] = t, e;\n}\nfunction _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), true).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _toConsumableArray(r) {\n  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (undefined !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : undefined;\n  }\n}\nvar activeFocusTraps = {\n  activateTrap: function activateTrap(trapStack, trap) {\n    if (trapStack.length > 0) {\n      var activeTrap = trapStack[trapStack.length - 1];\n      if (activeTrap !== trap) {\n        activeTrap._setPausedState(true);\n      }\n    }\n    var trapIndex = trapStack.indexOf(trap);\n    if (trapIndex === -1) {\n      trapStack.push(trap);\n    } else {\n      // move this existing trap to the front of the queue\n      trapStack.splice(trapIndex, 1);\n      trapStack.push(trap);\n    }\n  },\n  deactivateTrap: function deactivateTrap(trapStack, trap) {\n    var trapIndex = trapStack.indexOf(trap);\n    if (trapIndex !== -1) {\n      trapStack.splice(trapIndex, 1);\n    }\n    if (trapStack.length > 0 && !trapStack[trapStack.length - 1]._isManuallyPaused()) {\n      trapStack[trapStack.length - 1]._setPausedState(false);\n    }\n  }\n};\nvar isSelectableInput = function isSelectableInput(node) {\n  return node.tagName && node.tagName.toLowerCase() === 'input' && typeof node.select === 'function';\n};\nvar isEscapeEvent = function isEscapeEvent(e) {\n  return (e === null || e === undefined ? undefined : e.key) === 'Escape' || (e === null || e === undefined ? undefined : e.key) === 'Esc' || (e === null || e === undefined ? undefined : e.keyCode) === 27;\n};\nvar isTabEvent = function isTabEvent(e) {\n  return (e === null || e === undefined ? undefined : e.key) === 'Tab' || (e === null || e === undefined ? undefined : e.keyCode) === 9;\n};\n\n// checks for TAB by default\nvar isKeyForward = function isKeyForward(e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n// checks for SHIFT+TAB by default\nvar isKeyBackward = function isKeyBackward(e) {\n  return isTabEvent(e) && e.shiftKey;\n};\nvar delay = function delay(fn) {\n  return setTimeout(fn, 0);\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nvar valueOrHandler = function valueOrHandler(value) {\n  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    params[_key - 1] = arguments[_key];\n  }\n  return typeof value === 'function' ? value.apply(undefined, params) : value;\n};\nvar getActualTarget = function getActualTarget(event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function' ? event.composedPath()[0] : event.target;\n};\n\n// NOTE: this must be _outside_ `createFocusTrap()` to make sure all traps in this\n//  current instance use the same stack if `userOptions.trapStack` isn't specified\nvar internalTrapStack = [];\nvar createFocusTrap = function createFocusTrap(elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  var doc = (userOptions === null || userOptions === undefined ? undefined : userOptions.document) || document;\n  var trapStack = (userOptions === null || userOptions === undefined ? undefined : userOptions.trapStack) || internalTrapStack;\n  var config = _objectSpread2({\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    isKeyForward: isKeyForward,\n    isKeyBackward: isKeyBackward\n  }, userOptions);\n  var state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   posTabIndexesFound: boolean,\n    //   firstTabbableNode: HTMLElement|undefined,\n    //   lastTabbableNode: HTMLElement|undefined,\n    //   firstDomTabbableNode: HTMLElement|undefined,\n    //   lastDomTabbableNode: HTMLElement|undefined,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [],\n    // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n    manuallyPaused: false,\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined,\n    // the most recent KeyboardEvent for the configured nav key (typically [SHIFT+]TAB), if any\n    recentNavEvent: undefined\n  };\n  var trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  var getOption = function getOption(configOverrideOptions, optionName, configOptionName) {\n    return configOverrideOptions && configOverrideOptions[optionName] !== undefined ? configOverrideOptions[optionName] : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @param {Event} [event] If available, and `element` isn't directly found in any container,\n   *  the event's composed path is used to see if includes any known trap containers in the\n   *  case where the element is inside a Shadow DOM.\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  var findContainerIndex = function findContainerIndex(element, event) {\n    var composedPath = typeof (event === null || event === undefined ? undefined : event.composedPath) === 'function' ? event.composedPath() : undefined;\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(function (_ref) {\n      var container = _ref.container,\n        tabbableNodes = _ref.tabbableNodes;\n      return container.contains(element) || (\n      // fall back to explicit tabbable search which will take into consideration any\n      //  web components if the `tabbableOptions.getShadowRoot` option was used for\n      //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n      //  look inside web components even if open)\n      composedPath === null || composedPath === undefined ? undefined : composedPath.includes(container)) || tabbableNodes.find(function (node) {\n        return node === element;\n      });\n    });\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @param {Object} options\n   * @param {boolean} [options.hasFallback] True if the option could be a selector string\n   *  and the option allows for a fallback scenario in the case where the selector is\n   *  valid but does not match a node (i.e. the queried node doesn't exist in the DOM).\n   * @param {Array} [options.params] Params to pass to the option if it's a function.\n   * @returns {undefined | null | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `null` if the option didn't resolve\n   *  to a node but `options.hasFallback=true`, `false` if the option resolved to `false`\n   *  (node explicitly not given); otherwise, the resolved DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node, unless the option is a selector string and `options.hasFallback=true`.\n   */\n  var getNodeForOption = function getNodeForOption(optionName) {\n    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref2$hasFallback = _ref2.hasFallback,\n      hasFallback = _ref2$hasFallback === undefined ? false : _ref2$hasFallback,\n      _ref2$params = _ref2.params,\n      params = _ref2$params === undefined ? [] : _ref2$params;\n    var optionValue = config[optionName];\n    if (typeof optionValue === 'function') {\n      optionValue = optionValue.apply(undefined, _toConsumableArray(params));\n    }\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\"`\".concat(optionName, \"` was specified but was not a node, or did not return a node\"));\n    }\n    var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      try {\n        node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      } catch (err) {\n        throw new Error(\"`\".concat(optionName, \"` appears to be an invalid selector; error=\\\"\").concat(err.message, \"\\\"\"));\n      }\n      if (!node) {\n        if (!hasFallback) {\n          throw new Error(\"`\".concat(optionName, \"` as selector refers to no known node\"));\n        }\n        // else, `node` MUST be `null` because that's what `Document.querySelector()` returns\n        //  if the selector is valid but doesn't match anything\n      }\n    }\n    return node;\n  };\n  var getInitialFocusNode = function getInitialFocusNode() {\n    var node = getNodeForOption('initialFocus', {\n      hasFallback: true\n    });\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n    if (node === undefined || node && !isFocusable(node, config.tabbableOptions)) {\n      // option not specified nor focusable: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        var firstTabbableGroup = state.tabbableGroups[0];\n        var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    } else if (node === null) {\n      // option is a VALID selector string that doesn't yield a node: use the `fallbackFocus`\n      //  option instead of the default behavior when the option isn't specified at all\n      node = getNodeForOption('fallbackFocus');\n    }\n    if (!node) {\n      throw new Error('Your focus-trap needs to have at least one focusable element');\n    }\n    return node;\n  };\n  var updateTabbableNodes = function updateTabbableNodes() {\n    state.containerGroups = state.containers.map(function (container) {\n      var tabbableNodes = tabbable(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes since nodes with negative `tabindex` attributes\n      //  are focusable but not tabbable\n      var focusableNodes = focusable(container, config.tabbableOptions);\n      var firstTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[0] : undefined;\n      var lastTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : undefined;\n      var firstDomTabbableNode = focusableNodes.find(function (node) {\n        return isTabbable(node);\n      });\n      var lastDomTabbableNode = focusableNodes.slice().reverse().find(function (node) {\n        return isTabbable(node);\n      });\n      var posTabIndexesFound = !!tabbableNodes.find(function (node) {\n        return getTabIndex(node) > 0;\n      });\n      return {\n        container: container,\n        tabbableNodes: tabbableNodes,\n        focusableNodes: focusableNodes,\n        /** True if at least one node with positive `tabindex` was found in this container. */\n        posTabIndexesFound: posTabIndexesFound,\n        /** First tabbable node in container, __tabindex__ order; `undefined` if none. */\n        firstTabbableNode: firstTabbableNode,\n        /** Last tabbable node in container, __tabindex__ order; `undefined` if none. */\n        lastTabbableNode: lastTabbableNode,\n        // NOTE: DOM order is NOT NECESSARILY \"document position\" order, but figuring that out\n        //  would require more than just https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n        //  because that API doesn't work with Shadow DOM as well as it should (@see\n        //  https://github.com/whatwg/dom/issues/320) and since this first/last is only needed, so far,\n        //  to address an edge case related to positive tabindex support, this seems like a much easier,\n        //  \"close enough most of the time\" alternative for positive tabindexes which should generally\n        //  be avoided anyway...\n        /** First tabbable node in container, __DOM__ order; `undefined` if none. */\n        firstDomTabbableNode: firstDomTabbableNode,\n        /** Last tabbable node in container, __DOM__ order; `undefined` if none. */\n        lastDomTabbableNode: lastDomTabbableNode,\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode: function nextTabbableNode(node) {\n          var forward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n          var nodeIdx = tabbableNodes.indexOf(node);\n          if (nodeIdx < 0) {\n            // either not tabbable nor focusable, or was focused but not tabbable (negative tabindex):\n            //  since `node` should at least have been focusable, we assume that's the case and mimic\n            //  what browsers do, which is set focus to the next node in __document position order__,\n            //  regardless of positive tabindexes, if any -- and for reasons explained in the NOTE\n            //  above related to `firstDomTabbable` and `lastDomTabbable` properties, we fall back to\n            //  basic DOM order\n            if (forward) {\n              return focusableNodes.slice(focusableNodes.indexOf(node) + 1).find(function (el) {\n                return isTabbable(el);\n              });\n            }\n            return focusableNodes.slice(0, focusableNodes.indexOf(node)).reverse().find(function (el) {\n              return isTabbable(el);\n            });\n          }\n          return tabbableNodes[nodeIdx + (forward ? 1 : -1)];\n        }\n      };\n    });\n    state.tabbableGroups = state.containerGroups.filter(function (group) {\n      return group.tabbableNodes.length > 0;\n    });\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (state.tabbableGroups.length <= 0 && !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error('Your focus-trap must have at least one container with at least one tabbable node in it at all times');\n    }\n\n    // NOTE: Positive tabindexes are only properly supported in single-container traps because\n    //  doing it across multiple containers where tabindexes could be all over the place\n    //  would require Tabbable to support multiple containers, would require additional\n    //  specialized Shadow DOM support, and would require Tabbable's multi-container support\n    //  to look at those containers in document position order rather than user-provided\n    //  order (as they are treated in Focus-trap, for legacy reasons). See discussion on\n    //  https://github.com/focus-trap/focus-trap/issues/375 for more details.\n    if (state.containerGroups.find(function (g) {\n      return g.posTabIndexesFound;\n    }) && state.containerGroups.length > 1) {\n      throw new Error(\"At least one node with a positive tabindex was found in one of your focus-trap's multiple containers. Positive tabindexes are only supported in single-container focus-traps.\");\n    }\n  };\n\n  /**\n   * Gets the current activeElement. If it's a web-component and has open shadow-root\n   * it will recursively search inside shadow roots for the \"true\" activeElement.\n   *\n   * @param {Document | ShadowRoot} el\n   *\n   * @returns {HTMLElement} The element that currently has the focus\n   **/\n  var _getActiveElement = function getActiveElement(el) {\n    var activeElement = el.activeElement;\n    if (!activeElement) {\n      return;\n    }\n    if (activeElement.shadowRoot && activeElement.shadowRoot.activeElement !== null) {\n      return _getActiveElement(activeElement.shadowRoot);\n    }\n    return activeElement;\n  };\n  var _tryFocus = function tryFocus(node) {\n    if (node === false) {\n      return;\n    }\n    if (node === _getActiveElement(document)) {\n      return;\n    }\n    if (!node || !node.focus) {\n      _tryFocus(getInitialFocusNode());\n      return;\n    }\n    node.focus({\n      preventScroll: !!config.preventScroll\n    });\n    // NOTE: focus() API does not trigger focusIn event so set MRU node manually\n    state.mostRecentlyFocusedNode = node;\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n  var getReturnFocusNode = function getReturnFocusNode(previousActiveElement) {\n    var node = getNodeForOption('setReturnFocus', {\n      params: [previousActiveElement]\n    });\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  /**\n   * Finds the next node (in either direction) where focus should move according to a\n   *  keyboard focus-in event.\n   * @param {Object} params\n   * @param {Node} [params.target] Known target __from which__ to navigate, if any.\n   * @param {KeyboardEvent|FocusEvent} [params.event] Event to use if `target` isn't known (event\n   *  will be used to determine the `target`). Ignored if `target` is specified.\n   * @param {boolean} [params.isBackward] True if focus should move backward.\n   * @returns {Node|undefined} The next node, or `undefined` if a next node couldn't be\n   *  determined given the current state of the trap.\n   */\n  var findNextNavNode = function findNextNavNode(_ref3) {\n    var target = _ref3.target,\n      event = _ref3.event,\n      _ref3$isBackward = _ref3.isBackward,\n      isBackward = _ref3$isBackward === undefined ? false : _ref3$isBackward;\n    target = target || getActualTarget(event);\n    updateTabbableNodes();\n    var destinationNode = null;\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      var containerIndex = findContainerIndex(target, event);\n      var containerGroup = containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back into...\n        if (isBackward) {\n          // ...the last node in the last group\n          destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (isBackward) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        var startOfGroupIndex = state.tabbableGroups.findIndex(function (_ref4) {\n          var firstTabbableNode = _ref4.firstTabbableNode;\n          return target === firstTabbableNode;\n        });\n        if (startOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target, false))) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;\n          var destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = getTabIndex(target) >= 0 ? destinationGroup.lastTabbableNode : destinationGroup.lastDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target, false);\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        var lastOfGroupIndex = state.tabbableGroups.findIndex(function (_ref5) {\n          var lastTabbableNode = _ref5.lastTabbableNode;\n          return target === lastTabbableNode;\n        });\n        if (lastOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target))) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;\n          var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];\n          destinationNode = getTabIndex(target) >= 0 ? _destinationGroup.firstTabbableNode : _destinationGroup.firstDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target);\n        }\n      }\n    } else {\n      // no groups available\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n    return destinationNode;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  var checkPointerDown = function checkPointerDown(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target, e) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked (and if not focusable, to \"nothing\"); by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node), whether the\n        //  outside click was on a focusable node or not\n        returnFocus: config.returnFocusOnDeactivate\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  // NOTE: the focusIn event is NOT cancelable, so if focus escapes, it may cause unexpected\n  //  scrolling if the node that got focused was out of view; there's nothing we can do to\n  //  prevent that from happening by the time we discover that focus escaped\n  var checkFocusIn = function checkFocusIn(event) {\n    var target = getActualTarget(event);\n    var targetContained = findContainerIndex(target, event) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      event.stopImmediatePropagation();\n\n      // focus will escape if the MRU node had a positive tab index and user tried to nav forward;\n      //  it will also escape if the MRU node had a 0 tab index and user tried to nav backward\n      //  toward a node with a positive tab index\n      var nextNode; // next node to focus, if we find one\n      var navAcrossContainers = true;\n      if (state.mostRecentlyFocusedNode) {\n        if (getTabIndex(state.mostRecentlyFocusedNode) > 0) {\n          // MRU container index must be >=0 otherwise we wouldn't have it as an MRU node...\n          var mruContainerIdx = findContainerIndex(state.mostRecentlyFocusedNode);\n          // there MAY not be any tabbable nodes in the container if there are at least 2 containers\n          //  and the MRU node is focusable but not tabbable (focus-trap requires at least 1 container\n          //  with at least one tabbable node in order to function, so this could be the other container\n          //  with nothing tabbable in it)\n          var tabbableNodes = state.containerGroups[mruContainerIdx].tabbableNodes;\n          if (tabbableNodes.length > 0) {\n            // MRU tab index MAY not be found if the MRU node is focusable but not tabbable\n            var mruTabIdx = tabbableNodes.findIndex(function (node) {\n              return node === state.mostRecentlyFocusedNode;\n            });\n            if (mruTabIdx >= 0) {\n              if (config.isKeyForward(state.recentNavEvent)) {\n                if (mruTabIdx + 1 < tabbableNodes.length) {\n                  nextNode = tabbableNodes[mruTabIdx + 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              } else {\n                if (mruTabIdx - 1 >= 0) {\n                  nextNode = tabbableNodes[mruTabIdx - 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              }\n              // else, don't find in container order without considering direction too\n            }\n          }\n          // else, no tabbable nodes in that container (which means we must have at least one other\n          //  container with at least one tabbable node in it, otherwise focus-trap would've thrown\n          //  an error the last time updateTabbableNodes() was run): find next node among all known\n          //  containers\n        } else {\n          // check to see if there's at least one tabbable node with a positive tab index inside\n          //  the trap because focus seems to escape when navigating backward from a tabbable node\n          //  with tabindex=0 when this is the case (instead of wrapping to the tabbable node with\n          //  the greatest positive tab index like it should)\n          if (!state.containerGroups.some(function (g) {\n            return g.tabbableNodes.some(function (n) {\n              return getTabIndex(n) > 0;\n            });\n          })) {\n            // no containers with tabbable nodes with positive tab indexes which means the focus\n            //  escaped for some other reason and we should just execute the fallback to the\n            //  MRU node or initial focus node, if any\n            navAcrossContainers = false;\n          }\n        }\n      } else {\n        // no MRU node means we're likely in some initial condition when the trap has just\n        //  been activated and initial focus hasn't been given yet, in which case we should\n        //  fall through to trying to focus the initial focus node, which is what should\n        //  happen below at this point in the logic\n        navAcrossContainers = false;\n      }\n      if (navAcrossContainers) {\n        nextNode = findNextNavNode({\n          // move FROM the MRU node, not event-related node (which will be the node that is\n          //  outside the trap causing the focus escape we're trying to fix)\n          target: state.mostRecentlyFocusedNode,\n          isBackward: config.isKeyBackward(state.recentNavEvent)\n        });\n      }\n      if (nextNode) {\n        _tryFocus(nextNode);\n      } else {\n        _tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n      }\n    }\n    state.recentNavEvent = undefined; // clear\n  };\n\n  // Hijack key nav events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  var checkKeyNav = function checkKeyNav(event) {\n    var isBackward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    state.recentNavEvent = event;\n    var destinationNode = findNextNavNode({\n      event: event,\n      isBackward: isBackward\n    });\n    if (destinationNode) {\n      if (isTabEvent(event)) {\n        // since tab natively moves focus, we wouldn't have a destination node unless we\n        //  were on the edge of a container and had to move to the next/previous edge, in\n        //  which case we want to prevent default to keep the browser from moving focus\n        //  to where it normally would\n        event.preventDefault();\n      }\n      _tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n  var checkTabKey = function checkTabKey(event) {\n    if (config.isKeyForward(event) || config.isKeyBackward(event)) {\n      checkKeyNav(event, config.isKeyBackward(event));\n    }\n  };\n\n  // we use a different event phase for the Escape key to allow canceling the event and checking for this in escapeDeactivates\n  var checkEscapeKey = function checkEscapeKey(event) {\n    if (isEscapeEvent(event) && valueOrHandler(config.escapeDeactivates, event) !== false) {\n      event.preventDefault();\n      trap.deactivate();\n    }\n  };\n  var checkClick = function checkClick(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target, e) >= 0) {\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  var addListeners = function addListeners() {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trapStack, trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus ? delay(function () {\n      _tryFocus(getInitialFocusNode());\n    }) : _tryFocus(getInitialFocusNode());\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('keydown', checkTabKey, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('keydown', checkEscapeKey);\n    return trap;\n  };\n  var removeListeners = function removeListeners() {\n    if (!state.active) {\n      return;\n    }\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkTabKey, true);\n    doc.removeEventListener('keydown', checkEscapeKey);\n    return trap;\n  };\n\n  //\n  // MUTATION OBSERVER\n  //\n\n  var checkDomRemoval = function checkDomRemoval(mutations) {\n    var isFocusedNodeRemoved = mutations.some(function (mutation) {\n      var removedNodes = Array.from(mutation.removedNodes);\n      return removedNodes.some(function (node) {\n        return node === state.mostRecentlyFocusedNode;\n      });\n    });\n\n    // If the currently focused is removed then browsers will move focus to the\n    // <body> element. If this happens, try to move focus back into the trap.\n    if (isFocusedNodeRemoved) {\n      _tryFocus(getInitialFocusNode());\n    }\n  };\n\n  // Use MutationObserver - if supported - to detect if focused node is removed\n  // from the DOM.\n  var mutationObserver = typeof window !== 'undefined' && 'MutationObserver' in window ? new MutationObserver(checkDomRemoval) : undefined;\n  var updateObservedNodes = function updateObservedNodes() {\n    if (!mutationObserver) {\n      return;\n    }\n    mutationObserver.disconnect();\n    if (state.active && !state.paused) {\n      state.containers.map(function (container) {\n        mutationObserver.observe(container, {\n          subtree: true,\n          childList: true\n        });\n      });\n    }\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n    get paused() {\n      return state.paused;\n    },\n    activate: function activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n      var onActivate = getOption(activateOptions, 'onActivate');\n      var onPostActivate = getOption(activateOptions, 'onPostActivate');\n      var checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n      onActivate === null || onActivate === undefined || onActivate();\n      var finishActivation = function finishActivation() {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        updateObservedNodes();\n        onPostActivate === null || onPostActivate === undefined || onPostActivate();\n      };\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);\n        return this;\n      }\n      finishActivation();\n      return this;\n    },\n    deactivate: function deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n      var options = _objectSpread2({\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus\n      }, deactivateOptions);\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n      updateObservedNodes();\n      activeFocusTraps.deactivateTrap(trapStack, trap);\n      var onDeactivate = getOption(options, 'onDeactivate');\n      var onPostDeactivate = getOption(options, 'onPostDeactivate');\n      var checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      var returnFocus = getOption(options, 'returnFocus', 'returnFocusOnDeactivate');\n      onDeactivate === null || onDeactivate === undefined || onDeactivate();\n      var finishDeactivation = function finishDeactivation() {\n        delay(function () {\n          if (returnFocus) {\n            _tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          onPostDeactivate === null || onPostDeactivate === undefined || onPostDeactivate();\n        });\n      };\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n      finishDeactivation();\n      return this;\n    },\n    pause: function pause(pauseOptions) {\n      if (!state.active) {\n        return this;\n      }\n      state.manuallyPaused = true;\n      return this._setPausedState(true, pauseOptions);\n    },\n    unpause: function unpause(unpauseOptions) {\n      if (!state.active) {\n        return this;\n      }\n      state.manuallyPaused = false;\n      if (trapStack[trapStack.length - 1] !== this) {\n        return this;\n      }\n      return this._setPausedState(false, unpauseOptions);\n    },\n    updateContainerElements: function updateContainerElements(containerElements) {\n      var elementsAsArray = [].concat(containerElements).filter(Boolean);\n      state.containers = elementsAsArray.map(function (element) {\n        return typeof element === 'string' ? doc.querySelector(element) : element;\n      });\n      if (state.active) {\n        updateTabbableNodes();\n      }\n      updateObservedNodes();\n      return this;\n    }\n  };\n  Object.defineProperties(trap, {\n    _isManuallyPaused: {\n      value: function value() {\n        return state.manuallyPaused;\n      }\n    },\n    _setPausedState: {\n      value: function value(paused, options) {\n        if (state.paused === paused) {\n          return this;\n        }\n        state.paused = paused;\n        if (paused) {\n          var onPause = getOption(options, 'onPause');\n          var onPostPause = getOption(options, 'onPostPause');\n          onPause === null || onPause === undefined || onPause();\n          removeListeners();\n          updateObservedNodes();\n          onPostPause === null || onPostPause === undefined || onPostPause();\n        } else {\n          var onUnpause = getOption(options, 'onUnpause');\n          var onPostUnpause = getOption(options, 'onPostUnpause');\n          onUnpause === null || onUnpause === undefined || onUnpause();\n          updateTabbableNodes();\n          addListeners();\n          updateObservedNodes();\n          onPostUnpause === null || onPostUnpause === undefined || onPostUnpause();\n        }\n        return this;\n      }\n    }\n  });\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n  return trap;\n};\nexport { createFocusTrap };","map":{"version":3,"names":["activeFocusTraps","activateTrap","trapStack","trap","length","activeTrap","_setPausedState","trapIndex","indexOf","push","splice","deactivateTrap","_isManuallyPaused","isSelectableInput","node","tagName","toLowerCase","select","isEscapeEvent","e","undefined","key","keyCode","isTabEvent","isKeyForward","shiftKey","isKeyBackward","delay","fn","setTimeout","valueOrHandler","value","_len","arguments","params","Array","_key","apply","getActualTarget","event","target","shadowRoot","composedPath","internalTrapStack","createFocusTrap","elements","userOptions","doc","document","config","_objectSpread2","returnFocusOnDeactivate","escapeDeactivates","delayInitialFocus","state","containers","containerGroups","tabbableGroups","nodeFocusedBeforeActivation","mostRecentlyFocusedNode","active","paused","manuallyPaused","delayInitialFocusTimer","recentNavEvent","getOption","configOverrideOptions","optionName","configOptionName","findContainerIndex","element","findIndex","_ref","container","tabbableNodes","contains","includes","find","getNodeForOption","_ref2","_ref2$hasFallback","hasFallback","_ref2$params","optionValue","_toConsumableArray","Error","concat","querySelector","err","message","getInitialFocusNode","isFocusable","tabbableOptions","activeElement","firstTabbableGroup","firstTabbableNode","updateTabbableNodes","map","tabbable","focusableNodes","focusable","lastTabbableNode","firstDomTabbableNode","isTabbable","lastDomTabbableNode","slice","reverse","posTabIndexesFound","getTabIndex","nextTabbableNode","forward","nodeIdx","el","filter","group","g","_getActiveElement","getActiveElement","_tryFocus","tryFocus","focus","preventScroll","getReturnFocusNode","previousActiveElement","findNextNavNode","_ref3","_ref3$isBackward","isBackward","destinationNode","containerIndex","containerGroup","startOfGroupIndex","_ref4","destinationGroupIndex","destinationGroup","lastOfGroupIndex","_ref5","_destinationGroupIndex","_destinationGroup","checkPointerDown","clickOutsideDeactivates","deactivate","returnFocus","allowOutsideClick","preventDefault","checkFocusIn","targetContained","Document","stopImmediatePropagation","nextNode","navAcrossContainers","mruContainerIdx","mruTabIdx","some","n","checkKeyNav","checkTabKey","checkEscapeKey","checkClick","addListeners","addEventListener","capture","passive","removeListeners","removeEventListener","checkDomRemoval","mutations","isFocusedNodeRemoved","mutation","removedNodes","from","mutationObserver","window","MutationObserver","updateObservedNodes","disconnect","observe","subtree","childList","activate","activateOptions","onActivate","onPostActivate","checkCanFocusTrap","finishActivation","then","deactivateOptions","options","onDeactivate","onPostDeactivate","checkCanReturnFocus","clearTimeout","finishDeactivation","pause","pauseOptions","unpause","unpauseOptions","updateContainerElements","containerElements","elementsAsArray","Boolean","Object","defineProperties","onPause","onPostPause","onUnpause","onPostUnpause"],"sources":["C:\\Users\\nolan\\tasks\\HenHacks2025\\henhack25\\node_modules\\focus-trap\\index.js"],"sourcesContent":["import {\n  tabbable,\n  focusable,\n  isFocusable,\n  isTabbable,\n  getTabIndex,\n} from 'tabbable';\n\nconst activeFocusTraps = {\n  activateTrap(trapStack, trap) {\n    if (trapStack.length > 0) {\n      const activeTrap = trapStack[trapStack.length - 1];\n      if (activeTrap !== trap) {\n        activeTrap._setPausedState(true);\n      }\n    }\n\n    const trapIndex = trapStack.indexOf(trap);\n    if (trapIndex === -1) {\n      trapStack.push(trap);\n    } else {\n      // move this existing trap to the front of the queue\n      trapStack.splice(trapIndex, 1);\n      trapStack.push(trap);\n    }\n  },\n\n  deactivateTrap(trapStack, trap) {\n    const trapIndex = trapStack.indexOf(trap);\n    if (trapIndex !== -1) {\n      trapStack.splice(trapIndex, 1);\n    }\n\n    if (\n      trapStack.length > 0 &&\n      !trapStack[trapStack.length - 1]._isManuallyPaused()\n    ) {\n      trapStack[trapStack.length - 1]._setPausedState(false);\n    }\n  },\n};\n\nconst isSelectableInput = function (node) {\n  return (\n    node.tagName &&\n    node.tagName.toLowerCase() === 'input' &&\n    typeof node.select === 'function'\n  );\n};\n\nconst isEscapeEvent = function (e) {\n  return e?.key === 'Escape' || e?.key === 'Esc' || e?.keyCode === 27;\n};\n\nconst isTabEvent = function (e) {\n  return e?.key === 'Tab' || e?.keyCode === 9;\n};\n\n// checks for TAB by default\nconst isKeyForward = function (e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n// checks for SHIFT+TAB by default\nconst isKeyBackward = function (e) {\n  return isTabEvent(e) && e.shiftKey;\n};\n\nconst delay = function (fn) {\n  return setTimeout(fn, 0);\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nconst valueOrHandler = function (value, ...params) {\n  return typeof value === 'function' ? value(...params) : value;\n};\n\nconst getActualTarget = function (event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function'\n    ? event.composedPath()[0]\n    : event.target;\n};\n\n// NOTE: this must be _outside_ `createFocusTrap()` to make sure all traps in this\n//  current instance use the same stack if `userOptions.trapStack` isn't specified\nconst internalTrapStack = [];\n\nconst createFocusTrap = function (elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  const doc = userOptions?.document || document;\n\n  const trapStack = userOptions?.trapStack || internalTrapStack;\n\n  const config = {\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    isKeyForward,\n    isKeyBackward,\n    ...userOptions,\n  };\n\n  const state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   posTabIndexesFound: boolean,\n    //   firstTabbableNode: HTMLElement|undefined,\n    //   lastTabbableNode: HTMLElement|undefined,\n    //   firstDomTabbableNode: HTMLElement|undefined,\n    //   lastDomTabbableNode: HTMLElement|undefined,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [], // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n    manuallyPaused: false,\n\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined,\n\n    // the most recent KeyboardEvent for the configured nav key (typically [SHIFT+]TAB), if any\n    recentNavEvent: undefined,\n  };\n\n  let trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  const getOption = (configOverrideOptions, optionName, configOptionName) => {\n    return configOverrideOptions &&\n      configOverrideOptions[optionName] !== undefined\n      ? configOverrideOptions[optionName]\n      : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @param {Event} [event] If available, and `element` isn't directly found in any container,\n   *  the event's composed path is used to see if includes any known trap containers in the\n   *  case where the element is inside a Shadow DOM.\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  const findContainerIndex = function (element, event) {\n    const composedPath =\n      typeof event?.composedPath === 'function'\n        ? event.composedPath()\n        : undefined;\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(\n      ({ container, tabbableNodes }) =>\n        container.contains(element) ||\n        // fall back to explicit tabbable search which will take into consideration any\n        //  web components if the `tabbableOptions.getShadowRoot` option was used for\n        //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n        //  look inside web components even if open)\n        composedPath?.includes(container) ||\n        tabbableNodes.find((node) => node === element)\n    );\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @param {Object} options\n   * @param {boolean} [options.hasFallback] True if the option could be a selector string\n   *  and the option allows for a fallback scenario in the case where the selector is\n   *  valid but does not match a node (i.e. the queried node doesn't exist in the DOM).\n   * @param {Array} [options.params] Params to pass to the option if it's a function.\n   * @returns {undefined | null | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `null` if the option didn't resolve\n   *  to a node but `options.hasFallback=true`, `false` if the option resolved to `false`\n   *  (node explicitly not given); otherwise, the resolved DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node, unless the option is a selector string and `options.hasFallback=true`.\n   */\n  const getNodeForOption = function (\n    optionName,\n    { hasFallback = false, params = [] } = {}\n  ) {\n    let optionValue = config[optionName];\n\n    if (typeof optionValue === 'function') {\n      optionValue = optionValue(...params);\n    }\n\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\n        `\\`${optionName}\\` was specified but was not a node, or did not return a node`\n      );\n    }\n\n    let node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      try {\n        node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      } catch (err) {\n        throw new Error(\n          `\\`${optionName}\\` appears to be an invalid selector; error=\"${err.message}\"`\n        );\n      }\n\n      if (!node) {\n        if (!hasFallback) {\n          throw new Error(\n            `\\`${optionName}\\` as selector refers to no known node`\n          );\n        }\n        // else, `node` MUST be `null` because that's what `Document.querySelector()` returns\n        //  if the selector is valid but doesn't match anything\n      }\n    }\n\n    return node;\n  };\n\n  const getInitialFocusNode = function () {\n    let node = getNodeForOption('initialFocus', { hasFallback: true });\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n\n    if (\n      node === undefined ||\n      (node && !isFocusable(node, config.tabbableOptions))\n    ) {\n      // option not specified nor focusable: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        const firstTabbableGroup = state.tabbableGroups[0];\n        const firstTabbableNode =\n          firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    } else if (node === null) {\n      // option is a VALID selector string that doesn't yield a node: use the `fallbackFocus`\n      //  option instead of the default behavior when the option isn't specified at all\n      node = getNodeForOption('fallbackFocus');\n    }\n\n    if (!node) {\n      throw new Error(\n        'Your focus-trap needs to have at least one focusable element'\n      );\n    }\n\n    return node;\n  };\n\n  const updateTabbableNodes = function () {\n    state.containerGroups = state.containers.map((container) => {\n      const tabbableNodes = tabbable(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes since nodes with negative `tabindex` attributes\n      //  are focusable but not tabbable\n      const focusableNodes = focusable(container, config.tabbableOptions);\n\n      const firstTabbableNode =\n        tabbableNodes.length > 0 ? tabbableNodes[0] : undefined;\n      const lastTabbableNode =\n        tabbableNodes.length > 0\n          ? tabbableNodes[tabbableNodes.length - 1]\n          : undefined;\n\n      const firstDomTabbableNode = focusableNodes.find((node) =>\n        isTabbable(node)\n      );\n      const lastDomTabbableNode = focusableNodes\n        .slice()\n        .reverse()\n        .find((node) => isTabbable(node));\n\n      const posTabIndexesFound = !!tabbableNodes.find(\n        (node) => getTabIndex(node) > 0\n      );\n\n      return {\n        container,\n        tabbableNodes,\n        focusableNodes,\n\n        /** True if at least one node with positive `tabindex` was found in this container. */\n        posTabIndexesFound,\n\n        /** First tabbable node in container, __tabindex__ order; `undefined` if none. */\n        firstTabbableNode,\n        /** Last tabbable node in container, __tabindex__ order; `undefined` if none. */\n        lastTabbableNode,\n\n        // NOTE: DOM order is NOT NECESSARILY \"document position\" order, but figuring that out\n        //  would require more than just https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n        //  because that API doesn't work with Shadow DOM as well as it should (@see\n        //  https://github.com/whatwg/dom/issues/320) and since this first/last is only needed, so far,\n        //  to address an edge case related to positive tabindex support, this seems like a much easier,\n        //  \"close enough most of the time\" alternative for positive tabindexes which should generally\n        //  be avoided anyway...\n        /** First tabbable node in container, __DOM__ order; `undefined` if none. */\n        firstDomTabbableNode,\n        /** Last tabbable node in container, __DOM__ order; `undefined` if none. */\n        lastDomTabbableNode,\n\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode(node, forward = true) {\n          const nodeIdx = tabbableNodes.indexOf(node);\n          if (nodeIdx < 0) {\n            // either not tabbable nor focusable, or was focused but not tabbable (negative tabindex):\n            //  since `node` should at least have been focusable, we assume that's the case and mimic\n            //  what browsers do, which is set focus to the next node in __document position order__,\n            //  regardless of positive tabindexes, if any -- and for reasons explained in the NOTE\n            //  above related to `firstDomTabbable` and `lastDomTabbable` properties, we fall back to\n            //  basic DOM order\n            if (forward) {\n              return focusableNodes\n                .slice(focusableNodes.indexOf(node) + 1)\n                .find((el) => isTabbable(el));\n            }\n\n            return focusableNodes\n              .slice(0, focusableNodes.indexOf(node))\n              .reverse()\n              .find((el) => isTabbable(el));\n          }\n\n          return tabbableNodes[nodeIdx + (forward ? 1 : -1)];\n        },\n      };\n    });\n\n    state.tabbableGroups = state.containerGroups.filter(\n      (group) => group.tabbableNodes.length > 0\n    );\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (\n      state.tabbableGroups.length <= 0 &&\n      !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error(\n        'Your focus-trap must have at least one container with at least one tabbable node in it at all times'\n      );\n    }\n\n    // NOTE: Positive tabindexes are only properly supported in single-container traps because\n    //  doing it across multiple containers where tabindexes could be all over the place\n    //  would require Tabbable to support multiple containers, would require additional\n    //  specialized Shadow DOM support, and would require Tabbable's multi-container support\n    //  to look at those containers in document position order rather than user-provided\n    //  order (as they are treated in Focus-trap, for legacy reasons). See discussion on\n    //  https://github.com/focus-trap/focus-trap/issues/375 for more details.\n    if (\n      state.containerGroups.find((g) => g.posTabIndexesFound) &&\n      state.containerGroups.length > 1\n    ) {\n      throw new Error(\n        \"At least one node with a positive tabindex was found in one of your focus-trap's multiple containers. Positive tabindexes are only supported in single-container focus-traps.\"\n      );\n    }\n  };\n\n  /**\n   * Gets the current activeElement. If it's a web-component and has open shadow-root\n   * it will recursively search inside shadow roots for the \"true\" activeElement.\n   *\n   * @param {Document | ShadowRoot} el\n   *\n   * @returns {HTMLElement} The element that currently has the focus\n   **/\n  const getActiveElement = function (el) {\n    const activeElement = el.activeElement;\n\n    if (!activeElement) {\n      return;\n    }\n\n    if (\n      activeElement.shadowRoot &&\n      activeElement.shadowRoot.activeElement !== null\n    ) {\n      return getActiveElement(activeElement.shadowRoot);\n    }\n\n    return activeElement;\n  };\n\n  const tryFocus = function (node) {\n    if (node === false) {\n      return;\n    }\n\n    if (node === getActiveElement(document)) {\n      return;\n    }\n\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n\n    node.focus({ preventScroll: !!config.preventScroll });\n    // NOTE: focus() API does not trigger focusIn event so set MRU node manually\n    state.mostRecentlyFocusedNode = node;\n\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n\n  const getReturnFocusNode = function (previousActiveElement) {\n    const node = getNodeForOption('setReturnFocus', {\n      params: [previousActiveElement],\n    });\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  /**\n   * Finds the next node (in either direction) where focus should move according to a\n   *  keyboard focus-in event.\n   * @param {Object} params\n   * @param {Node} [params.target] Known target __from which__ to navigate, if any.\n   * @param {KeyboardEvent|FocusEvent} [params.event] Event to use if `target` isn't known (event\n   *  will be used to determine the `target`). Ignored if `target` is specified.\n   * @param {boolean} [params.isBackward] True if focus should move backward.\n   * @returns {Node|undefined} The next node, or `undefined` if a next node couldn't be\n   *  determined given the current state of the trap.\n   */\n  const findNextNavNode = function ({ target, event, isBackward = false }) {\n    target = target || getActualTarget(event);\n    updateTabbableNodes();\n\n    let destinationNode = null;\n\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      const containerIndex = findContainerIndex(target, event);\n      const containerGroup =\n        containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back into...\n        if (isBackward) {\n          // ...the last node in the last group\n          destinationNode =\n            state.tabbableGroups[state.tabbableGroups.length - 1]\n              .lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (isBackward) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        let startOfGroupIndex = state.tabbableGroups.findIndex(\n          ({ firstTabbableNode }) => target === firstTabbableNode\n        );\n\n        if (\n          startOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target, false)))\n        ) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          const destinationGroupIndex =\n            startOfGroupIndex === 0\n              ? state.tabbableGroups.length - 1\n              : startOfGroupIndex - 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n\n          destinationNode =\n            getTabIndex(target) >= 0\n              ? destinationGroup.lastTabbableNode\n              : destinationGroup.lastDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target, false);\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        let lastOfGroupIndex = state.tabbableGroups.findIndex(\n          ({ lastTabbableNode }) => target === lastTabbableNode\n        );\n\n        if (\n          lastOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target)))\n        ) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          const destinationGroupIndex =\n            lastOfGroupIndex === state.tabbableGroups.length - 1\n              ? 0\n              : lastOfGroupIndex + 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n\n          destinationNode =\n            getTabIndex(target) >= 0\n              ? destinationGroup.firstTabbableNode\n              : destinationGroup.firstDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target);\n        }\n      }\n    } else {\n      // no groups available\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n\n    return destinationNode;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  const checkPointerDown = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target, e) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked (and if not focusable, to \"nothing\"); by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node), whether the\n        //  outside click was on a focusable node or not\n        returnFocus: config.returnFocusOnDeactivate,\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  // NOTE: the focusIn event is NOT cancelable, so if focus escapes, it may cause unexpected\n  //  scrolling if the node that got focused was out of view; there's nothing we can do to\n  //  prevent that from happening by the time we discover that focus escaped\n  const checkFocusIn = function (event) {\n    const target = getActualTarget(event);\n    const targetContained = findContainerIndex(target, event) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      event.stopImmediatePropagation();\n\n      // focus will escape if the MRU node had a positive tab index and user tried to nav forward;\n      //  it will also escape if the MRU node had a 0 tab index and user tried to nav backward\n      //  toward a node with a positive tab index\n      let nextNode; // next node to focus, if we find one\n      let navAcrossContainers = true;\n      if (state.mostRecentlyFocusedNode) {\n        if (getTabIndex(state.mostRecentlyFocusedNode) > 0) {\n          // MRU container index must be >=0 otherwise we wouldn't have it as an MRU node...\n          const mruContainerIdx = findContainerIndex(\n            state.mostRecentlyFocusedNode\n          );\n          // there MAY not be any tabbable nodes in the container if there are at least 2 containers\n          //  and the MRU node is focusable but not tabbable (focus-trap requires at least 1 container\n          //  with at least one tabbable node in order to function, so this could be the other container\n          //  with nothing tabbable in it)\n          const { tabbableNodes } = state.containerGroups[mruContainerIdx];\n          if (tabbableNodes.length > 0) {\n            // MRU tab index MAY not be found if the MRU node is focusable but not tabbable\n            const mruTabIdx = tabbableNodes.findIndex(\n              (node) => node === state.mostRecentlyFocusedNode\n            );\n            if (mruTabIdx >= 0) {\n              if (config.isKeyForward(state.recentNavEvent)) {\n                if (mruTabIdx + 1 < tabbableNodes.length) {\n                  nextNode = tabbableNodes[mruTabIdx + 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              } else {\n                if (mruTabIdx - 1 >= 0) {\n                  nextNode = tabbableNodes[mruTabIdx - 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              }\n              // else, don't find in container order without considering direction too\n            }\n          }\n          // else, no tabbable nodes in that container (which means we must have at least one other\n          //  container with at least one tabbable node in it, otherwise focus-trap would've thrown\n          //  an error the last time updateTabbableNodes() was run): find next node among all known\n          //  containers\n        } else {\n          // check to see if there's at least one tabbable node with a positive tab index inside\n          //  the trap because focus seems to escape when navigating backward from a tabbable node\n          //  with tabindex=0 when this is the case (instead of wrapping to the tabbable node with\n          //  the greatest positive tab index like it should)\n          if (\n            !state.containerGroups.some((g) =>\n              g.tabbableNodes.some((n) => getTabIndex(n) > 0)\n            )\n          ) {\n            // no containers with tabbable nodes with positive tab indexes which means the focus\n            //  escaped for some other reason and we should just execute the fallback to the\n            //  MRU node or initial focus node, if any\n            navAcrossContainers = false;\n          }\n        }\n      } else {\n        // no MRU node means we're likely in some initial condition when the trap has just\n        //  been activated and initial focus hasn't been given yet, in which case we should\n        //  fall through to trying to focus the initial focus node, which is what should\n        //  happen below at this point in the logic\n        navAcrossContainers = false;\n      }\n\n      if (navAcrossContainers) {\n        nextNode = findNextNavNode({\n          // move FROM the MRU node, not event-related node (which will be the node that is\n          //  outside the trap causing the focus escape we're trying to fix)\n          target: state.mostRecentlyFocusedNode,\n          isBackward: config.isKeyBackward(state.recentNavEvent),\n        });\n      }\n\n      if (nextNode) {\n        tryFocus(nextNode);\n      } else {\n        tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n      }\n    }\n\n    state.recentNavEvent = undefined; // clear\n  };\n\n  // Hijack key nav events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  const checkKeyNav = function (event, isBackward = false) {\n    state.recentNavEvent = event;\n\n    const destinationNode = findNextNavNode({ event, isBackward });\n    if (destinationNode) {\n      if (isTabEvent(event)) {\n        // since tab natively moves focus, we wouldn't have a destination node unless we\n        //  were on the edge of a container and had to move to the next/previous edge, in\n        //  which case we want to prevent default to keep the browser from moving focus\n        //  to where it normally would\n        event.preventDefault();\n      }\n      tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n\n  const checkTabKey = function (event) {\n    if (config.isKeyForward(event) || config.isKeyBackward(event)) {\n      checkKeyNav(event, config.isKeyBackward(event));\n    }\n  };\n\n  // we use a different event phase for the Escape key to allow canceling the event and checking for this in escapeDeactivates\n  const checkEscapeKey = function (event) {\n    if (\n      isEscapeEvent(event) &&\n      valueOrHandler(config.escapeDeactivates, event) !== false\n    ) {\n      event.preventDefault();\n      trap.deactivate();\n    }\n  };\n\n  const checkClick = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target, e) >= 0) {\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  const addListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trapStack, trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus\n      ? delay(function () {\n          tryFocus(getInitialFocusNode());\n        })\n      : tryFocus(getInitialFocusNode());\n\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('keydown', checkTabKey, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('keydown', checkEscapeKey);\n\n    return trap;\n  };\n\n  const removeListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkTabKey, true);\n    doc.removeEventListener('keydown', checkEscapeKey);\n\n    return trap;\n  };\n\n  //\n  // MUTATION OBSERVER\n  //\n\n  const checkDomRemoval = function (mutations) {\n    const isFocusedNodeRemoved = mutations.some(function (mutation) {\n      const removedNodes = Array.from(mutation.removedNodes);\n      return removedNodes.some(function (node) {\n        return node === state.mostRecentlyFocusedNode;\n      });\n    });\n\n    // If the currently focused is removed then browsers will move focus to the\n    // <body> element. If this happens, try to move focus back into the trap.\n    if (isFocusedNodeRemoved) {\n      tryFocus(getInitialFocusNode());\n    }\n  };\n\n  // Use MutationObserver - if supported - to detect if focused node is removed\n  // from the DOM.\n  const mutationObserver =\n    typeof window !== 'undefined' && 'MutationObserver' in window\n      ? new MutationObserver(checkDomRemoval)\n      : undefined;\n\n  const updateObservedNodes = function () {\n    if (!mutationObserver) {\n      return;\n    }\n\n    mutationObserver.disconnect();\n    if (state.active && !state.paused) {\n      state.containers.map(function (container) {\n        mutationObserver.observe(container, {\n          subtree: true,\n          childList: true,\n        });\n      });\n    }\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n\n    get paused() {\n      return state.paused;\n    },\n\n    activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n\n      const onActivate = getOption(activateOptions, 'onActivate');\n      const onPostActivate = getOption(activateOptions, 'onPostActivate');\n      const checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n\n      onActivate?.();\n\n      const finishActivation = () => {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        updateObservedNodes();\n        onPostActivate?.();\n      };\n\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(\n          finishActivation,\n          finishActivation\n        );\n        return this;\n      }\n\n      finishActivation();\n      return this;\n    },\n\n    deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      const options = {\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus,\n        ...deactivateOptions,\n      };\n\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n      updateObservedNodes();\n\n      activeFocusTraps.deactivateTrap(trapStack, trap);\n\n      const onDeactivate = getOption(options, 'onDeactivate');\n      const onPostDeactivate = getOption(options, 'onPostDeactivate');\n      const checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      const returnFocus = getOption(\n        options,\n        'returnFocus',\n        'returnFocusOnDeactivate'\n      );\n\n      onDeactivate?.();\n\n      const finishDeactivation = () => {\n        delay(() => {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          onPostDeactivate?.();\n        });\n      };\n\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(\n          getReturnFocusNode(state.nodeFocusedBeforeActivation)\n        ).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n\n      finishDeactivation();\n      return this;\n    },\n\n    pause(pauseOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      state.manuallyPaused = true;\n\n      return this._setPausedState(true, pauseOptions);\n    },\n\n    unpause(unpauseOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      state.manuallyPaused = false;\n\n      if (trapStack[trapStack.length - 1] !== this) {\n        return this;\n      }\n\n      return this._setPausedState(false, unpauseOptions);\n    },\n\n    updateContainerElements(containerElements) {\n      const elementsAsArray = [].concat(containerElements).filter(Boolean);\n\n      state.containers = elementsAsArray.map((element) =>\n        typeof element === 'string' ? doc.querySelector(element) : element\n      );\n\n      if (state.active) {\n        updateTabbableNodes();\n      }\n\n      updateObservedNodes();\n\n      return this;\n    },\n  };\n\n  Object.defineProperties(trap, {\n    _isManuallyPaused: {\n      value() {\n        return state.manuallyPaused;\n      },\n    },\n    _setPausedState: {\n      value(paused, options) {\n        if (state.paused === paused) {\n          return this;\n        }\n\n        state.paused = paused;\n        if (paused) {\n          const onPause = getOption(options, 'onPause');\n          const onPostPause = getOption(options, 'onPostPause');\n          onPause?.();\n\n          removeListeners();\n          updateObservedNodes();\n\n          onPostPause?.();\n        } else {\n          const onUnpause = getOption(options, 'onUnpause');\n          const onPostUnpause = getOption(options, 'onPostUnpause');\n\n          onUnpause?.();\n\n          updateTabbableNodes();\n          addListeners();\n          updateObservedNodes();\n\n          onPostUnpause?.();\n        }\n\n        return this;\n      },\n    },\n  });\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n\n  return trap;\n};\n\nexport { createFocusTrap };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}