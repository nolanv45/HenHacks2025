{"ast":null,"code":"/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global setTimeout, clearTimeout */\n\nimport { UNDEFINED_VALUE } from \"./constants.js\";\nimport { CODEC_INFLATE, CODEC_DEFLATE, ERR_INVALID_SIGNATURE, ERR_INVALID_PASSWORD, ERR_ABORT_CHECK_PASSWORD } from \"./streams/codec-stream.js\";\nimport { CodecWorker } from \"./codec-worker.js\";\nlet pool = [];\nconst pendingRequests = [];\nexport { runWorker, terminateWorkers, CODEC_DEFLATE, CODEC_INFLATE, ERR_INVALID_SIGNATURE, ERR_INVALID_PASSWORD, ERR_ABORT_CHECK_PASSWORD };\nlet indexWorker = 0;\nasync function runWorker(stream, workerOptions) {\n  const {\n    options,\n    config\n  } = workerOptions;\n  const {\n    transferStreams,\n    useWebWorkers,\n    useCompressionStream,\n    codecType,\n    compressed,\n    signed,\n    encrypted\n  } = options;\n  const {\n    workerScripts,\n    maxWorkers\n  } = config;\n  workerOptions.transferStreams = transferStreams || transferStreams === UNDEFINED_VALUE;\n  const streamCopy = !compressed && !signed && !encrypted && !workerOptions.transferStreams;\n  workerOptions.useWebWorkers = !streamCopy && (useWebWorkers || useWebWorkers === UNDEFINED_VALUE && config.useWebWorkers);\n  workerOptions.scripts = workerOptions.useWebWorkers && workerScripts ? workerScripts[codecType] : [];\n  options.useCompressionStream = useCompressionStream || useCompressionStream === UNDEFINED_VALUE && config.useCompressionStream;\n  return (await getWorker()).run();\n\n  // deno-lint-ignore require-await\n  async function getWorker() {\n    const workerData = pool.find(workerData => !workerData.busy);\n    if (workerData) {\n      clearTerminateTimeout(workerData);\n      return new CodecWorker(workerData, stream, workerOptions, onTaskFinished);\n    } else if (pool.length < maxWorkers) {\n      const workerData = {\n        indexWorker\n      };\n      indexWorker++;\n      pool.push(workerData);\n      return new CodecWorker(workerData, stream, workerOptions, onTaskFinished);\n    } else {\n      return new Promise(resolve => pendingRequests.push({\n        resolve,\n        stream,\n        workerOptions\n      }));\n    }\n  }\n  function onTaskFinished(workerData) {\n    if (pendingRequests.length) {\n      const [{\n        resolve,\n        stream,\n        workerOptions\n      }] = pendingRequests.splice(0, 1);\n      resolve(new CodecWorker(workerData, stream, workerOptions, onTaskFinished));\n    } else if (workerData.worker) {\n      clearTerminateTimeout(workerData);\n      terminateWorker(workerData, workerOptions);\n    } else {\n      pool = pool.filter(data => data != workerData);\n    }\n  }\n}\nfunction terminateWorker(workerData, workerOptions) {\n  const {\n    config\n  } = workerOptions;\n  const {\n    terminateWorkerTimeout\n  } = config;\n  if (Number.isFinite(terminateWorkerTimeout) && terminateWorkerTimeout >= 0) {\n    if (workerData.terminated) {\n      workerData.terminated = false;\n    } else {\n      workerData.terminateTimeout = setTimeout(async () => {\n        pool = pool.filter(data => data != workerData);\n        try {\n          await workerData.terminate();\n          // eslint-disable-next-line no-unused-vars\n        } catch (_) {\n          // ignored\n        }\n      }, terminateWorkerTimeout);\n    }\n  }\n}\nfunction clearTerminateTimeout(workerData) {\n  const {\n    terminateTimeout\n  } = workerData;\n  if (terminateTimeout) {\n    clearTimeout(terminateTimeout);\n    workerData.terminateTimeout = null;\n  }\n}\nasync function terminateWorkers() {\n  await Promise.allSettled(pool.map(workerData => {\n    clearTerminateTimeout(workerData);\n    return workerData.terminate();\n  }));\n}","map":{"version":3,"names":["UNDEFINED_VALUE","CODEC_INFLATE","CODEC_DEFLATE","ERR_INVALID_SIGNATURE","ERR_INVALID_PASSWORD","ERR_ABORT_CHECK_PASSWORD","CodecWorker","pool","pendingRequests","runWorker","terminateWorkers","indexWorker","stream","workerOptions","options","config","transferStreams","useWebWorkers","useCompressionStream","codecType","compressed","signed","encrypted","workerScripts","maxWorkers","streamCopy","scripts","getWorker","run","workerData","find","busy","clearTerminateTimeout","onTaskFinished","length","push","Promise","resolve","splice","worker","terminateWorker","filter","data","terminateWorkerTimeout","Number","isFinite","terminated","terminateTimeout","setTimeout","terminate","_","clearTimeout","allSettled","map"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/node_modules/@zip.js/zip.js/lib/core/codec-pool.js"],"sourcesContent":["/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global setTimeout, clearTimeout */\n\nimport { UNDEFINED_VALUE } from \"./constants.js\";\nimport {\n\tCODEC_INFLATE,\n\tCODEC_DEFLATE,\n\tERR_INVALID_SIGNATURE,\n\tERR_INVALID_PASSWORD,\n\tERR_ABORT_CHECK_PASSWORD\n} from \"./streams/codec-stream.js\";\nimport { CodecWorker } from \"./codec-worker.js\";\n\nlet pool = [];\nconst pendingRequests = [];\n\nexport {\n\trunWorker,\n\tterminateWorkers,\n\tCODEC_DEFLATE,\n\tCODEC_INFLATE,\n\tERR_INVALID_SIGNATURE,\n\tERR_INVALID_PASSWORD,\n\tERR_ABORT_CHECK_PASSWORD\n};\n\nlet indexWorker = 0;\n\nasync function runWorker(stream, workerOptions) {\n\tconst { options, config } = workerOptions;\n\tconst { transferStreams, useWebWorkers, useCompressionStream, codecType, compressed, signed, encrypted } = options;\n\tconst { workerScripts, maxWorkers } = config;\n\tworkerOptions.transferStreams = transferStreams || transferStreams === UNDEFINED_VALUE;\n\tconst streamCopy = !compressed && !signed && !encrypted && !workerOptions.transferStreams;\n\tworkerOptions.useWebWorkers = !streamCopy && (useWebWorkers || (useWebWorkers === UNDEFINED_VALUE && config.useWebWorkers));\n\tworkerOptions.scripts = workerOptions.useWebWorkers && workerScripts ? workerScripts[codecType] : [];\n\toptions.useCompressionStream = useCompressionStream || (useCompressionStream === UNDEFINED_VALUE && config.useCompressionStream);\n\treturn (await getWorker()).run();\n\n\t// deno-lint-ignore require-await\n\tasync function getWorker() {\n\t\tconst workerData = pool.find(workerData => !workerData.busy);\n\t\tif (workerData) {\n\t\t\tclearTerminateTimeout(workerData);\n\t\t\treturn new CodecWorker(workerData, stream, workerOptions, onTaskFinished);\n\t\t} else if (pool.length < maxWorkers) {\n\t\t\tconst workerData = { indexWorker };\n\t\t\tindexWorker++;\n\t\t\tpool.push(workerData);\n\t\t\treturn new CodecWorker(workerData, stream, workerOptions, onTaskFinished);\n\t\t} else {\n\t\t\treturn new Promise(resolve => pendingRequests.push({ resolve, stream, workerOptions }));\n\t\t}\n\t}\n\n\tfunction onTaskFinished(workerData) {\n\t\tif (pendingRequests.length) {\n\t\t\tconst [{ resolve, stream, workerOptions }] = pendingRequests.splice(0, 1);\n\t\t\tresolve(new CodecWorker(workerData, stream, workerOptions, onTaskFinished));\n\t\t} else if (workerData.worker) {\n\t\t\tclearTerminateTimeout(workerData);\n\t\t\tterminateWorker(workerData, workerOptions);\n\t\t} else {\n\t\t\tpool = pool.filter(data => data != workerData);\n\t\t}\n\t}\n}\n\nfunction terminateWorker(workerData, workerOptions) {\n\tconst { config } = workerOptions;\n\tconst { terminateWorkerTimeout } = config;\n\tif (Number.isFinite(terminateWorkerTimeout) && terminateWorkerTimeout >= 0) {\n\t\tif (workerData.terminated) {\n\t\t\tworkerData.terminated = false;\n\t\t} else {\n\t\t\tworkerData.terminateTimeout = setTimeout(async () => {\n\t\t\t\tpool = pool.filter(data => data != workerData);\n\t\t\t\ttry {\n\t\t\t\t\tawait workerData.terminate();\n\t\t\t\t\t// eslint-disable-next-line no-unused-vars\n\t\t\t\t} catch (_) {\n\t\t\t\t\t// ignored\n\t\t\t\t}\n\t\t\t}, terminateWorkerTimeout);\n\t\t}\n\t}\n}\n\nfunction clearTerminateTimeout(workerData) {\n\tconst { terminateTimeout } = workerData;\n\tif (terminateTimeout) {\n\t\tclearTimeout(terminateTimeout);\n\t\tworkerData.terminateTimeout = null;\n\t}\n}\n\nasync function terminateWorkers() {\n\tawait Promise.allSettled(pool.map(workerData => {\n\t\tclearTerminateTimeout(workerData);\n\t\treturn workerData.terminate();\n\t}));\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}