{"ast":null,"code":"/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global Blob, atob, btoa, XMLHttpRequest, URL, fetch, ReadableStream, WritableStream, FileReader, TransformStream, Response */\n// deno-lint-ignore-file no-this-alias\n\nimport { UNDEFINED_VALUE, FUNCTION_TYPE, END_OF_CENTRAL_DIR_LENGTH } from \"./constants.js\";\nimport { getConfiguration } from \"./configuration.js\";\nconst ERR_HTTP_STATUS = \"HTTP error \";\nconst ERR_HTTP_RANGE = \"HTTP Range not supported\";\nconst ERR_ITERATOR_COMPLETED_TOO_SOON = \"Writer iterator completed too soon\";\nconst CONTENT_TYPE_TEXT_PLAIN = \"text/plain\";\nconst HTTP_HEADER_CONTENT_LENGTH = \"Content-Length\";\nconst HTTP_HEADER_CONTENT_RANGE = \"Content-Range\";\nconst HTTP_HEADER_ACCEPT_RANGES = \"Accept-Ranges\";\nconst HTTP_HEADER_RANGE = \"Range\";\nconst HTTP_HEADER_CONTENT_TYPE = \"Content-Type\";\nconst HTTP_METHOD_HEAD = \"HEAD\";\nconst HTTP_METHOD_GET = \"GET\";\nconst HTTP_RANGE_UNIT = \"bytes\";\nconst DEFAULT_CHUNK_SIZE = 64 * 1024;\nconst PROPERTY_NAME_WRITABLE = \"writable\";\nclass Stream {\n  constructor() {\n    this.size = 0;\n  }\n  init() {\n    this.initialized = true;\n  }\n}\nclass Reader extends Stream {\n  get readable() {\n    const reader = this;\n    const {\n      chunkSize = DEFAULT_CHUNK_SIZE\n    } = reader;\n    const readable = new ReadableStream({\n      start() {\n        this.chunkOffset = 0;\n      },\n      async pull(controller) {\n        const {\n          offset = 0,\n          size,\n          diskNumberStart\n        } = readable;\n        const {\n          chunkOffset\n        } = this;\n        controller.enqueue(await readUint8Array(reader, offset + chunkOffset, Math.min(chunkSize, size - chunkOffset), diskNumberStart));\n        if (chunkOffset + chunkSize > size) {\n          controller.close();\n        } else {\n          this.chunkOffset += chunkSize;\n        }\n      }\n    });\n    return readable;\n  }\n}\nclass Writer extends Stream {\n  constructor() {\n    super();\n    const writer = this;\n    const writable = new WritableStream({\n      write(chunk) {\n        return writer.writeUint8Array(chunk);\n      }\n    });\n    Object.defineProperty(writer, PROPERTY_NAME_WRITABLE, {\n      get() {\n        return writable;\n      }\n    });\n  }\n  writeUint8Array() {\n    // abstract\n  }\n}\nclass Data64URIReader extends Reader {\n  constructor(dataURI) {\n    super();\n    let dataEnd = dataURI.length;\n    while (dataURI.charAt(dataEnd - 1) == \"=\") {\n      dataEnd--;\n    }\n    const dataStart = dataURI.indexOf(\",\") + 1;\n    Object.assign(this, {\n      dataURI,\n      dataStart,\n      size: Math.floor((dataEnd - dataStart) * 0.75)\n    });\n  }\n  readUint8Array(offset, length) {\n    const {\n      dataStart,\n      dataURI\n    } = this;\n    const dataArray = new Uint8Array(length);\n    const start = Math.floor(offset / 3) * 4;\n    const bytes = atob(dataURI.substring(start + dataStart, Math.ceil((offset + length) / 3) * 4 + dataStart));\n    const delta = offset - Math.floor(start / 4) * 3;\n    for (let indexByte = delta; indexByte < delta + length; indexByte++) {\n      dataArray[indexByte - delta] = bytes.charCodeAt(indexByte);\n    }\n    return dataArray;\n  }\n}\nclass Data64URIWriter extends Writer {\n  constructor(contentType) {\n    super();\n    Object.assign(this, {\n      data: \"data:\" + (contentType || \"\") + \";base64,\",\n      pending: []\n    });\n  }\n  writeUint8Array(array) {\n    const writer = this;\n    let indexArray = 0;\n    let dataString = writer.pending;\n    const delta = writer.pending.length;\n    writer.pending = \"\";\n    for (indexArray = 0; indexArray < Math.floor((delta + array.length) / 3) * 3 - delta; indexArray++) {\n      dataString += String.fromCharCode(array[indexArray]);\n    }\n    for (; indexArray < array.length; indexArray++) {\n      writer.pending += String.fromCharCode(array[indexArray]);\n    }\n    if (dataString.length > 2) {\n      writer.data += btoa(dataString);\n    } else {\n      writer.pending = dataString;\n    }\n  }\n  getData() {\n    return this.data + btoa(this.pending);\n  }\n}\nclass BlobReader extends Reader {\n  constructor(blob) {\n    super();\n    Object.assign(this, {\n      blob,\n      size: blob.size\n    });\n  }\n  async readUint8Array(offset, length) {\n    const reader = this;\n    const offsetEnd = offset + length;\n    const blob = offset || offsetEnd < reader.size ? reader.blob.slice(offset, offsetEnd) : reader.blob;\n    let arrayBuffer = await blob.arrayBuffer();\n    if (arrayBuffer.byteLength > length) {\n      arrayBuffer = arrayBuffer.slice(offset, offsetEnd);\n    }\n    return new Uint8Array(arrayBuffer);\n  }\n}\nclass BlobWriter extends Stream {\n  constructor(contentType) {\n    super();\n    const writer = this;\n    const transformStream = new TransformStream();\n    const headers = [];\n    if (contentType) {\n      headers.push([HTTP_HEADER_CONTENT_TYPE, contentType]);\n    }\n    Object.defineProperty(writer, PROPERTY_NAME_WRITABLE, {\n      get() {\n        return transformStream.writable;\n      }\n    });\n    writer.blob = new Response(transformStream.readable, {\n      headers\n    }).blob();\n  }\n  getData() {\n    return this.blob;\n  }\n}\nclass TextReader extends BlobReader {\n  constructor(text) {\n    super(new Blob([text], {\n      type: CONTENT_TYPE_TEXT_PLAIN\n    }));\n  }\n}\nclass TextWriter extends BlobWriter {\n  constructor(encoding) {\n    super(encoding);\n    Object.assign(this, {\n      encoding,\n      utf8: !encoding || encoding.toLowerCase() == \"utf-8\"\n    });\n  }\n  async getData() {\n    const {\n      encoding,\n      utf8\n    } = this;\n    const blob = await super.getData();\n    if (blob.text && utf8) {\n      return blob.text();\n    } else {\n      const reader = new FileReader();\n      return new Promise((resolve, reject) => {\n        Object.assign(reader, {\n          onload: _ref => {\n            let {\n              target\n            } = _ref;\n            return resolve(target.result);\n          },\n          onerror: () => reject(reader.error)\n        });\n        reader.readAsText(blob, encoding);\n      });\n    }\n  }\n}\nclass FetchReader extends Reader {\n  constructor(url, options) {\n    super();\n    createHttpReader(this, url, options);\n  }\n  async init() {\n    await initHttpReader(this, sendFetchRequest, getFetchRequestData);\n    super.init();\n  }\n  readUint8Array(index, length) {\n    return readUint8ArrayHttpReader(this, index, length, sendFetchRequest, getFetchRequestData);\n  }\n}\nclass XHRReader extends Reader {\n  constructor(url, options) {\n    super();\n    createHttpReader(this, url, options);\n  }\n  async init() {\n    await initHttpReader(this, sendXMLHttpRequest, getXMLHttpRequestData);\n    super.init();\n  }\n  readUint8Array(index, length) {\n    return readUint8ArrayHttpReader(this, index, length, sendXMLHttpRequest, getXMLHttpRequestData);\n  }\n}\nfunction createHttpReader(httpReader, url, options) {\n  const {\n    preventHeadRequest,\n    useRangeHeader,\n    forceRangeRequests,\n    combineSizeEocd\n  } = options;\n  options = Object.assign({}, options);\n  delete options.preventHeadRequest;\n  delete options.useRangeHeader;\n  delete options.forceRangeRequests;\n  delete options.combineSizeEocd;\n  delete options.useXHR;\n  Object.assign(httpReader, {\n    url,\n    options,\n    preventHeadRequest,\n    useRangeHeader,\n    forceRangeRequests,\n    combineSizeEocd\n  });\n}\nasync function initHttpReader(httpReader, sendRequest, getRequestData) {\n  const {\n    url,\n    preventHeadRequest,\n    useRangeHeader,\n    forceRangeRequests,\n    combineSizeEocd\n  } = httpReader;\n  if (isHttpFamily(url) && (useRangeHeader || forceRangeRequests) && (typeof preventHeadRequest == \"undefined\" || preventHeadRequest)) {\n    const response = await sendRequest(HTTP_METHOD_GET, httpReader, getRangeHeaders(httpReader, combineSizeEocd ? -END_OF_CENTRAL_DIR_LENGTH : undefined));\n    if (!forceRangeRequests && response.headers.get(HTTP_HEADER_ACCEPT_RANGES) != HTTP_RANGE_UNIT) {\n      throw new Error(ERR_HTTP_RANGE);\n    } else {\n      if (combineSizeEocd) {\n        httpReader.eocdCache = new Uint8Array(await response.arrayBuffer());\n      }\n      let contentSize;\n      const contentRangeHeader = response.headers.get(HTTP_HEADER_CONTENT_RANGE);\n      if (contentRangeHeader) {\n        const splitHeader = contentRangeHeader.trim().split(/\\s*\\/\\s*/);\n        if (splitHeader.length) {\n          const headerValue = splitHeader[1];\n          if (headerValue && headerValue != \"*\") {\n            contentSize = Number(headerValue);\n          }\n        }\n      }\n      if (contentSize === UNDEFINED_VALUE) {\n        await getContentLength(httpReader, sendRequest, getRequestData);\n      } else {\n        httpReader.size = contentSize;\n      }\n    }\n  } else {\n    await getContentLength(httpReader, sendRequest, getRequestData);\n  }\n}\nasync function readUint8ArrayHttpReader(httpReader, index, length, sendRequest, getRequestData) {\n  const {\n    useRangeHeader,\n    forceRangeRequests,\n    eocdCache,\n    size,\n    options\n  } = httpReader;\n  if (useRangeHeader || forceRangeRequests) {\n    if (eocdCache && index == size - END_OF_CENTRAL_DIR_LENGTH && length == END_OF_CENTRAL_DIR_LENGTH) {\n      return eocdCache;\n    }\n    const response = await sendRequest(HTTP_METHOD_GET, httpReader, getRangeHeaders(httpReader, index, length));\n    if (response.status != 206) {\n      throw new Error(ERR_HTTP_RANGE);\n    }\n    return new Uint8Array(await response.arrayBuffer());\n  } else {\n    const {\n      data\n    } = httpReader;\n    if (!data) {\n      await getRequestData(httpReader, options);\n    }\n    return new Uint8Array(httpReader.data.subarray(index, index + length));\n  }\n}\nfunction getRangeHeaders(httpReader) {\n  let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  return Object.assign({}, getHeaders(httpReader), {\n    [HTTP_HEADER_RANGE]: HTTP_RANGE_UNIT + \"=\" + (index < 0 ? index : index + \"-\" + (index + length - 1))\n  });\n}\nfunction getHeaders(_ref2) {\n  let {\n    options\n  } = _ref2;\n  const {\n    headers\n  } = options;\n  if (headers) {\n    if (Symbol.iterator in headers) {\n      return Object.fromEntries(headers);\n    } else {\n      return headers;\n    }\n  }\n}\nasync function getFetchRequestData(httpReader) {\n  await getRequestData(httpReader, sendFetchRequest);\n}\nasync function getXMLHttpRequestData(httpReader) {\n  await getRequestData(httpReader, sendXMLHttpRequest);\n}\nasync function getRequestData(httpReader, sendRequest) {\n  const response = await sendRequest(HTTP_METHOD_GET, httpReader, getHeaders(httpReader));\n  httpReader.data = new Uint8Array(await response.arrayBuffer());\n  if (!httpReader.size) {\n    httpReader.size = httpReader.data.length;\n  }\n}\nasync function getContentLength(httpReader, sendRequest, getRequestData) {\n  if (httpReader.preventHeadRequest) {\n    await getRequestData(httpReader, httpReader.options);\n  } else {\n    const response = await sendRequest(HTTP_METHOD_HEAD, httpReader, getHeaders(httpReader));\n    const contentLength = response.headers.get(HTTP_HEADER_CONTENT_LENGTH);\n    if (contentLength) {\n      httpReader.size = Number(contentLength);\n    } else {\n      await getRequestData(httpReader, httpReader.options);\n    }\n  }\n}\nasync function sendFetchRequest(method, _ref3, headers) {\n  let {\n    options,\n    url\n  } = _ref3;\n  const response = await fetch(url, Object.assign({}, options, {\n    method,\n    headers\n  }));\n  if (response.status < 400) {\n    return response;\n  } else {\n    throw response.status == 416 ? new Error(ERR_HTTP_RANGE) : new Error(ERR_HTTP_STATUS + (response.statusText || response.status));\n  }\n}\nfunction sendXMLHttpRequest(method, _ref4, headers) {\n  let {\n    url\n  } = _ref4;\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest();\n    request.addEventListener(\"load\", () => {\n      if (request.status < 400) {\n        const headers = [];\n        request.getAllResponseHeaders().trim().split(/[\\r\\n]+/).forEach(header => {\n          const splitHeader = header.trim().split(/\\s*:\\s*/);\n          splitHeader[0] = splitHeader[0].trim().replace(/^[a-z]|-[a-z]/g, value => value.toUpperCase());\n          headers.push(splitHeader);\n        });\n        resolve({\n          status: request.status,\n          arrayBuffer: () => request.response,\n          headers: new Map(headers)\n        });\n      } else {\n        reject(request.status == 416 ? new Error(ERR_HTTP_RANGE) : new Error(ERR_HTTP_STATUS + (request.statusText || request.status)));\n      }\n    }, false);\n    request.addEventListener(\"error\", event => reject(event.detail ? event.detail.error : new Error(\"Network error\")), false);\n    request.open(method, url);\n    if (headers) {\n      for (const entry of Object.entries(headers)) {\n        request.setRequestHeader(entry[0], entry[1]);\n      }\n    }\n    request.responseType = \"arraybuffer\";\n    request.send();\n  });\n}\nclass HttpReader extends Reader {\n  constructor(url) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super();\n    Object.assign(this, {\n      url,\n      reader: options.useXHR ? new XHRReader(url, options) : new FetchReader(url, options)\n    });\n  }\n  set size(value) {\n    // ignored\n  }\n  get size() {\n    return this.reader.size;\n  }\n  async init() {\n    await this.reader.init();\n    super.init();\n  }\n  readUint8Array(index, length) {\n    return this.reader.readUint8Array(index, length);\n  }\n}\nclass HttpRangeReader extends HttpReader {\n  constructor(url) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    options.useRangeHeader = true;\n    super(url, options);\n  }\n}\nclass Uint8ArrayReader extends Reader {\n  constructor(array) {\n    super();\n    Object.assign(this, {\n      array,\n      size: array.length\n    });\n  }\n  readUint8Array(index, length) {\n    return this.array.slice(index, index + length);\n  }\n}\nclass Uint8ArrayWriter extends Writer {\n  init() {\n    let initSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    Object.assign(this, {\n      offset: 0,\n      array: new Uint8Array(initSize)\n    });\n    super.init();\n  }\n  writeUint8Array(array) {\n    const writer = this;\n    if (writer.offset + array.length > writer.array.length) {\n      const previousArray = writer.array;\n      writer.array = new Uint8Array(previousArray.length + array.length);\n      writer.array.set(previousArray);\n    }\n    writer.array.set(array, writer.offset);\n    writer.offset += array.length;\n  }\n  getData() {\n    return this.array;\n  }\n}\nclass SplitDataReader extends Reader {\n  constructor(readers) {\n    super();\n    this.readers = readers;\n  }\n  async init() {\n    const reader = this;\n    const {\n      readers\n    } = reader;\n    reader.lastDiskNumber = 0;\n    reader.lastDiskOffset = 0;\n    await Promise.all(readers.map(async (diskReader, indexDiskReader) => {\n      await diskReader.init();\n      if (indexDiskReader != readers.length - 1) {\n        reader.lastDiskOffset += diskReader.size;\n      }\n      reader.size += diskReader.size;\n    }));\n    super.init();\n  }\n  async readUint8Array(offset, length) {\n    let diskNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const reader = this;\n    const {\n      readers\n    } = this;\n    let result;\n    let currentDiskNumber = diskNumber;\n    if (currentDiskNumber == -1) {\n      currentDiskNumber = readers.length - 1;\n    }\n    let currentReaderOffset = offset;\n    while (currentReaderOffset >= readers[currentDiskNumber].size) {\n      currentReaderOffset -= readers[currentDiskNumber].size;\n      currentDiskNumber++;\n    }\n    const currentReader = readers[currentDiskNumber];\n    const currentReaderSize = currentReader.size;\n    if (currentReaderOffset + length <= currentReaderSize) {\n      result = await readUint8Array(currentReader, currentReaderOffset, length);\n    } else {\n      const chunkLength = currentReaderSize - currentReaderOffset;\n      result = new Uint8Array(length);\n      result.set(await readUint8Array(currentReader, currentReaderOffset, chunkLength));\n      result.set(await reader.readUint8Array(offset + chunkLength, length - chunkLength, diskNumber), chunkLength);\n    }\n    reader.lastDiskNumber = Math.max(currentDiskNumber, reader.lastDiskNumber);\n    return result;\n  }\n}\nclass SplitDataWriter extends Stream {\n  constructor(writerGenerator) {\n    let maxSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4294967295;\n    super();\n    const writer = this;\n    Object.assign(writer, {\n      diskNumber: 0,\n      diskOffset: 0,\n      size: 0,\n      maxSize,\n      availableSize: maxSize\n    });\n    let diskSourceWriter, diskWritable, diskWriter;\n    const writable = new WritableStream({\n      async write(chunk) {\n        const {\n          availableSize\n        } = writer;\n        if (!diskWriter) {\n          const {\n            value,\n            done\n          } = await writerGenerator.next();\n          if (done && !value) {\n            throw new Error(ERR_ITERATOR_COMPLETED_TOO_SOON);\n          } else {\n            diskSourceWriter = value;\n            diskSourceWriter.size = 0;\n            if (diskSourceWriter.maxSize) {\n              writer.maxSize = diskSourceWriter.maxSize;\n            }\n            writer.availableSize = writer.maxSize;\n            await initStream(diskSourceWriter);\n            diskWritable = value.writable;\n            diskWriter = diskWritable.getWriter();\n          }\n          await this.write(chunk);\n        } else if (chunk.length >= availableSize) {\n          await writeChunk(chunk.slice(0, availableSize));\n          await closeDisk();\n          writer.diskOffset += diskSourceWriter.size;\n          writer.diskNumber++;\n          diskWriter = null;\n          await this.write(chunk.slice(availableSize));\n        } else {\n          await writeChunk(chunk);\n        }\n      },\n      async close() {\n        await diskWriter.ready;\n        await closeDisk();\n      }\n    });\n    Object.defineProperty(writer, PROPERTY_NAME_WRITABLE, {\n      get() {\n        return writable;\n      }\n    });\n    async function writeChunk(chunk) {\n      const chunkLength = chunk.length;\n      if (chunkLength) {\n        await diskWriter.ready;\n        await diskWriter.write(chunk);\n        diskSourceWriter.size += chunkLength;\n        writer.size += chunkLength;\n        writer.availableSize -= chunkLength;\n      }\n    }\n    async function closeDisk() {\n      diskWritable.size = diskSourceWriter.size;\n      await diskWriter.close();\n    }\n  }\n}\nfunction isHttpFamily(url) {\n  const {\n    baseURL\n  } = getConfiguration();\n  const {\n    protocol\n  } = new URL(url, baseURL);\n  return protocol == \"http:\" || protocol == \"https:\";\n}\nasync function initStream(stream, initSize) {\n  if (stream.init && !stream.initialized) {\n    await stream.init(initSize);\n  } else {\n    return Promise.resolve();\n  }\n}\nfunction initReader(reader) {\n  if (Array.isArray(reader)) {\n    reader = new SplitDataReader(reader);\n  }\n  if (reader instanceof ReadableStream) {\n    reader = {\n      readable: reader\n    };\n  }\n  return reader;\n}\nfunction initWriter(writer) {\n  if (writer.writable === UNDEFINED_VALUE && typeof writer.next == FUNCTION_TYPE) {\n    writer = new SplitDataWriter(writer);\n  }\n  if (writer instanceof WritableStream) {\n    writer = {\n      writable: writer\n    };\n  }\n  const {\n    writable\n  } = writer;\n  if (writable.size === UNDEFINED_VALUE) {\n    writable.size = 0;\n  }\n  if (!(writer instanceof SplitDataWriter)) {\n    Object.assign(writer, {\n      diskNumber: 0,\n      diskOffset: 0,\n      availableSize: Infinity,\n      maxSize: Infinity\n    });\n  }\n  return writer;\n}\nfunction readUint8Array(reader, offset, size, diskNumber) {\n  return reader.readUint8Array(offset, size, diskNumber);\n}\nconst SplitZipReader = SplitDataReader;\nconst SplitZipWriter = SplitDataWriter;\nexport { initStream, initReader, initWriter, readUint8Array, Reader, Writer, TextReader, TextWriter, Data64URIReader, Data64URIWriter, BlobReader, BlobWriter, Uint8ArrayReader, Uint8ArrayWriter, HttpReader, HttpRangeReader, SplitZipReader, SplitZipWriter, SplitDataReader, SplitDataWriter, ERR_HTTP_RANGE, ERR_ITERATOR_COMPLETED_TOO_SOON };","map":{"version":3,"names":["UNDEFINED_VALUE","FUNCTION_TYPE","END_OF_CENTRAL_DIR_LENGTH","getConfiguration","ERR_HTTP_STATUS","ERR_HTTP_RANGE","ERR_ITERATOR_COMPLETED_TOO_SOON","CONTENT_TYPE_TEXT_PLAIN","HTTP_HEADER_CONTENT_LENGTH","HTTP_HEADER_CONTENT_RANGE","HTTP_HEADER_ACCEPT_RANGES","HTTP_HEADER_RANGE","HTTP_HEADER_CONTENT_TYPE","HTTP_METHOD_HEAD","HTTP_METHOD_GET","HTTP_RANGE_UNIT","DEFAULT_CHUNK_SIZE","PROPERTY_NAME_WRITABLE","Stream","constructor","size","init","initialized","Reader","readable","reader","chunkSize","ReadableStream","start","chunkOffset","pull","controller","offset","diskNumberStart","enqueue","readUint8Array","Math","min","close","Writer","writer","writable","WritableStream","write","chunk","writeUint8Array","Object","defineProperty","get","Data64URIReader","dataURI","dataEnd","length","charAt","dataStart","indexOf","assign","floor","dataArray","Uint8Array","bytes","atob","substring","ceil","delta","indexByte","charCodeAt","Data64URIWriter","contentType","data","pending","array","indexArray","dataString","String","fromCharCode","btoa","getData","BlobReader","blob","offsetEnd","slice","arrayBuffer","byteLength","BlobWriter","transformStream","TransformStream","headers","push","Response","TextReader","text","Blob","type","TextWriter","encoding","utf8","toLowerCase","FileReader","Promise","resolve","reject","onload","_ref","target","result","onerror","error","readAsText","FetchReader","url","options","createHttpReader","initHttpReader","sendFetchRequest","getFetchRequestData","index","readUint8ArrayHttpReader","XHRReader","sendXMLHttpRequest","getXMLHttpRequestData","httpReader","preventHeadRequest","useRangeHeader","forceRangeRequests","combineSizeEocd","useXHR","sendRequest","getRequestData","isHttpFamily","response","getRangeHeaders","undefined","Error","eocdCache","contentSize","contentRangeHeader","splitHeader","trim","split","headerValue","Number","getContentLength","status","subarray","arguments","getHeaders","_ref2","Symbol","iterator","fromEntries","contentLength","method","_ref3","fetch","statusText","_ref4","request","XMLHttpRequest","addEventListener","getAllResponseHeaders","forEach","header","replace","value","toUpperCase","Map","event","detail","open","entry","entries","setRequestHeader","responseType","send","HttpReader","HttpRangeReader","Uint8ArrayReader","Uint8ArrayWriter","initSize","previousArray","set","SplitDataReader","readers","lastDiskNumber","lastDiskOffset","all","map","diskReader","indexDiskReader","diskNumber","currentDiskNumber","currentReaderOffset","currentReader","currentReaderSize","chunkLength","max","SplitDataWriter","writerGenerator","maxSize","diskOffset","availableSize","diskSourceWriter","diskWritable","diskWriter","done","next","initStream","getWriter","writeChunk","closeDisk","ready","baseURL","protocol","URL","stream","initReader","Array","isArray","initWriter","Infinity","SplitZipReader","SplitZipWriter"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/node_modules/@zip.js/zip.js/lib/core/io.js"],"sourcesContent":["/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global Blob, atob, btoa, XMLHttpRequest, URL, fetch, ReadableStream, WritableStream, FileReader, TransformStream, Response */\n// deno-lint-ignore-file no-this-alias\n\nimport {\n\tUNDEFINED_VALUE,\n\tFUNCTION_TYPE,\n\tEND_OF_CENTRAL_DIR_LENGTH\n} from \"./constants.js\";\nimport { getConfiguration } from \"./configuration.js\";\n\nconst ERR_HTTP_STATUS = \"HTTP error \";\nconst ERR_HTTP_RANGE = \"HTTP Range not supported\";\nconst ERR_ITERATOR_COMPLETED_TOO_SOON = \"Writer iterator completed too soon\";\n\nconst CONTENT_TYPE_TEXT_PLAIN = \"text/plain\";\nconst HTTP_HEADER_CONTENT_LENGTH = \"Content-Length\";\nconst HTTP_HEADER_CONTENT_RANGE = \"Content-Range\";\nconst HTTP_HEADER_ACCEPT_RANGES = \"Accept-Ranges\";\nconst HTTP_HEADER_RANGE = \"Range\";\nconst HTTP_HEADER_CONTENT_TYPE = \"Content-Type\";\nconst HTTP_METHOD_HEAD = \"HEAD\";\nconst HTTP_METHOD_GET = \"GET\";\nconst HTTP_RANGE_UNIT = \"bytes\";\nconst DEFAULT_CHUNK_SIZE = 64 * 1024;\n\nconst PROPERTY_NAME_WRITABLE = \"writable\";\n\nclass Stream {\n\n\tconstructor() {\n\t\tthis.size = 0;\n\t}\n\n\tinit() {\n\t\tthis.initialized = true;\n\t}\n}\n\nclass Reader extends Stream {\n\n\tget readable() {\n\t\tconst reader = this;\n\t\tconst { chunkSize = DEFAULT_CHUNK_SIZE } = reader;\n\t\tconst readable = new ReadableStream({\n\t\t\tstart() {\n\t\t\t\tthis.chunkOffset = 0;\n\t\t\t},\n\t\t\tasync pull(controller) {\n\t\t\t\tconst { offset = 0, size, diskNumberStart } = readable;\n\t\t\t\tconst { chunkOffset } = this;\n\t\t\t\tcontroller.enqueue(await readUint8Array(reader, offset + chunkOffset, Math.min(chunkSize, size - chunkOffset), diskNumberStart));\n\t\t\t\tif (chunkOffset + chunkSize > size) {\n\t\t\t\t\tcontroller.close();\n\t\t\t\t} else {\n\t\t\t\t\tthis.chunkOffset += chunkSize;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn readable;\n\t}\n}\n\nclass Writer extends Stream {\n\n\tconstructor() {\n\t\tsuper();\n\t\tconst writer = this;\n\t\tconst writable = new WritableStream({\n\t\t\twrite(chunk) {\n\t\t\t\treturn writer.writeUint8Array(chunk);\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(writer, PROPERTY_NAME_WRITABLE, {\n\t\t\tget() {\n\t\t\t\treturn writable;\n\t\t\t}\n\t\t});\n\t}\n\n\twriteUint8Array() {\n\t\t// abstract\n\t}\n}\n\nclass Data64URIReader extends Reader {\n\n\tconstructor(dataURI) {\n\t\tsuper();\n\t\tlet dataEnd = dataURI.length;\n\t\twhile (dataURI.charAt(dataEnd - 1) == \"=\") {\n\t\t\tdataEnd--;\n\t\t}\n\t\tconst dataStart = dataURI.indexOf(\",\") + 1;\n\t\tObject.assign(this, {\n\t\t\tdataURI,\n\t\t\tdataStart,\n\t\t\tsize: Math.floor((dataEnd - dataStart) * 0.75)\n\t\t});\n\t}\n\n\treadUint8Array(offset, length) {\n\t\tconst {\n\t\t\tdataStart,\n\t\t\tdataURI\n\t\t} = this;\n\t\tconst dataArray = new Uint8Array(length);\n\t\tconst start = Math.floor(offset / 3) * 4;\n\t\tconst bytes = atob(dataURI.substring(start + dataStart, Math.ceil((offset + length) / 3) * 4 + dataStart));\n\t\tconst delta = offset - Math.floor(start / 4) * 3;\n\t\tfor (let indexByte = delta; indexByte < delta + length; indexByte++) {\n\t\t\tdataArray[indexByte - delta] = bytes.charCodeAt(indexByte);\n\t\t}\n\t\treturn dataArray;\n\t}\n}\n\nclass Data64URIWriter extends Writer {\n\n\tconstructor(contentType) {\n\t\tsuper();\n\t\tObject.assign(this, {\n\t\t\tdata: \"data:\" + (contentType || \"\") + \";base64,\",\n\t\t\tpending: []\n\t\t});\n\t}\n\n\twriteUint8Array(array) {\n\t\tconst writer = this;\n\t\tlet indexArray = 0;\n\t\tlet dataString = writer.pending;\n\t\tconst delta = writer.pending.length;\n\t\twriter.pending = \"\";\n\t\tfor (indexArray = 0; indexArray < (Math.floor((delta + array.length) / 3) * 3) - delta; indexArray++) {\n\t\t\tdataString += String.fromCharCode(array[indexArray]);\n\t\t}\n\t\tfor (; indexArray < array.length; indexArray++) {\n\t\t\twriter.pending += String.fromCharCode(array[indexArray]);\n\t\t}\n\t\tif (dataString.length > 2) {\n\t\t\twriter.data += btoa(dataString);\n\t\t} else {\n\t\t\twriter.pending = dataString;\n\t\t}\n\t}\n\n\tgetData() {\n\t\treturn this.data + btoa(this.pending);\n\t}\n}\n\nclass BlobReader extends Reader {\n\n\tconstructor(blob) {\n\t\tsuper();\n\t\tObject.assign(this, {\n\t\t\tblob,\n\t\t\tsize: blob.size\n\t\t});\n\t}\n\n\tasync readUint8Array(offset, length) {\n\t\tconst reader = this;\n\t\tconst offsetEnd = offset + length;\n\t\tconst blob = offset || offsetEnd < reader.size ? reader.blob.slice(offset, offsetEnd) : reader.blob;\n\t\tlet arrayBuffer = await blob.arrayBuffer();\n\t\tif (arrayBuffer.byteLength > length) {\n\t\t\tarrayBuffer = arrayBuffer.slice(offset, offsetEnd);\n\t\t}\n\t\treturn new Uint8Array(arrayBuffer);\n\t}\n}\n\nclass BlobWriter extends Stream {\n\n\tconstructor(contentType) {\n\t\tsuper();\n\t\tconst writer = this;\n\t\tconst transformStream = new TransformStream();\n\t\tconst headers = [];\n\t\tif (contentType) {\n\t\t\theaders.push([HTTP_HEADER_CONTENT_TYPE, contentType]);\n\t\t}\n\t\tObject.defineProperty(writer, PROPERTY_NAME_WRITABLE, {\n\t\t\tget() {\n\t\t\t\treturn transformStream.writable;\n\t\t\t}\n\t\t});\n\t\twriter.blob = new Response(transformStream.readable, { headers }).blob();\n\t}\n\n\tgetData() {\n\t\treturn this.blob;\n\t}\n}\n\nclass TextReader extends BlobReader {\n\n\tconstructor(text) {\n\t\tsuper(new Blob([text], { type: CONTENT_TYPE_TEXT_PLAIN }));\n\t}\n}\n\nclass TextWriter extends BlobWriter {\n\n\tconstructor(encoding) {\n\t\tsuper(encoding);\n\t\tObject.assign(this, {\n\t\t\tencoding,\n\t\t\tutf8: !encoding || encoding.toLowerCase() == \"utf-8\"\n\t\t});\n\t}\n\n\tasync getData() {\n\t\tconst {\n\t\t\tencoding,\n\t\t\tutf8\n\t\t} = this;\n\t\tconst blob = await super.getData();\n\t\tif (blob.text && utf8) {\n\t\t\treturn blob.text();\n\t\t} else {\n\t\t\tconst reader = new FileReader();\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tObject.assign(reader, {\n\t\t\t\t\tonload: ({ target }) => resolve(target.result),\n\t\t\t\t\tonerror: () => reject(reader.error)\n\t\t\t\t});\n\t\t\t\treader.readAsText(blob, encoding);\n\t\t\t});\n\t\t}\n\t}\n}\n\nclass FetchReader extends Reader {\n\n\tconstructor(url, options) {\n\t\tsuper();\n\t\tcreateHttpReader(this, url, options);\n\t}\n\n\tasync init() {\n\t\tawait initHttpReader(this, sendFetchRequest, getFetchRequestData);\n\t\tsuper.init();\n\t}\n\n\treadUint8Array(index, length) {\n\t\treturn readUint8ArrayHttpReader(this, index, length, sendFetchRequest, getFetchRequestData);\n\t}\n}\n\nclass XHRReader extends Reader {\n\n\tconstructor(url, options) {\n\t\tsuper();\n\t\tcreateHttpReader(this, url, options);\n\t}\n\n\tasync init() {\n\t\tawait initHttpReader(this, sendXMLHttpRequest, getXMLHttpRequestData);\n\t\tsuper.init();\n\t}\n\n\treadUint8Array(index, length) {\n\t\treturn readUint8ArrayHttpReader(this, index, length, sendXMLHttpRequest, getXMLHttpRequestData);\n\t}\n}\n\nfunction createHttpReader(httpReader, url, options) {\n\tconst {\n\t\tpreventHeadRequest,\n\t\tuseRangeHeader,\n\t\tforceRangeRequests,\n\t\tcombineSizeEocd\n\t} = options;\n\toptions = Object.assign({}, options);\n\tdelete options.preventHeadRequest;\n\tdelete options.useRangeHeader;\n\tdelete options.forceRangeRequests;\n\tdelete options.combineSizeEocd;\n\tdelete options.useXHR;\n\tObject.assign(httpReader, {\n\t\turl,\n\t\toptions,\n\t\tpreventHeadRequest,\n\t\tuseRangeHeader,\n\t\tforceRangeRequests,\n\t\tcombineSizeEocd\n\t});\n}\n\nasync function initHttpReader(httpReader, sendRequest, getRequestData) {\n\tconst {\n\t\turl,\n\t\tpreventHeadRequest,\n\t\tuseRangeHeader,\n\t\tforceRangeRequests,\n\t\tcombineSizeEocd\n\t} = httpReader;\n\tif (isHttpFamily(url) && (useRangeHeader || forceRangeRequests) && (typeof preventHeadRequest == \"undefined\" || preventHeadRequest)) {\n\t\tconst response = await sendRequest(HTTP_METHOD_GET, httpReader, getRangeHeaders(httpReader, combineSizeEocd ? -END_OF_CENTRAL_DIR_LENGTH : undefined));\n\t\tif (!forceRangeRequests && response.headers.get(HTTP_HEADER_ACCEPT_RANGES) != HTTP_RANGE_UNIT) {\n\t\t\tthrow new Error(ERR_HTTP_RANGE);\n\t\t} else {\n\t\t\tif (combineSizeEocd) {\n\t\t\t\thttpReader.eocdCache = new Uint8Array(await response.arrayBuffer());\n\t\t\t}\n\t\t\tlet contentSize;\n\t\t\tconst contentRangeHeader = response.headers.get(HTTP_HEADER_CONTENT_RANGE);\n\t\t\tif (contentRangeHeader) {\n\t\t\t\tconst splitHeader = contentRangeHeader.trim().split(/\\s*\\/\\s*/);\n\t\t\t\tif (splitHeader.length) {\n\t\t\t\t\tconst headerValue = splitHeader[1];\n\t\t\t\t\tif (headerValue && headerValue != \"*\") {\n\t\t\t\t\t\tcontentSize = Number(headerValue);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (contentSize === UNDEFINED_VALUE) {\n\t\t\t\tawait getContentLength(httpReader, sendRequest, getRequestData);\n\t\t\t} else {\n\t\t\t\thttpReader.size = contentSize;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tawait getContentLength(httpReader, sendRequest, getRequestData);\n\t}\n}\n\nasync function readUint8ArrayHttpReader(httpReader, index, length, sendRequest, getRequestData) {\n\tconst {\n\t\tuseRangeHeader,\n\t\tforceRangeRequests,\n\t\teocdCache,\n\t\tsize,\n\t\toptions\n\t} = httpReader;\n\tif (useRangeHeader || forceRangeRequests) {\n\t\tif (eocdCache && index == size - END_OF_CENTRAL_DIR_LENGTH && length == END_OF_CENTRAL_DIR_LENGTH) {\n\t\t\treturn eocdCache;\n\t\t}\n\t\tconst response = await sendRequest(HTTP_METHOD_GET, httpReader, getRangeHeaders(httpReader, index, length));\n\t\tif (response.status != 206) {\n\t\t\tthrow new Error(ERR_HTTP_RANGE);\n\t\t}\n\t\treturn new Uint8Array(await response.arrayBuffer());\n\t} else {\n\t\tconst { data } = httpReader;\n\t\tif (!data) {\n\t\t\tawait getRequestData(httpReader, options);\n\t\t}\n\t\treturn new Uint8Array(httpReader.data.subarray(index, index + length));\n\t}\n}\n\nfunction getRangeHeaders(httpReader, index = 0, length = 1) {\n\treturn Object.assign({}, getHeaders(httpReader), { [HTTP_HEADER_RANGE]: HTTP_RANGE_UNIT + \"=\" + (index < 0 ? index : index + \"-\" + (index + length - 1)) });\n}\n\nfunction getHeaders({ options }) {\n\tconst { headers } = options;\n\tif (headers) {\n\t\tif (Symbol.iterator in headers) {\n\t\t\treturn Object.fromEntries(headers);\n\t\t} else {\n\t\t\treturn headers;\n\t\t}\n\t}\n}\n\nasync function getFetchRequestData(httpReader) {\n\tawait getRequestData(httpReader, sendFetchRequest);\n}\n\nasync function getXMLHttpRequestData(httpReader) {\n\tawait getRequestData(httpReader, sendXMLHttpRequest);\n}\n\nasync function getRequestData(httpReader, sendRequest) {\n\tconst response = await sendRequest(HTTP_METHOD_GET, httpReader, getHeaders(httpReader));\n\thttpReader.data = new Uint8Array(await response.arrayBuffer());\n\tif (!httpReader.size) {\n\t\thttpReader.size = httpReader.data.length;\n\t}\n}\n\nasync function getContentLength(httpReader, sendRequest, getRequestData) {\n\tif (httpReader.preventHeadRequest) {\n\t\tawait getRequestData(httpReader, httpReader.options);\n\t} else {\n\t\tconst response = await sendRequest(HTTP_METHOD_HEAD, httpReader, getHeaders(httpReader));\n\t\tconst contentLength = response.headers.get(HTTP_HEADER_CONTENT_LENGTH);\n\t\tif (contentLength) {\n\t\t\thttpReader.size = Number(contentLength);\n\t\t} else {\n\t\t\tawait getRequestData(httpReader, httpReader.options);\n\t\t}\n\t}\n}\n\nasync function sendFetchRequest(method, { options, url }, headers) {\n\tconst response = await fetch(url, Object.assign({}, options, { method, headers }));\n\tif (response.status < 400) {\n\t\treturn response;\n\t} else {\n\t\tthrow response.status == 416 ? new Error(ERR_HTTP_RANGE) : new Error(ERR_HTTP_STATUS + (response.statusText || response.status));\n\t}\n}\n\nfunction sendXMLHttpRequest(method, { url }, headers) {\n\treturn new Promise((resolve, reject) => {\n\t\tconst request = new XMLHttpRequest();\n\t\trequest.addEventListener(\"load\", () => {\n\t\t\tif (request.status < 400) {\n\t\t\t\tconst headers = [];\n\t\t\t\trequest.getAllResponseHeaders().trim().split(/[\\r\\n]+/).forEach(header => {\n\t\t\t\t\tconst splitHeader = header.trim().split(/\\s*:\\s*/);\n\t\t\t\t\tsplitHeader[0] = splitHeader[0].trim().replace(/^[a-z]|-[a-z]/g, value => value.toUpperCase());\n\t\t\t\t\theaders.push(splitHeader);\n\t\t\t\t});\n\t\t\t\tresolve({\n\t\t\t\t\tstatus: request.status,\n\t\t\t\t\tarrayBuffer: () => request.response,\n\t\t\t\t\theaders: new Map(headers)\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treject(request.status == 416 ? new Error(ERR_HTTP_RANGE) : new Error(ERR_HTTP_STATUS + (request.statusText || request.status)));\n\t\t\t}\n\t\t}, false);\n\t\trequest.addEventListener(\"error\", event => reject(event.detail ? event.detail.error : new Error(\"Network error\")), false);\n\t\trequest.open(method, url);\n\t\tif (headers) {\n\t\t\tfor (const entry of Object.entries(headers)) {\n\t\t\t\trequest.setRequestHeader(entry[0], entry[1]);\n\t\t\t}\n\t\t}\n\t\trequest.responseType = \"arraybuffer\";\n\t\trequest.send();\n\t});\n}\n\nclass HttpReader extends Reader {\n\n\tconstructor(url, options = {}) {\n\t\tsuper();\n\t\tObject.assign(this, {\n\t\t\turl,\n\t\t\treader: options.useXHR ? new XHRReader(url, options) : new FetchReader(url, options)\n\t\t});\n\t}\n\n\tset size(value) {\n\t\t// ignored\n\t}\n\n\tget size() {\n\t\treturn this.reader.size;\n\t}\n\n\tasync init() {\n\t\tawait this.reader.init();\n\t\tsuper.init();\n\t}\n\n\treadUint8Array(index, length) {\n\t\treturn this.reader.readUint8Array(index, length);\n\t}\n}\n\nclass HttpRangeReader extends HttpReader {\n\n\tconstructor(url, options = {}) {\n\t\toptions.useRangeHeader = true;\n\t\tsuper(url, options);\n\t}\n}\n\n\nclass Uint8ArrayReader extends Reader {\n\n\tconstructor(array) {\n\t\tsuper();\n\t\tObject.assign(this, {\n\t\t\tarray,\n\t\t\tsize: array.length\n\t\t});\n\t}\n\n\treadUint8Array(index, length) {\n\t\treturn this.array.slice(index, index + length);\n\t}\n}\n\nclass Uint8ArrayWriter extends Writer {\n\n\tinit(initSize = 0) {\n\t\tObject.assign(this, {\n\t\t\toffset: 0,\n\t\t\tarray: new Uint8Array(initSize)\n\t\t});\n\t\tsuper.init();\n\t}\n\n\twriteUint8Array(array) {\n\t\tconst writer = this;\n\t\tif (writer.offset + array.length > writer.array.length) {\n\t\t\tconst previousArray = writer.array;\n\t\t\twriter.array = new Uint8Array(previousArray.length + array.length);\n\t\t\twriter.array.set(previousArray);\n\t\t}\n\t\twriter.array.set(array, writer.offset);\n\t\twriter.offset += array.length;\n\t}\n\n\tgetData() {\n\t\treturn this.array;\n\t}\n}\n\nclass SplitDataReader extends Reader {\n\n\tconstructor(readers) {\n\t\tsuper();\n\t\tthis.readers = readers;\n\t}\n\n\tasync init() {\n\t\tconst reader = this;\n\t\tconst { readers } = reader;\n\t\treader.lastDiskNumber = 0;\n\t\treader.lastDiskOffset = 0;\n\t\tawait Promise.all(readers.map(async (diskReader, indexDiskReader) => {\n\t\t\tawait diskReader.init();\n\t\t\tif (indexDiskReader != readers.length - 1) {\n\t\t\t\treader.lastDiskOffset += diskReader.size;\n\t\t\t}\n\t\t\treader.size += diskReader.size;\n\t\t}));\n\t\tsuper.init();\n\t}\n\n\tasync readUint8Array(offset, length, diskNumber = 0) {\n\t\tconst reader = this;\n\t\tconst { readers } = this;\n\t\tlet result;\n\t\tlet currentDiskNumber = diskNumber;\n\t\tif (currentDiskNumber == -1) {\n\t\t\tcurrentDiskNumber = readers.length - 1;\n\t\t}\n\t\tlet currentReaderOffset = offset;\n\t\twhile (currentReaderOffset >= readers[currentDiskNumber].size) {\n\t\t\tcurrentReaderOffset -= readers[currentDiskNumber].size;\n\t\t\tcurrentDiskNumber++;\n\t\t}\n\t\tconst currentReader = readers[currentDiskNumber];\n\t\tconst currentReaderSize = currentReader.size;\n\t\tif (currentReaderOffset + length <= currentReaderSize) {\n\t\t\tresult = await readUint8Array(currentReader, currentReaderOffset, length);\n\t\t} else {\n\t\t\tconst chunkLength = currentReaderSize - currentReaderOffset;\n\t\t\tresult = new Uint8Array(length);\n\t\t\tresult.set(await readUint8Array(currentReader, currentReaderOffset, chunkLength));\n\t\t\tresult.set(await reader.readUint8Array(offset + chunkLength, length - chunkLength, diskNumber), chunkLength);\n\t\t}\n\t\treader.lastDiskNumber = Math.max(currentDiskNumber, reader.lastDiskNumber);\n\t\treturn result;\n\t}\n}\n\nclass SplitDataWriter extends Stream {\n\n\tconstructor(writerGenerator, maxSize = 4294967295) {\n\t\tsuper();\n\t\tconst writer = this;\n\t\tObject.assign(writer, {\n\t\t\tdiskNumber: 0,\n\t\t\tdiskOffset: 0,\n\t\t\tsize: 0,\n\t\t\tmaxSize,\n\t\t\tavailableSize: maxSize\n\t\t});\n\t\tlet diskSourceWriter, diskWritable, diskWriter;\n\t\tconst writable = new WritableStream({\n\t\t\tasync write(chunk) {\n\t\t\t\tconst { availableSize } = writer;\n\t\t\t\tif (!diskWriter) {\n\t\t\t\t\tconst { value, done } = await writerGenerator.next();\n\t\t\t\t\tif (done && !value) {\n\t\t\t\t\t\tthrow new Error(ERR_ITERATOR_COMPLETED_TOO_SOON);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdiskSourceWriter = value;\n\t\t\t\t\t\tdiskSourceWriter.size = 0;\n\t\t\t\t\t\tif (diskSourceWriter.maxSize) {\n\t\t\t\t\t\t\twriter.maxSize = diskSourceWriter.maxSize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\twriter.availableSize = writer.maxSize;\n\t\t\t\t\t\tawait initStream(diskSourceWriter);\n\t\t\t\t\t\tdiskWritable = value.writable;\n\t\t\t\t\t\tdiskWriter = diskWritable.getWriter();\n\t\t\t\t\t}\n\t\t\t\t\tawait this.write(chunk);\n\t\t\t\t} else if (chunk.length >= availableSize) {\n\t\t\t\t\tawait writeChunk(chunk.slice(0, availableSize));\n\t\t\t\t\tawait closeDisk();\n\t\t\t\t\twriter.diskOffset += diskSourceWriter.size;\n\t\t\t\t\twriter.diskNumber++;\n\t\t\t\t\tdiskWriter = null;\n\t\t\t\t\tawait this.write(chunk.slice(availableSize));\n\t\t\t\t} else {\n\t\t\t\t\tawait writeChunk(chunk);\n\t\t\t\t}\n\t\t\t},\n\t\t\tasync close() {\n\t\t\t\tawait diskWriter.ready;\n\t\t\t\tawait closeDisk();\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(writer, PROPERTY_NAME_WRITABLE, {\n\t\t\tget() {\n\t\t\t\treturn writable;\n\t\t\t}\n\t\t});\n\n\t\tasync function writeChunk(chunk) {\n\t\t\tconst chunkLength = chunk.length;\n\t\t\tif (chunkLength) {\n\t\t\t\tawait diskWriter.ready;\n\t\t\t\tawait diskWriter.write(chunk);\n\t\t\t\tdiskSourceWriter.size += chunkLength;\n\t\t\t\twriter.size += chunkLength;\n\t\t\t\twriter.availableSize -= chunkLength;\n\t\t\t}\n\t\t}\n\n\t\tasync function closeDisk() {\n\t\t\tdiskWritable.size = diskSourceWriter.size;\n\t\t\tawait diskWriter.close();\n\t\t}\n\t}\n}\n\nfunction isHttpFamily(url) {\n\tconst { baseURL } = getConfiguration();\n\tconst { protocol } = new URL(url, baseURL);\n\treturn protocol == \"http:\" || protocol == \"https:\";\n}\n\nasync function initStream(stream, initSize) {\n\tif (stream.init && !stream.initialized) {\n\t\tawait stream.init(initSize);\n\t} else {\n\t\treturn Promise.resolve();\n\t}\n}\n\nfunction initReader(reader) {\n\tif (Array.isArray(reader)) {\n\t\treader = new SplitDataReader(reader);\n\t}\n\tif (reader instanceof ReadableStream) {\n\t\treader = {\n\t\t\treadable: reader\n\t\t};\n\t}\n\treturn reader;\n}\n\nfunction initWriter(writer) {\n\tif (writer.writable === UNDEFINED_VALUE && typeof writer.next == FUNCTION_TYPE) {\n\t\twriter = new SplitDataWriter(writer);\n\t}\n\tif (writer instanceof WritableStream) {\n\t\twriter = {\n\t\t\twritable: writer\n\t\t};\n\t}\n\tconst { writable } = writer;\n\tif (writable.size === UNDEFINED_VALUE) {\n\t\twritable.size = 0;\n\t}\n\tif (!(writer instanceof SplitDataWriter)) {\n\t\tObject.assign(writer, {\n\t\t\tdiskNumber: 0,\n\t\t\tdiskOffset: 0,\n\t\t\tavailableSize: Infinity,\n\t\t\tmaxSize: Infinity\n\t\t});\n\t}\n\treturn writer;\n}\n\nfunction readUint8Array(reader, offset, size, diskNumber) {\n\treturn reader.readUint8Array(offset, size, diskNumber);\n}\n\nconst SplitZipReader = SplitDataReader;\nconst SplitZipWriter = SplitDataWriter;\n\nexport {\n\tinitStream,\n\tinitReader,\n\tinitWriter,\n\treadUint8Array,\n\tReader,\n\tWriter,\n\tTextReader,\n\tTextWriter,\n\tData64URIReader,\n\tData64URIWriter,\n\tBlobReader,\n\tBlobWriter,\n\tUint8ArrayReader,\n\tUint8ArrayWriter,\n\tHttpReader,\n\tHttpRangeReader,\n\tSplitZipReader,\n\tSplitZipWriter,\n\tSplitDataReader,\n\tSplitDataWriter,\n\tERR_HTTP_RANGE,\n\tERR_ITERATOR_COMPLETED_TOO_SOON\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}