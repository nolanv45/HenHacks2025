{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport { estimateNumberArrayMemory as t } from \"../../../../core/memoryEstimations.js\";\nimport { newFloatArray as e, floatSubArray as i } from \"../../../../geometry/support/FloatArray.js\";\nimport { newIntArray as s, compactIndices as r } from \"../../../../geometry/support/Indices.js\";\nclass o {\n  constructor(t, r, o, h, p, n = {}) {\n    this.path = t, this.profile = r, this.extruder = o, this.startCap = h, this.endCap = p, this.options = n, this._extrusionVertexCount = 0;\n    const l = this.path.vertices.length - 2;\n    this.numExtrusionProfiles = o.numProfilesPerJoin() * l + 2, this.numVerticesTotal = r.vertices.length * this.numExtrusionProfiles, this.startCap.vertexBufferStart = this.numVerticesTotal;\n    const a = this.startCap.numVertices;\n    this.numVerticesTotal += a, this.endCap.vertexBufferStart = this.numVerticesTotal;\n    const u = this.endCap.numVertices;\n    this.numVerticesTotal += u, this.pathVertexData = s(1 * this.numVerticesTotal), this.profileRightAxes = e(4 * this.numVerticesTotal), this.profileUpAxes = e(4 * this.numVerticesTotal), this.profileVertexAndNormals = e(4 * this.numVerticesTotal), this.positions = i(t.positions, t.offset, 3 * t.vertices.length), this._rebuildGeometry(), this.buildTopology();\n  }\n  get usedMemory() {\n    return t(this.pathVertexData, this.profileRightAxes, this.profileUpAxes, this.profileVertexAndNormals) + this.path.usedMemory + this.profile.usedMemory;\n  }\n  emitVertex(t, e, i, s, r) {\n    const o = 4 * this._extrusionVertexCount;\n    if (this.profileRightAxes[o] = e.right[0], this.profileRightAxes[o + 1] = e.right[1], this.profileRightAxes[o + 2] = e.right[2], this.profileUpAxes[o] = e.up[0], this.profileUpAxes[o + 1] = e.up[1], this.profileUpAxes[o + 2] = e.up[2], this.profileVertexAndNormals[o] = i[0], this.profileVertexAndNormals[o + 1] = i[1], this.profileVertexAndNormals[o + 2] = s[0], this.profileVertexAndNormals[o + 3] = s[1], this.pathVertexData[this._extrusionVertexCount] = t, r) {\n      const e = this.path.vertices[t],\n        i = e.maxStretchDistance;\n      this.profileRightAxes[o + 3] = e.rotationRight[0] * i, this.profileUpAxes[o + 3] = e.rotationRight[1] * i;\n    } else this.profileRightAxes[o + 3] = 0, this.profileUpAxes[o + 3] = 0;\n    ++this._extrusionVertexCount;\n  }\n  emitCapVertex(t, e, i, s, r, o) {\n    const h = 4 * this._extrusionVertexCount;\n    this.profileRightAxes[h] = e.right[0], this.profileRightAxes[h + 1] = e.right[1], this.profileRightAxes[h + 2] = e.right[2], this.profileRightAxes[h + 3] = r, this.profileUpAxes[h] = e.up[0], this.profileUpAxes[h + 1] = e.up[1], this.profileUpAxes[h + 2] = e.up[2], this.profileUpAxes[h + 3] = o, this.profileVertexAndNormals[h] = i[0], this.profileVertexAndNormals[h + 1] = i[1], this.profileVertexAndNormals[h + 2] = s[0], this.profileVertexAndNormals[h + 3] = s[1], this.pathVertexData[this._extrusionVertexCount] = t, ++this._extrusionVertexCount;\n  }\n  _rebuildGeometry() {\n    this._extrusionVertexCount = 0;\n    const {\n      positions: t,\n      offset: e,\n      vertices: s\n    } = this.path;\n    this.positions = i(t, e, 3 * s.length);\n    let r = 0;\n    const o = (t, e, i, s, o) => this.emitCapVertex(r, t, e, i, s, o),\n      h = (t, e, i, s) => this.emitVertex(r, t, e, i, s);\n    for (this.startCap.rebuildConnectingProfileGeometry(s[r], this.profile, o), r = 1; r < s.length - 1; ++r) this.extruder.extrude(s[r], this.profile, h);\n    this.endCap.rebuildConnectingProfileGeometry(s[r], this.profile, o), r = 0, this.startCap.rebuildCapGeometry(s[r], o), r = s.length - 1, this.endCap.rebuildCapGeometry(s[r], o);\n  }\n  buildTopology() {\n    const t = this.profile.vertices.length,\n      e = this.profile.numSegments,\n      i = this.numExtrusionProfiles - 1;\n    let s = 3 * (2 * (e * i));\n    this.startCap.indexBufferStart = s, this.startCap.firstProfileVertexIndex = 0, s += this.startCap.numIndices, this.endCap.indexBufferStart = s, this.endCap.firstProfileVertexIndex = t * (this.numExtrusionProfiles - 1);\n    const o = new Array(),\n      h = new Array(),\n      p = new Array(),\n      n = (t, e, i) => {\n        o.push(t), o.push(e), o.push(i), h.push(t), h.push(e), h.push(i), p.push(this.pathVertexData[t]), p.push(this.pathVertexData[e]), p.push(this.pathVertexData[i]);\n      };\n    for (let r = 0; r < e; ++r) {\n      const e = this.profile.indices[2 * r],\n        s = this.profile.indices[2 * r + 1];\n      for (let r = 0; r < i; ++r) {\n        const i = r * t + e,\n          o = (r + 1) * t + s,\n          h = r * t + s;\n        n(i, (r + 1) * t + e, o), n(i, o, h);\n      }\n    }\n    this.startCap.buildTopology(this.path.vertices[0], n), this.endCap.buildTopology(this.path.vertices[this.path.vertices.length - 1], n), this.vertexIndices = r(o), this.normalIndices = r(h), this.pathVertexIndices = r(p);\n  }\n  onPathChanged() {\n    this._rebuildGeometry();\n  }\n}\nexport { o as PathBuilder };","map":{"version":3,"names":["estimateNumberArrayMemory","t","newFloatArray","e","floatSubArray","i","newIntArray","s","compactIndices","r","o","constructor","h","p","n","path","profile","extruder","startCap","endCap","options","_extrusionVertexCount","l","vertices","length","numExtrusionProfiles","numProfilesPerJoin","numVerticesTotal","vertexBufferStart","a","numVertices","u","pathVertexData","profileRightAxes","profileUpAxes","profileVertexAndNormals","positions","offset","_rebuildGeometry","buildTopology","usedMemory","emitVertex","right","up","maxStretchDistance","rotationRight","emitCapVertex","rebuildConnectingProfileGeometry","extrude","rebuildCapGeometry","numSegments","indexBufferStart","firstProfileVertexIndex","numIndices","Array","push","indices","vertexIndices","normalIndices","pathVertexIndices","onPathChanged","PathBuilder"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/node_modules/@arcgis/core/views/3d/webgl-engine/lib/PathBuilder.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{estimateNumberArrayMemory as t}from\"../../../../core/memoryEstimations.js\";import{newFloatArray as e,floatSubArray as i}from\"../../../../geometry/support/FloatArray.js\";import{newIntArray as s,compactIndices as r}from\"../../../../geometry/support/Indices.js\";class o{constructor(t,r,o,h,p,n={}){this.path=t,this.profile=r,this.extruder=o,this.startCap=h,this.endCap=p,this.options=n,this._extrusionVertexCount=0;const l=this.path.vertices.length-2;this.numExtrusionProfiles=o.numProfilesPerJoin()*l+2,this.numVerticesTotal=r.vertices.length*this.numExtrusionProfiles,this.startCap.vertexBufferStart=this.numVerticesTotal;const a=this.startCap.numVertices;this.numVerticesTotal+=a,this.endCap.vertexBufferStart=this.numVerticesTotal;const u=this.endCap.numVertices;this.numVerticesTotal+=u,this.pathVertexData=s(1*this.numVerticesTotal),this.profileRightAxes=e(4*this.numVerticesTotal),this.profileUpAxes=e(4*this.numVerticesTotal),this.profileVertexAndNormals=e(4*this.numVerticesTotal),this.positions=i(t.positions,t.offset,3*t.vertices.length),this._rebuildGeometry(),this.buildTopology()}get usedMemory(){return t(this.pathVertexData,this.profileRightAxes,this.profileUpAxes,this.profileVertexAndNormals)+this.path.usedMemory+this.profile.usedMemory}emitVertex(t,e,i,s,r){const o=4*this._extrusionVertexCount;if(this.profileRightAxes[o]=e.right[0],this.profileRightAxes[o+1]=e.right[1],this.profileRightAxes[o+2]=e.right[2],this.profileUpAxes[o]=e.up[0],this.profileUpAxes[o+1]=e.up[1],this.profileUpAxes[o+2]=e.up[2],this.profileVertexAndNormals[o]=i[0],this.profileVertexAndNormals[o+1]=i[1],this.profileVertexAndNormals[o+2]=s[0],this.profileVertexAndNormals[o+3]=s[1],this.pathVertexData[this._extrusionVertexCount]=t,r){const e=this.path.vertices[t],i=e.maxStretchDistance;this.profileRightAxes[o+3]=e.rotationRight[0]*i,this.profileUpAxes[o+3]=e.rotationRight[1]*i}else this.profileRightAxes[o+3]=0,this.profileUpAxes[o+3]=0;++this._extrusionVertexCount}emitCapVertex(t,e,i,s,r,o){const h=4*this._extrusionVertexCount;this.profileRightAxes[h]=e.right[0],this.profileRightAxes[h+1]=e.right[1],this.profileRightAxes[h+2]=e.right[2],this.profileRightAxes[h+3]=r,this.profileUpAxes[h]=e.up[0],this.profileUpAxes[h+1]=e.up[1],this.profileUpAxes[h+2]=e.up[2],this.profileUpAxes[h+3]=o,this.profileVertexAndNormals[h]=i[0],this.profileVertexAndNormals[h+1]=i[1],this.profileVertexAndNormals[h+2]=s[0],this.profileVertexAndNormals[h+3]=s[1],this.pathVertexData[this._extrusionVertexCount]=t,++this._extrusionVertexCount}_rebuildGeometry(){this._extrusionVertexCount=0;const{positions:t,offset:e,vertices:s}=this.path;this.positions=i(t,e,3*s.length);let r=0;const o=(t,e,i,s,o)=>this.emitCapVertex(r,t,e,i,s,o),h=(t,e,i,s)=>this.emitVertex(r,t,e,i,s);for(this.startCap.rebuildConnectingProfileGeometry(s[r],this.profile,o),r=1;r<s.length-1;++r)this.extruder.extrude(s[r],this.profile,h);this.endCap.rebuildConnectingProfileGeometry(s[r],this.profile,o),r=0,this.startCap.rebuildCapGeometry(s[r],o),r=s.length-1,this.endCap.rebuildCapGeometry(s[r],o)}buildTopology(){const t=this.profile.vertices.length,e=this.profile.numSegments,i=this.numExtrusionProfiles-1;let s=3*(2*(e*i));this.startCap.indexBufferStart=s,this.startCap.firstProfileVertexIndex=0,s+=this.startCap.numIndices,this.endCap.indexBufferStart=s,this.endCap.firstProfileVertexIndex=t*(this.numExtrusionProfiles-1);const o=new Array,h=new Array,p=new Array,n=(t,e,i)=>{o.push(t),o.push(e),o.push(i),h.push(t),h.push(e),h.push(i),p.push(this.pathVertexData[t]),p.push(this.pathVertexData[e]),p.push(this.pathVertexData[i])};for(let r=0;r<e;++r){const e=this.profile.indices[2*r],s=this.profile.indices[2*r+1];for(let r=0;r<i;++r){const i=r*t+e,o=(r+1)*t+s,h=r*t+s;n(i,(r+1)*t+e,o),n(i,o,h)}}this.startCap.buildTopology(this.path.vertices[0],n),this.endCap.buildTopology(this.path.vertices[this.path.vertices.length-1],n),this.vertexIndices=r(o),this.normalIndices=r(h),this.pathVertexIndices=r(p)}onPathChanged(){this._rebuildGeometry()}}export{o as PathBuilder};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}