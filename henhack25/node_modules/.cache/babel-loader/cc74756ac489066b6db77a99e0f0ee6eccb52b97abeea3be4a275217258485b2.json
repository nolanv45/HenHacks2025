{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport { AnalyticalSkyModel as e } from \"./AnalyticalSkyModel.glsl.js\";\nimport { PBRMode as o } from \"./PhysicallyBasedRenderingParameters.glsl.js\";\nimport { PiUtils as t } from \"./PiUtils.glsl.js\";\nimport { glsl as a } from \"../../shaderModules/glsl.js\";\nfunction n(n, r) {\n  const l = n.fragment.code;\n  n.include(t), r.pbrMode !== o.Normal && r.pbrMode !== o.Schematic && r.pbrMode !== o.Simplified && r.pbrMode !== o.TerrainWithWater || (l.add(a`float normalDistribution(float NdotH, float roughness)\n{\nfloat a = NdotH * roughness;\nfloat b = roughness / (1.0 - NdotH * NdotH + a * a);\nreturn b * b * INV_PI;\n}`), l.add(a`const vec4 c0 = vec4(-1.0, -0.0275, -0.572,  0.022);\nconst vec4 c1 = vec4( 1.0,  0.0425,  1.040, -0.040);\nconst vec2 c2 = vec2(-1.04, 1.04);\nvec2 prefilteredDFGAnalytical(float roughness, float NdotV) {\nvec4 r = roughness * c0 + c1;\nfloat a004 = min(r.x * r.x, exp2(-9.28 * NdotV)) * r.x + r.y;\nreturn c2 * a004 + r.zw;\n}`)), r.pbrMode !== o.Normal && r.pbrMode !== o.Schematic || (n.include(e), l.add(a`struct PBRShadingInfo\n{\nfloat NdotV;\nfloat LdotH;\nfloat NdotNG;\nfloat RdotNG;\nfloat NdotAmbDir;\nfloat NdotH_Horizon;\nvec3 skyRadianceToSurface;\nvec3 groundRadianceToSurface;\nvec3 skyIrradianceToSurface;\nvec3 groundIrradianceToSurface;\nfloat averageAmbientRadiance;\nfloat ssao;\nvec3 albedoLinear;\nvec3 f0;\nvec3 f90;\nvec3 diffuseColor;\nfloat metalness;\nfloat roughness;\n};`), l.add(a`vec3 evaluateEnvironmentIllumination(PBRShadingInfo inputs) {\nvec3 indirectDiffuse = evaluateDiffuseIlluminationHemisphere(inputs.groundIrradianceToSurface, inputs.skyIrradianceToSurface, inputs.NdotNG);\nvec3 indirectSpecular = evaluateSpecularIlluminationHemisphere(inputs.groundRadianceToSurface, inputs.skyRadianceToSurface, inputs.RdotNG, inputs.roughness);\nvec3 diffuseComponent = inputs.diffuseColor * indirectDiffuse * INV_PI;\nvec2 dfg = prefilteredDFGAnalytical(inputs.roughness, inputs.NdotV);\nvec3 specularColor = inputs.f0 * dfg.x + inputs.f90 * dfg.y;\nvec3 specularComponent = specularColor * indirectSpecular;\nreturn (diffuseComponent + specularComponent);\n}`), l.add(a`float gamutMapChanel(float x, vec2 p){\nreturn (x < p.x) ? mix(0.0, p.y, x/p.x) : mix(p.y, 1.0, (x - p.x) / (1.0 - p.x) );\n}`), l.add(a`vec3 blackLevelSoftCompression(vec3 inColor, PBRShadingInfo inputs){\nvec3 outColor;\nvec2 p = vec2(0.02 * (inputs.averageAmbientRadiance), 0.0075 * (inputs.averageAmbientRadiance));\noutColor.x = gamutMapChanel(inColor.x, p) ;\noutColor.y = gamutMapChanel(inColor.y, p) ;\noutColor.z = gamutMapChanel(inColor.z, p) ;\nreturn outColor;\n}`));\n}\nfunction r(e, o) {\n  const n = e.fragment.code;\n  e.include(t), n.add(a`\n  struct PBRShadingWater\n  {\n      float NdotL;   // cos angle between normal and light direction\n      float NdotV;   // cos angle between normal and view direction\n      float NdotH;   // cos angle between normal and half vector\n      float VdotH;   // cos angle between view direction and half vector\n      float LdotH;   // cos angle between light direction and half vector\n      float VdotN;   // cos angle between view direction and normal vector\n  };\n\n  float dtrExponent = ${o.useCustomDTRExponentForWater ? \"2.2\" : \"2.0\"};\n  `), n.add(a`vec3 fresnelReflection(float angle, vec3 f0, float f90) {\nreturn f0 + (f90 - f0) * pow(1.0 - angle, 5.0);\n}`), n.add(a`float normalDistributionWater(float NdotH, float roughness)\n{\nfloat r2 = roughness * roughness;\nfloat NdotH2 = NdotH * NdotH;\nfloat denom = pow((NdotH2 * (r2 - 1.0) + 1.0), dtrExponent) * PI;\nreturn r2 / denom;\n}`), n.add(a`float geometricOcclusionKelemen(float LoH)\n{\nreturn 0.25 / (LoH * LoH);\n}`), n.add(a`vec3 brdfSpecularWater(in PBRShadingWater props, float roughness, vec3 F0, float F0Max)\n{\nvec3  F = fresnelReflection(props.VdotH, F0, F0Max);\nfloat dSun = normalDistributionWater(props.NdotH, roughness);\nfloat V = geometricOcclusionKelemen(props.LdotH);\nfloat diffusionSunHaze = mix(roughness + 0.045, roughness + 0.385, 1.0 - props.VdotH);\nfloat strengthSunHaze  = 1.2;\nfloat dSunHaze = normalDistributionWater(props.NdotH, diffusionSunHaze) * strengthSunHaze;\nreturn ((dSun + dSunHaze) * V) * F;\n}`);\n}\nexport { n as PhysicallyBasedRendering, r as PhysicallyBasedRenderingWater };","map":{"version":3,"names":["AnalyticalSkyModel","e","PBRMode","o","PiUtils","t","glsl","a","n","r","l","fragment","code","include","pbrMode","Normal","Schematic","Simplified","TerrainWithWater","add","useCustomDTRExponentForWater","PhysicallyBasedRendering","PhysicallyBasedRenderingWater"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRendering.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{AnalyticalSkyModel as e}from\"./AnalyticalSkyModel.glsl.js\";import{PBRMode as o}from\"./PhysicallyBasedRenderingParameters.glsl.js\";import{PiUtils as t}from\"./PiUtils.glsl.js\";import{glsl as a}from\"../../shaderModules/glsl.js\";function n(n,r){const l=n.fragment.code;n.include(t),r.pbrMode!==o.Normal&&r.pbrMode!==o.Schematic&&r.pbrMode!==o.Simplified&&r.pbrMode!==o.TerrainWithWater||(l.add(a`float normalDistribution(float NdotH, float roughness)\n{\nfloat a = NdotH * roughness;\nfloat b = roughness / (1.0 - NdotH * NdotH + a * a);\nreturn b * b * INV_PI;\n}`),l.add(a`const vec4 c0 = vec4(-1.0, -0.0275, -0.572,  0.022);\nconst vec4 c1 = vec4( 1.0,  0.0425,  1.040, -0.040);\nconst vec2 c2 = vec2(-1.04, 1.04);\nvec2 prefilteredDFGAnalytical(float roughness, float NdotV) {\nvec4 r = roughness * c0 + c1;\nfloat a004 = min(r.x * r.x, exp2(-9.28 * NdotV)) * r.x + r.y;\nreturn c2 * a004 + r.zw;\n}`)),r.pbrMode!==o.Normal&&r.pbrMode!==o.Schematic||(n.include(e),l.add(a`struct PBRShadingInfo\n{\nfloat NdotV;\nfloat LdotH;\nfloat NdotNG;\nfloat RdotNG;\nfloat NdotAmbDir;\nfloat NdotH_Horizon;\nvec3 skyRadianceToSurface;\nvec3 groundRadianceToSurface;\nvec3 skyIrradianceToSurface;\nvec3 groundIrradianceToSurface;\nfloat averageAmbientRadiance;\nfloat ssao;\nvec3 albedoLinear;\nvec3 f0;\nvec3 f90;\nvec3 diffuseColor;\nfloat metalness;\nfloat roughness;\n};`),l.add(a`vec3 evaluateEnvironmentIllumination(PBRShadingInfo inputs) {\nvec3 indirectDiffuse = evaluateDiffuseIlluminationHemisphere(inputs.groundIrradianceToSurface, inputs.skyIrradianceToSurface, inputs.NdotNG);\nvec3 indirectSpecular = evaluateSpecularIlluminationHemisphere(inputs.groundRadianceToSurface, inputs.skyRadianceToSurface, inputs.RdotNG, inputs.roughness);\nvec3 diffuseComponent = inputs.diffuseColor * indirectDiffuse * INV_PI;\nvec2 dfg = prefilteredDFGAnalytical(inputs.roughness, inputs.NdotV);\nvec3 specularColor = inputs.f0 * dfg.x + inputs.f90 * dfg.y;\nvec3 specularComponent = specularColor * indirectSpecular;\nreturn (diffuseComponent + specularComponent);\n}`),l.add(a`float gamutMapChanel(float x, vec2 p){\nreturn (x < p.x) ? mix(0.0, p.y, x/p.x) : mix(p.y, 1.0, (x - p.x) / (1.0 - p.x) );\n}`),l.add(a`vec3 blackLevelSoftCompression(vec3 inColor, PBRShadingInfo inputs){\nvec3 outColor;\nvec2 p = vec2(0.02 * (inputs.averageAmbientRadiance), 0.0075 * (inputs.averageAmbientRadiance));\noutColor.x = gamutMapChanel(inColor.x, p) ;\noutColor.y = gamutMapChanel(inColor.y, p) ;\noutColor.z = gamutMapChanel(inColor.z, p) ;\nreturn outColor;\n}`))}function r(e,o){const n=e.fragment.code;e.include(t),n.add(a`\n  struct PBRShadingWater\n  {\n      float NdotL;   // cos angle between normal and light direction\n      float NdotV;   // cos angle between normal and view direction\n      float NdotH;   // cos angle between normal and half vector\n      float VdotH;   // cos angle between view direction and half vector\n      float LdotH;   // cos angle between light direction and half vector\n      float VdotN;   // cos angle between view direction and normal vector\n  };\n\n  float dtrExponent = ${o.useCustomDTRExponentForWater?\"2.2\":\"2.0\"};\n  `),n.add(a`vec3 fresnelReflection(float angle, vec3 f0, float f90) {\nreturn f0 + (f90 - f0) * pow(1.0 - angle, 5.0);\n}`),n.add(a`float normalDistributionWater(float NdotH, float roughness)\n{\nfloat r2 = roughness * roughness;\nfloat NdotH2 = NdotH * NdotH;\nfloat denom = pow((NdotH2 * (r2 - 1.0) + 1.0), dtrExponent) * PI;\nreturn r2 / denom;\n}`),n.add(a`float geometricOcclusionKelemen(float LoH)\n{\nreturn 0.25 / (LoH * LoH);\n}`),n.add(a`vec3 brdfSpecularWater(in PBRShadingWater props, float roughness, vec3 F0, float F0Max)\n{\nvec3  F = fresnelReflection(props.VdotH, F0, F0Max);\nfloat dSun = normalDistributionWater(props.NdotH, roughness);\nfloat V = geometricOcclusionKelemen(props.LdotH);\nfloat diffusionSunHaze = mix(roughness + 0.045, roughness + 0.385, 1.0 - props.VdotH);\nfloat strengthSunHaze  = 1.2;\nfloat dSunHaze = normalDistributionWater(props.NdotH, diffusionSunHaze) * strengthSunHaze;\nreturn ((dSun + dSunHaze) * V) * F;\n}`)}export{n as PhysicallyBasedRendering,r as PhysicallyBasedRenderingWater};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAAOA,kBAAkB,IAAIC,CAAC,QAAK,8BAA8B;AAAC,SAAOC,OAAO,IAAIC,CAAC,QAAK,8CAA8C;AAAC,SAAOC,OAAO,IAAIC,CAAC,QAAK,mBAAmB;AAAC,SAAOC,IAAI,IAAIC,CAAC,QAAK,6BAA6B;AAAC,SAASC,CAACA,CAACA,CAAC,EAACC,CAAC,EAAC;EAAC,MAAMC,CAAC,GAACF,CAAC,CAACG,QAAQ,CAACC,IAAI;EAACJ,CAAC,CAACK,OAAO,CAACR,CAAC,CAAC,EAACI,CAAC,CAACK,OAAO,KAAGX,CAAC,CAACY,MAAM,IAAEN,CAAC,CAACK,OAAO,KAAGX,CAAC,CAACa,SAAS,IAAEP,CAAC,CAACK,OAAO,KAAGX,CAAC,CAACc,UAAU,IAAER,CAAC,CAACK,OAAO,KAAGX,CAAC,CAACe,gBAAgB,KAAGR,CAAC,CAACS,GAAG,CAACZ,CAAC;AAC9Y;AACA;AACA;AACA;AACA,EAAE,CAAC,EAACG,CAAC,CAACS,GAAG,CAACZ,CAAC;AACX;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,CAAC,EAACE,CAAC,CAACK,OAAO,KAAGX,CAAC,CAACY,MAAM,IAAEN,CAAC,CAACK,OAAO,KAAGX,CAAC,CAACa,SAAS,KAAGR,CAAC,CAACK,OAAO,CAACZ,CAAC,CAAC,EAACS,CAAC,CAACS,GAAG,CAACZ,CAAC;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,CAAC,EAACG,CAAC,CAACS,GAAG,CAACZ,CAAC;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,EAACG,CAAC,CAACS,GAAG,CAACZ,CAAC;AACX;AACA,EAAE,CAAC,EAACG,CAAC,CAACS,GAAG,CAACZ,CAAC;AACX;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,CAAC;AAAA;AAAC,SAASE,CAACA,CAACR,CAAC,EAACE,CAAC,EAAC;EAAC,MAAMK,CAAC,GAACP,CAAC,CAACU,QAAQ,CAACC,IAAI;EAACX,CAAC,CAACY,OAAO,CAACR,CAAC,CAAC,EAACG,CAAC,CAACW,GAAG,CAACZ,CAAC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwBJ,CAAC,CAACiB,4BAA4B,GAAC,KAAK,GAAC,KAAK;AAClE,GAAG,CAAC,EAACZ,CAAC,CAACW,GAAG,CAACZ,CAAC;AACZ;AACA,EAAE,CAAC,EAACC,CAAC,CAACW,GAAG,CAACZ,CAAC;AACX;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,EAACC,CAAC,CAACW,GAAG,CAACZ,CAAC;AACX;AACA;AACA,EAAE,CAAC,EAACC,CAAC,CAACW,GAAG,CAACZ,CAAC;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC;AAAA;AAAC,SAAOC,CAAC,IAAIa,wBAAwB,EAACZ,CAAC,IAAIa,6BAA6B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}