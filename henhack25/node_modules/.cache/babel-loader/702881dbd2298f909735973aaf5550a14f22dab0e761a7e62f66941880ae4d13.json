{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport { b as e, c as t } from \"./tslib.es6.js\";\nimport { G as n, v as i } from \"./Geometry.js\";\nimport { s as r, S as s, a as o } from \"./QuadraticBezier.js\";\nimport { g as m } from \"./ProjectionTransformation.js\";\nimport { d as a, P as u, b as c, c as h, i as l, h as g, j as y } from \"./Point2D.js\";\nimport { Envelope2D as _ } from \"./Envelope2D.js\";\nimport { P as D, E as p } from \"./Envelope.js\";\nfunction v() {\n  return {\n    outPoint: new u(),\n    index: -1,\n    t: Number.NaN\n  };\n}\nfunction N(e, t, n) {\n  return {\n    outPoint: e.clone(),\n    index: t,\n    t: n\n  };\n}\nfunction f(e, t, n, i) {\n  e.outPoint.assign(t), e.index = n, e.t = i;\n}\nfunction P(e, t) {\n  e.outPoint.assign(t.outPoint), e.index = t.index, e.t = t.t;\n}\nfunction I(e, t, n, i) {\n  e.index = n, e.t = i, t.queryCoord2D(e.t, e.outPoint);\n}\nfunction d(e, t) {\n  const n = v();\n  P(n, e), P(e, t), P(t, n);\n}\nfunction q(e, t, i, r, s, o) {\n  if (e.getGeometryType() === n.enumPolygon) {\n    for (; r.nextPath();) if (r.hasNextSegment()) {\n      const t = r.nextSegment();\n      if (0 !== m(e, t.getEndXY(), 0)) return f(s, t.getEndXY(), -1, Number.NaN), f(o, t.getEndXY(), -1, Number.NaN), !0;\n    }\n    r.resetToFirstPath();\n  }\n  if (t.getGeometryType() === n.enumPolygon) {\n    for (; i.nextPath();) if (i.hasNextSegment()) {\n      const e = i.nextSegment();\n      if (0 !== m(t, e.getEndXY(), 0)) return f(s, e.getEndXY(), -1, Number.NaN), f(o, e.getEndXY(), -1, Number.NaN), !0;\n    }\n    i.resetToFirstPath();\n  }\n  return !1;\n}\nfunction M(e) {\n  const t = e.getPathCount(),\n    n = a(e.getSegmentCount(), 0);\n  let i = 0;\n  for (let r = 0; r < t; ++r) {\n    const t = i + e.getSegmentCountPath(r);\n    for (let s = i, o = e.getPathStart(r); s < t; ++s, ++o) n[s] = o;\n    i = t;\n  }\n  return r(e.getPointCount(), n), n;\n}\nfunction x(e, t) {\n  return !!Number.isNaN(t) || e <= t;\n}\nfunction E(e) {\n  const t = new o();\n  return t.addEnvelope(e, !1), t;\n}\nclass b {\n  constructor(e, t) {\n    if (this.m_env2DgeometryA = null, this.m_env2DgeometryB = null, this.m_progressCounter = 0, this.m_progressTracker = t, this.m_maxSqrDistance = e * e, this.m_maxDistance = e, this.m_bIsNearCalc = !1, Number.isNaN(this.m_maxDistance) ? this.m_maxDistance = Number.POSITIVE_INFINITY : this.m_maxDistance = e, this.m_maxSqrDistance = this.m_maxDistance * this.m_maxDistance, Number.isFinite(this.m_maxSqrDistance)) {\n      let e = Math.sqrt(this.m_maxSqrDistance);\n      for (; e < this.m_maxDistance;) this.m_maxSqrDistance *= 1 + Number.EPSILON, e = Math.sqrt(this.m_maxSqrDistance);\n    }\n  }\n  calculate(e, t, n, i) {\n    if (e.getGeometryType() !== D.type || t.getGeometryType() !== D.type) {\n      this.m_env2DgeometryA = new _(), this.m_env2DgeometryB = new _(), e.queryEnvelope(this.m_env2DgeometryA), t.queryEnvelope(this.m_env2DgeometryB);\n      if (!x(this.m_env2DgeometryA.distanceFromEnvelope(this.m_env2DgeometryB), this.m_maxDistance)) return Number.POSITIVE_INFINITY;\n    }\n    const r = N(new u(), y(), Number.NaN),\n      s = N(new u(), y(), Number.NaN),\n      o = this._ExecuteBruteForce(e, t, r, s);\n    return x(o, this.m_maxDistance) ? (null !== n && P(n, r), null !== i && P(i, s), o) : Number.POSITIVE_INFINITY;\n  }\n  isNear(e, t) {\n    if (this.m_bIsNearCalc = !0, e.isEmpty() || t.isEmpty()) return !1;\n    if (e === t) return !0;\n    let n = !0;\n    if (e.getGeometryType() !== D.type && e.getGeometryType() !== p.type || t.getGeometryType() !== D.type && t.getGeometryType() !== p.type || (n = !1), n) {\n      if (this.m_env2DgeometryA = new _(), this.m_env2DgeometryB = new _(), e.queryEnvelope(this.m_env2DgeometryA), t.queryEnvelope(this.m_env2DgeometryB), !(this.m_env2DgeometryA.sqrMaxMinDistanceEnvelope(this.m_env2DgeometryB) > this.m_maxSqrDistance)) return !0;\n      if (this.m_env2DgeometryA.sqrDistanceEnvelope(this.m_env2DgeometryB, null, null) > this.m_maxSqrDistance) return !1;\n    }\n    const i = N(new u(), y(), Number.NaN),\n      r = N(new u(), y(), Number.NaN);\n    return this._ExecuteBruteForce(e, t, i, r) <= this.m_maxDistance;\n  }\n  progress_() {\n    let e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !1;\n  }\n  _ExecuteBruteForce(e, t, i, r) {\n    switch (e.getGeometryType()) {\n      case n.enumPoint:\n        return this.distancePointGeometry(e, t, i, r);\n      case n.enumMultiPoint:\n        return this.distanceMultipointGeometry(e, t, i, r);\n      case n.enumEnvelope:\n        return this.distanceEnvelopeGeometry(e, t, i, r);\n      case n.enumPolyline:\n      case n.enumPolygon:\n        return this.distanceMultipathGeometry(e, t, i, r);\n      default:\n        return Number.NaN;\n    }\n  }\n  distancePointGeometry(e, t, i, r) {\n    switch (t.getGeometryType()) {\n      case n.enumPoint:\n        return this.distancePointPoint(e, t, i, r);\n      case n.enumMultiPoint:\n        return this.distancePointMultipoint(e, t, i, r);\n      case n.enumPolyline:\n      case n.enumPolygon:\n        return this.distancePointMultipath(e, t, i, r);\n      case n.enumEnvelope:\n        return this.distancePointEnvelope(e, t, i, r);\n      default:\n        return Number.NaN;\n    }\n  }\n  distancePointPoint(e, t, n, i) {\n    const r = e.getXY(),\n      s = t.getXY();\n    return f(n, r, 0, 0), f(i, s, 0, 0), Math.sqrt(u.sqrDistance(r, s));\n  }\n  distancePointMultipoint(e, t, n, i) {\n    const r = e.getXY();\n    let s = this.m_maxSqrDistance,\n      o = s,\n      m = !1;\n    const a = t.getPointCount(),\n      c = new u();\n    for (let h = 0; h < a; ++h) if (t.queryXY(h, c), o = u.sqrDistance(r, c), this.m_bIsNearCalc) {\n      if (o <= s) return 0;\n    } else if (!(o > s) && (!m && o === s || o < s) && (s = o, f(n, r, 0, 0), f(i, c, h, 0), m = !0, 0 === s)) return 0;\n    return m ? Math.sqrt(s) : Number.POSITIVE_INFINITY;\n  }\n  distancePointMultipath(e, t, i, r) {\n    const s = !this.m_env2DgeometryA.isIntersecting(this.m_env2DgeometryB),\n      o = e.getXY();\n    if (!s && t.getGeometryType() === n.enumPolygon && 0 !== m(t, o, 0)) return f(i, o, 0, 0), f(r, o, -1, Number.NaN), 0;\n    t.getImpl().getAccelerators();\n    let a = this.m_maxSqrDistance,\n      c = a,\n      h = -1;\n    const l = new _(),\n      g = t.querySegmentIterator();\n    let y = !1;\n    for (; g.nextPath();) for (; g.hasNextSegment();) {\n      const e = g.nextSegment();\n      e.queryEnvelope(l);\n      const t = l.sqrDistance(o);\n      if (t > a) continue;\n      if (!this.m_bIsNearCalc && y && t === a) continue;\n      h = e.getClosestCoordinate(o, !1);\n      const n = e.getCoord2D(h);\n      if (c = u.sqrDistance(o, n), this.m_bIsNearCalc) {\n        if (c <= a) return 0;\n      } else if (!(c > a) && (!y || c < a) && (a = c, f(i, o, 0, 0), f(r, n, g.getStartPointIndex(), h), y = !0, 0 === a)) return 0;\n    }\n    return y ? Math.sqrt(a) : Number.POSITIVE_INFINITY;\n  }\n  distancePointEnvelope(e, t, n, i) {\n    const r = e.getXY();\n    f(n, r, 0, 0), f(i, r, -1, Number.NaN);\n    const s = t.asEnvelope2D();\n    return !s.contains(r) ? Math.sqrt(s.sqrDistance(r, i.outPoint)) : 0;\n  }\n  distanceMultipointGeometry(e, t, i, r) {\n    switch (t.getGeometryType()) {\n      case n.enumPoint:\n        {\n          this.m_env2DgeometryB = c(this.m_env2DgeometryA, this.m_env2DgeometryA = this.m_env2DgeometryB);\n          const n = this.distancePointMultipoint(t, e, r, i);\n          return this.m_env2DgeometryB = c(this.m_env2DgeometryA, this.m_env2DgeometryA = this.m_env2DgeometryB), n;\n        }\n      case n.enumMultiPoint:\n        return this.distanceMultipointMultipoint(e, t, i, r, 1, 1);\n      case n.enumPolyline:\n      case n.enumPolygon:\n        return this.distanceMultipointMultipath(e, t, i, r);\n      case n.enumEnvelope:\n        return this.distanceMultipointMultipath(e, E(t), i, r);\n      default:\n        return Number.NaN;\n    }\n  }\n  distanceMultipointMultipoint(n, i, r, s, o, m) {\n    const a = {\n      stack: [],\n      error: void 0,\n      hasError: !1\n    };\n    try {\n      if (this.m_bIsNearCalc && 1 === o && 1 === m) {\n        const e = Math.trunc(h(Math.sqrt(n.getPointCount()) + 1, 1, l())),\n          t = Math.trunc(h(Math.sqrt(i.getPointCount()) + 1, 1, l()));\n        if ((e >= 4 || t >= 4) && this.distanceMultipointMultipoint(n, i, r, s, e, t) <= this.m_maxSqrDistance) return 0;\n      }\n      let t = this.m_maxSqrDistance;\n      const y = [n],\n        _ = [i],\n        D = this.swapGeometriesIfBGtA(y, _);\n      D && (this.m_env2DgeometryB = c(this.m_env2DgeometryA, this.m_env2DgeometryA = this.m_env2DgeometryB), m = c(o, o = m), d(r, s)), e(a, g(() => {\n        d(r, s), this.m_env2DgeometryB = c(this.m_env2DgeometryA, this.m_env2DgeometryA = this.m_env2DgeometryB);\n      }, !D), !1);\n      const p = y[0].getImpl(),\n        v = _[0].getImpl(),\n        N = p.getPointCount(),\n        P = v.getPointCount(),\n        I = P > 1;\n      let q = !1;\n      const M = new u(),\n        x = new u();\n      for (let e = 0; e < N; e += o) {\n        if (p.queryXY(e, M), I) {\n          const e = this.m_env2DgeometryB.sqrDistance(M);\n          if (this.m_bIsNearCalc) {\n            if (e > t) continue;\n            if (this.m_env2DgeometryB.sqrMaxMinDistance(M) <= t) return 0;\n          } else if (e >= t) continue;\n        }\n        for (let n = 0; n < P; n += m) {\n          v.queryXY(n, x);\n          const i = u.sqrDistance(M, x);\n          if (this.m_bIsNearCalc) {\n            if (i <= t) return 0;\n          } else if (!(i > t || q && i === t) && (!q || i < t) && (f(r, M, e, 0), f(s, x, n, 0), q = !0, t = i, 0 === t)) return q ? Math.sqrt(t) : Number.POSITIVE_INFINITY;\n        }\n      }\n      return q ? Math.sqrt(t) : Number.POSITIVE_INFINITY;\n    } catch (y) {\n      a.error = y, a.hasError = !0;\n    } finally {\n      t(a);\n    }\n  }\n  distanceMultipointMultipath(e, t, i, r) {\n    let s = !!this.m_env2DgeometryA.isIntersecting(this.m_env2DgeometryB) && t.getGeometryType() === n.enumPolygon;\n    const o = t.querySegmentIterator();\n    o.stripAttributes();\n    const a = new _(),\n      c = new u();\n    let h = this.m_maxSqrDistance;\n    const l = e.getImpl(),\n      g = l.getPointCount(),\n      y = g > 1;\n    let D = !1;\n    for (; o.nextPath();) for (; o.hasNextSegment();) {\n      const e = o.nextSegment();\n      if (e.queryLooseEnvelope(a), y) {\n        const e = a.sqrDistanceEnvelope(this.m_env2DgeometryA, null, null);\n        if (this.m_bIsNearCalc) {\n          if (e > h) continue;\n        } else if (e > h || D && e === h) continue;\n      }\n      for (let n = 0; n < g; n++) {\n        if (l.queryXY(n, c), s && 0 !== m(t, c, 0)) return f(i, c, -1, Number.NaN), f(r, c, n, 0), 0;\n        {\n          const e = a.sqrDistance(c);\n          if (this.m_bIsNearCalc) {\n            if (e > h) continue;\n          } else if (e > h) continue;\n        }\n        const u = e.getClosestCoordinate(c, !1),\n          g = e.getCoord2D(u);\n        c.subThis(g);\n        const y = c.sqrLength();\n        if (this.m_bIsNearCalc) {\n          if (y <= h) return 0;\n        } else if (!(y > h) && (!D || y < h) && (h = y, f(i, l.getXY(n), n, 0), f(r, g, o.getStartPointIndex(), u), D = !0, 0 === h)) return 0;\n      }\n      s = !1;\n    }\n    return D ? Math.sqrt(h) : Number.POSITIVE_INFINITY;\n  }\n  distanceEnvelopeGeometry(e, t, i, r) {\n    switch (t.getGeometryType()) {\n      case n.enumPoint:\n        return this.distancePointEnvelope(t, e, r, i);\n      case n.enumMultiPoint:\n        {\n          this.m_env2DgeometryB = c(this.m_env2DgeometryA, this.m_env2DgeometryA = this.m_env2DgeometryB);\n          const n = this.distanceMultipointMultipath(t, E(e), r, i);\n          return this.m_env2DgeometryB = c(this.m_env2DgeometryA, this.m_env2DgeometryA = this.m_env2DgeometryB), n;\n        }\n      case n.enumPolyline:\n      case n.enumPolygon:\n        return this.distanceMultipathMultipath(E(e), t, i, r);\n      case n.enumEnvelope:\n        return this.distanceEnvelopeEnvelope(e, t, i, r);\n      default:\n        return Number.NaN;\n    }\n  }\n  distanceEnvelopeEnvelope(e, t, n, i) {\n    n.t = Number.NaN, n.index = -1, i.t = Number.NaN, i.index = -1;\n    const r = e.asEnvelope2D(),\n      s = t.asEnvelope2D();\n    return Math.sqrt(r.sqrDistanceEnvelope(s, n.outPoint, i.outPoint));\n  }\n  distanceMultipathGeometry(e, t, i, r) {\n    switch (t.getGeometryType()) {\n      case n.enumPoint:\n        {\n          this.m_env2DgeometryB = c(this.m_env2DgeometryA, this.m_env2DgeometryA = this.m_env2DgeometryB);\n          const n = this.distancePointMultipath(t, e, r, i);\n          return this.m_env2DgeometryB = c(this.m_env2DgeometryA, this.m_env2DgeometryA = this.m_env2DgeometryB), n;\n        }\n      case n.enumMultiPoint:\n        {\n          this.m_env2DgeometryB = c(this.m_env2DgeometryA, this.m_env2DgeometryA = this.m_env2DgeometryB);\n          const n = this.distanceMultipointMultipath(t, e, r, i);\n          return this.m_env2DgeometryB = c(this.m_env2DgeometryA, this.m_env2DgeometryA = this.m_env2DgeometryB), n;\n        }\n      case n.enumPolyline:\n      case n.enumPolygon:\n        return this.distanceMultipathMultipath(e, t, i, r);\n      case n.enumEnvelope:\n        return this.distanceMultipathMultipath(e, E(t), i, r);\n      default:\n        return Number.NaN;\n    }\n  }\n  distanceMultipathMultipath(n, i, r, o) {\n    const m = {\n      stack: [],\n      error: void 0,\n      hasError: !1\n    };\n    try {\n      const t = [n],\n        a = [i],\n        u = this.swapGeometriesIfAGtB(t, a);\n      u && (this.m_env2DgeometryB = c(this.m_env2DgeometryA, this.m_env2DgeometryA = this.m_env2DgeometryB), d(r, o)), e(m, g(() => {\n        d(r, o), this.m_env2DgeometryB = c(this.m_env2DgeometryA, this.m_env2DgeometryA = this.m_env2DgeometryB);\n      }, !u), !1);\n      const y = t[0],\n        D = a[0],\n        p = y.querySegmentIterator();\n      p.stripAttributes();\n      const N = D.querySegmentIterator();\n      if (N.stripAttributes(), this.m_bIsNearCalc && this.m_env2DgeometryA.sqrMaxMinDistanceEnvelope(this.m_env2DgeometryB) <= this.m_maxSqrDistance) return 0;\n      if (this.m_bIsNearCalc) {\n        const e = Math.trunc(h(Math.sqrt(y.getPointCount()) + 1, 1, l())),\n          t = Math.trunc(h(Math.sqrt(y.getPointCount()) + 1, 1, l()));\n        if (this.distanceMultipointMultipoint(y, D, r, o, e, t) <= this.m_maxSqrDistance) return 0;\n      }\n      if (!!this.m_env2DgeometryA.isIntersecting(this.m_env2DgeometryB)) {\n        const e = v(),\n          t = v();\n        if (q(y, D, p, N, e, t)) return P(r, e), P(o, t), 0;\n      }\n      const f = M(y),\n        x = [],\n        E = new s(),\n        b = new _(),\n        B = new _(),\n        S = new _();\n      let A = this.m_maxSqrDistance,\n        T = !0,\n        C = !1;\n      for (let e = 0, n = f.length; e < n; ++e) {\n        y.querySegment(f[e], E, !0);\n        const t = E.get();\n        if (t.queryEnvelope(b), !(b.sqrDistanceEnvelope(this.m_env2DgeometryB, null, null) > A)) {\n          if (this.m_bIsNearCalc && b.sqrMaxDistanceEnvelope(this.m_env2DgeometryB) <= A) return 0;\n          for (; N.nextPath();) {\n            if (this.progress_(), T) D.queryPathEnvelope(N.getPathIndex(), S), x[N.getPathIndex()] = S.clone();else if (b.sqrDistanceEnvelope(x[N.getPathIndex()], null, null) > A) continue;\n            for (; N.hasNextSegment();) {\n              const n = N.nextSegment();\n              if (n.queryEnvelope(B), b.sqrDistanceEnvelope(B, null, null) <= A) {\n                const i = !b.isIntersecting(B),\n                  s = [0],\n                  m = [0];\n                let a = t.distance(n, i, s, m);\n                if (a *= a, this.m_bIsNearCalc && a <= this.m_maxSqrDistance) return 0;\n                if (a < A || a === A && f[e] < r.index) {\n                  if (C = !0, I(r, t, f[e], s[0]), I(o, n, N.getStartPointIndex(), m[0]), 0 === a) return 0;\n                  A = a;\n                }\n              }\n            }\n          }\n          N.resetToFirstPath(), T = !1;\n        }\n      }\n      return C ? Math.sqrt(A) : Number.POSITIVE_INFINITY;\n    } catch (a) {\n      m.error = a, m.hasError = !0;\n    } finally {\n      t(m);\n    }\n  }\n  swapGeometriesIfAGtB(e, t) {\n    return i(e[0]) > i(t[0]) && (t[0] = c(e[0], e[0] = t[0]), !0);\n  }\n  swapGeometriesIfBGtA(e, t) {\n    return this.swapGeometriesIfAGtB(t, e);\n  }\n}\nexport { b as D, v as m, M as s, q as w };","map":{"version":3,"names":["b","e","c","t","G","n","v","i","s","r","S","a","o","g","m","d","P","u","h","l","j","y","Envelope2D","_","D","E","p","outPoint","index","Number","NaN","N","clone","f","assign","I","queryCoord2D","q","getGeometryType","enumPolygon","nextPath","hasNextSegment","nextSegment","getEndXY","resetToFirstPath","M","getPathCount","getSegmentCount","getSegmentCountPath","getPathStart","getPointCount","x","isNaN","addEnvelope","constructor","m_env2DgeometryA","m_env2DgeometryB","m_progressCounter","m_progressTracker","m_maxSqrDistance","m_maxDistance","m_bIsNearCalc","POSITIVE_INFINITY","isFinite","Math","sqrt","EPSILON","calculate","type","queryEnvelope","distanceFromEnvelope","_ExecuteBruteForce","isNear","isEmpty","sqrMaxMinDistanceEnvelope","sqrDistanceEnvelope","progress_","arguments","length","undefined","enumPoint","distancePointGeometry","enumMultiPoint","distanceMultipointGeometry","enumEnvelope","distanceEnvelopeGeometry","enumPolyline","distanceMultipathGeometry","distancePointPoint","distancePointMultipoint","distancePointMultipath","distancePointEnvelope","getXY","sqrDistance","queryXY","isIntersecting","getImpl","getAccelerators","querySegmentIterator","getClosestCoordinate","getCoord2D","getStartPointIndex","asEnvelope2D","contains","distanceMultipointMultipoint","distanceMultipointMultipath","stack","error","hasError","trunc","swapGeometriesIfBGtA","sqrMaxMinDistance","stripAttributes","queryLooseEnvelope","subThis","sqrLength","distanceMultipathMultipath","distanceEnvelopeEnvelope","swapGeometriesIfAGtB","B","A","T","C","querySegment","get","sqrMaxDistanceEnvelope","queryPathEnvelope","getPathIndex","distance","w"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/node_modules/@arcgis/core/chunks/Distance2DCalculator-Coa0qAFt.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{b as e,c as t}from\"./tslib.es6.js\";import{G as n,v as i}from\"./Geometry.js\";import{s as r,S as s,a as o}from\"./QuadraticBezier.js\";import{g as m}from\"./ProjectionTransformation.js\";import{d as a,P as u,b as c,c as h,i as l,h as g,j as y}from\"./Point2D.js\";import{Envelope2D as _}from\"./Envelope2D.js\";import{P as D,E as p}from\"./Envelope.js\";function v(){return{outPoint:new u,index:-1,t:Number.NaN}}function N(e,t,n){return{outPoint:e.clone(),index:t,t:n}}function f(e,t,n,i){e.outPoint.assign(t),e.index=n,e.t=i}function P(e,t){e.outPoint.assign(t.outPoint),e.index=t.index,e.t=t.t}function I(e,t,n,i){e.index=n,e.t=i,t.queryCoord2D(e.t,e.outPoint)}function d(e,t){const n=v();P(n,e),P(e,t),P(t,n)}function q(e,t,i,r,s,o){if(e.getGeometryType()===n.enumPolygon){for(;r.nextPath();)if(r.hasNextSegment()){const t=r.nextSegment();if(0!==m(e,t.getEndXY(),0))return f(s,t.getEndXY(),-1,Number.NaN),f(o,t.getEndXY(),-1,Number.NaN),!0}r.resetToFirstPath()}if(t.getGeometryType()===n.enumPolygon){for(;i.nextPath();)if(i.hasNextSegment()){const e=i.nextSegment();if(0!==m(t,e.getEndXY(),0))return f(s,e.getEndXY(),-1,Number.NaN),f(o,e.getEndXY(),-1,Number.NaN),!0}i.resetToFirstPath()}return!1}function M(e){const t=e.getPathCount(),n=a(e.getSegmentCount(),0);let i=0;for(let r=0;r<t;++r){const t=i+e.getSegmentCountPath(r);for(let s=i,o=e.getPathStart(r);s<t;++s,++o)n[s]=o;i=t}return r(e.getPointCount(),n),n}function x(e,t){return!!Number.isNaN(t)||e<=t}function E(e){const t=new o;return t.addEnvelope(e,!1),t}class b{constructor(e,t){if(this.m_env2DgeometryA=null,this.m_env2DgeometryB=null,this.m_progressCounter=0,this.m_progressTracker=t,this.m_maxSqrDistance=e*e,this.m_maxDistance=e,this.m_bIsNearCalc=!1,Number.isNaN(this.m_maxDistance)?this.m_maxDistance=Number.POSITIVE_INFINITY:this.m_maxDistance=e,this.m_maxSqrDistance=this.m_maxDistance*this.m_maxDistance,Number.isFinite(this.m_maxSqrDistance)){let e=Math.sqrt(this.m_maxSqrDistance);for(;e<this.m_maxDistance;)this.m_maxSqrDistance*=1+Number.EPSILON,e=Math.sqrt(this.m_maxSqrDistance)}}calculate(e,t,n,i){if(e.getGeometryType()!==D.type||t.getGeometryType()!==D.type){this.m_env2DgeometryA=new _,this.m_env2DgeometryB=new _,e.queryEnvelope(this.m_env2DgeometryA),t.queryEnvelope(this.m_env2DgeometryB);if(!x(this.m_env2DgeometryA.distanceFromEnvelope(this.m_env2DgeometryB),this.m_maxDistance))return Number.POSITIVE_INFINITY}const r=N(new u,y(),Number.NaN),s=N(new u,y(),Number.NaN),o=this._ExecuteBruteForce(e,t,r,s);return x(o,this.m_maxDistance)?(null!==n&&P(n,r),null!==i&&P(i,s),o):Number.POSITIVE_INFINITY}isNear(e,t){if(this.m_bIsNearCalc=!0,e.isEmpty()||t.isEmpty())return!1;if(e===t)return!0;let n=!0;if(e.getGeometryType()!==D.type&&e.getGeometryType()!==p.type||t.getGeometryType()!==D.type&&t.getGeometryType()!==p.type||(n=!1),n){if(this.m_env2DgeometryA=new _,this.m_env2DgeometryB=new _,e.queryEnvelope(this.m_env2DgeometryA),t.queryEnvelope(this.m_env2DgeometryB),!(this.m_env2DgeometryA.sqrMaxMinDistanceEnvelope(this.m_env2DgeometryB)>this.m_maxSqrDistance))return!0;if(this.m_env2DgeometryA.sqrDistanceEnvelope(this.m_env2DgeometryB,null,null)>this.m_maxSqrDistance)return!1}const i=N(new u,y(),Number.NaN),r=N(new u,y(),Number.NaN);return this._ExecuteBruteForce(e,t,i,r)<=this.m_maxDistance}progress_(e=!1){}_ExecuteBruteForce(e,t,i,r){switch(e.getGeometryType()){case n.enumPoint:return this.distancePointGeometry(e,t,i,r);case n.enumMultiPoint:return this.distanceMultipointGeometry(e,t,i,r);case n.enumEnvelope:return this.distanceEnvelopeGeometry(e,t,i,r);case n.enumPolyline:case n.enumPolygon:return this.distanceMultipathGeometry(e,t,i,r);default:return Number.NaN}}distancePointGeometry(e,t,i,r){switch(t.getGeometryType()){case n.enumPoint:return this.distancePointPoint(e,t,i,r);case n.enumMultiPoint:return this.distancePointMultipoint(e,t,i,r);case n.enumPolyline:case n.enumPolygon:return this.distancePointMultipath(e,t,i,r);case n.enumEnvelope:return this.distancePointEnvelope(e,t,i,r);default:return Number.NaN}}distancePointPoint(e,t,n,i){const r=e.getXY(),s=t.getXY();return f(n,r,0,0),f(i,s,0,0),Math.sqrt(u.sqrDistance(r,s))}distancePointMultipoint(e,t,n,i){const r=e.getXY();let s=this.m_maxSqrDistance,o=s,m=!1;const a=t.getPointCount(),c=new u;for(let h=0;h<a;++h)if(t.queryXY(h,c),o=u.sqrDistance(r,c),this.m_bIsNearCalc){if(o<=s)return 0}else if(!(o>s)&&(!m&&o===s||o<s)&&(s=o,f(n,r,0,0),f(i,c,h,0),m=!0,0===s))return 0;return m?Math.sqrt(s):Number.POSITIVE_INFINITY}distancePointMultipath(e,t,i,r){const s=!this.m_env2DgeometryA.isIntersecting(this.m_env2DgeometryB),o=e.getXY();if(!s&&t.getGeometryType()===n.enumPolygon&&0!==m(t,o,0))return f(i,o,0,0),f(r,o,-1,Number.NaN),0;t.getImpl().getAccelerators();let a=this.m_maxSqrDistance,c=a,h=-1;const l=new _,g=t.querySegmentIterator();let y=!1;for(;g.nextPath();)for(;g.hasNextSegment();){const e=g.nextSegment();e.queryEnvelope(l);const t=l.sqrDistance(o);if(t>a)continue;if(!this.m_bIsNearCalc&&y&&t===a)continue;h=e.getClosestCoordinate(o,!1);const n=e.getCoord2D(h);if(c=u.sqrDistance(o,n),this.m_bIsNearCalc){if(c<=a)return 0}else if(!(c>a)&&(!y||c<a)&&(a=c,f(i,o,0,0),f(r,n,g.getStartPointIndex(),h),y=!0,0===a))return 0}return y?Math.sqrt(a):Number.POSITIVE_INFINITY}distancePointEnvelope(e,t,n,i){const r=e.getXY();f(n,r,0,0),f(i,r,-1,Number.NaN);const s=t.asEnvelope2D();return!s.contains(r)?Math.sqrt(s.sqrDistance(r,i.outPoint)):0}distanceMultipointGeometry(e,t,i,r){switch(t.getGeometryType()){case n.enumPoint:{this.m_env2DgeometryB=c(this.m_env2DgeometryA,this.m_env2DgeometryA=this.m_env2DgeometryB);const n=this.distancePointMultipoint(t,e,r,i);return this.m_env2DgeometryB=c(this.m_env2DgeometryA,this.m_env2DgeometryA=this.m_env2DgeometryB),n}case n.enumMultiPoint:return this.distanceMultipointMultipoint(e,t,i,r,1,1);case n.enumPolyline:case n.enumPolygon:return this.distanceMultipointMultipath(e,t,i,r);case n.enumEnvelope:return this.distanceMultipointMultipath(e,E(t),i,r);default:return Number.NaN}}distanceMultipointMultipoint(n,i,r,s,o,m){const a={stack:[],error:void 0,hasError:!1};try{if(this.m_bIsNearCalc&&1===o&&1===m){const e=Math.trunc(h(Math.sqrt(n.getPointCount())+1,1,l())),t=Math.trunc(h(Math.sqrt(i.getPointCount())+1,1,l()));if((e>=4||t>=4)&&this.distanceMultipointMultipoint(n,i,r,s,e,t)<=this.m_maxSqrDistance)return 0}let t=this.m_maxSqrDistance;const y=[n],_=[i],D=this.swapGeometriesIfBGtA(y,_);D&&(this.m_env2DgeometryB=c(this.m_env2DgeometryA,this.m_env2DgeometryA=this.m_env2DgeometryB),m=c(o,o=m),d(r,s)),e(a,g((()=>{d(r,s),this.m_env2DgeometryB=c(this.m_env2DgeometryA,this.m_env2DgeometryA=this.m_env2DgeometryB)}),!D),!1);const p=y[0].getImpl(),v=_[0].getImpl(),N=p.getPointCount(),P=v.getPointCount(),I=P>1;let q=!1;const M=new u,x=new u;for(let e=0;e<N;e+=o){if(p.queryXY(e,M),I){const e=this.m_env2DgeometryB.sqrDistance(M);if(this.m_bIsNearCalc){if(e>t)continue;if(this.m_env2DgeometryB.sqrMaxMinDistance(M)<=t)return 0}else if(e>=t)continue}for(let n=0;n<P;n+=m){v.queryXY(n,x);const i=u.sqrDistance(M,x);if(this.m_bIsNearCalc){if(i<=t)return 0}else if(!(i>t||q&&i===t)&&(!q||i<t)&&(f(r,M,e,0),f(s,x,n,0),q=!0,t=i,0===t))return q?Math.sqrt(t):Number.POSITIVE_INFINITY}}return q?Math.sqrt(t):Number.POSITIVE_INFINITY}catch(y){a.error=y,a.hasError=!0}finally{t(a)}}distanceMultipointMultipath(e,t,i,r){let s=!!this.m_env2DgeometryA.isIntersecting(this.m_env2DgeometryB)&&t.getGeometryType()===n.enumPolygon;const o=t.querySegmentIterator();o.stripAttributes();const a=new _,c=new u;let h=this.m_maxSqrDistance;const l=e.getImpl(),g=l.getPointCount(),y=g>1;let D=!1;for(;o.nextPath();)for(;o.hasNextSegment();){const e=o.nextSegment();if(e.queryLooseEnvelope(a),y){const e=a.sqrDistanceEnvelope(this.m_env2DgeometryA,null,null);if(this.m_bIsNearCalc){if(e>h)continue}else if(e>h||D&&e===h)continue}for(let n=0;n<g;n++){if(l.queryXY(n,c),s&&0!==m(t,c,0))return f(i,c,-1,Number.NaN),f(r,c,n,0),0;{const e=a.sqrDistance(c);if(this.m_bIsNearCalc){if(e>h)continue}else if(e>h)continue}const u=e.getClosestCoordinate(c,!1),g=e.getCoord2D(u);c.subThis(g);const y=c.sqrLength();if(this.m_bIsNearCalc){if(y<=h)return 0}else if(!(y>h)&&(!D||y<h)&&(h=y,f(i,l.getXY(n),n,0),f(r,g,o.getStartPointIndex(),u),D=!0,0===h))return 0}s=!1}return D?Math.sqrt(h):Number.POSITIVE_INFINITY}distanceEnvelopeGeometry(e,t,i,r){switch(t.getGeometryType()){case n.enumPoint:return this.distancePointEnvelope(t,e,r,i);case n.enumMultiPoint:{this.m_env2DgeometryB=c(this.m_env2DgeometryA,this.m_env2DgeometryA=this.m_env2DgeometryB);const n=this.distanceMultipointMultipath(t,E(e),r,i);return this.m_env2DgeometryB=c(this.m_env2DgeometryA,this.m_env2DgeometryA=this.m_env2DgeometryB),n}case n.enumPolyline:case n.enumPolygon:return this.distanceMultipathMultipath(E(e),t,i,r);case n.enumEnvelope:return this.distanceEnvelopeEnvelope(e,t,i,r);default:return Number.NaN}}distanceEnvelopeEnvelope(e,t,n,i){n.t=Number.NaN,n.index=-1,i.t=Number.NaN,i.index=-1;const r=e.asEnvelope2D(),s=t.asEnvelope2D();return Math.sqrt(r.sqrDistanceEnvelope(s,n.outPoint,i.outPoint))}distanceMultipathGeometry(e,t,i,r){switch(t.getGeometryType()){case n.enumPoint:{this.m_env2DgeometryB=c(this.m_env2DgeometryA,this.m_env2DgeometryA=this.m_env2DgeometryB);const n=this.distancePointMultipath(t,e,r,i);return this.m_env2DgeometryB=c(this.m_env2DgeometryA,this.m_env2DgeometryA=this.m_env2DgeometryB),n}case n.enumMultiPoint:{this.m_env2DgeometryB=c(this.m_env2DgeometryA,this.m_env2DgeometryA=this.m_env2DgeometryB);const n=this.distanceMultipointMultipath(t,e,r,i);return this.m_env2DgeometryB=c(this.m_env2DgeometryA,this.m_env2DgeometryA=this.m_env2DgeometryB),n}case n.enumPolyline:case n.enumPolygon:return this.distanceMultipathMultipath(e,t,i,r);case n.enumEnvelope:return this.distanceMultipathMultipath(e,E(t),i,r);default:return Number.NaN}}distanceMultipathMultipath(n,i,r,o){const m={stack:[],error:void 0,hasError:!1};try{const t=[n],a=[i],u=this.swapGeometriesIfAGtB(t,a);u&&(this.m_env2DgeometryB=c(this.m_env2DgeometryA,this.m_env2DgeometryA=this.m_env2DgeometryB),d(r,o)),e(m,g((()=>{d(r,o),this.m_env2DgeometryB=c(this.m_env2DgeometryA,this.m_env2DgeometryA=this.m_env2DgeometryB)}),!u),!1);const y=t[0],D=a[0],p=y.querySegmentIterator();p.stripAttributes();const N=D.querySegmentIterator();if(N.stripAttributes(),this.m_bIsNearCalc&&this.m_env2DgeometryA.sqrMaxMinDistanceEnvelope(this.m_env2DgeometryB)<=this.m_maxSqrDistance)return 0;if(this.m_bIsNearCalc){const e=Math.trunc(h(Math.sqrt(y.getPointCount())+1,1,l())),t=Math.trunc(h(Math.sqrt(y.getPointCount())+1,1,l()));if(this.distanceMultipointMultipoint(y,D,r,o,e,t)<=this.m_maxSqrDistance)return 0}if(!!this.m_env2DgeometryA.isIntersecting(this.m_env2DgeometryB)){const e=v(),t=v();if(q(y,D,p,N,e,t))return P(r,e),P(o,t),0}const f=M(y),x=[],E=new s,b=new _,B=new _,S=new _;let A=this.m_maxSqrDistance,T=!0,C=!1;for(let e=0,n=f.length;e<n;++e){y.querySegment(f[e],E,!0);const t=E.get();if(t.queryEnvelope(b),!(b.sqrDistanceEnvelope(this.m_env2DgeometryB,null,null)>A)){if(this.m_bIsNearCalc&&b.sqrMaxDistanceEnvelope(this.m_env2DgeometryB)<=A)return 0;for(;N.nextPath();){if(this.progress_(),T)D.queryPathEnvelope(N.getPathIndex(),S),x[N.getPathIndex()]=S.clone();else if(b.sqrDistanceEnvelope(x[N.getPathIndex()],null,null)>A)continue;for(;N.hasNextSegment();){const n=N.nextSegment();if(n.queryEnvelope(B),b.sqrDistanceEnvelope(B,null,null)<=A){const i=!b.isIntersecting(B),s=[0],m=[0];let a=t.distance(n,i,s,m);if(a*=a,this.m_bIsNearCalc&&a<=this.m_maxSqrDistance)return 0;if(a<A||a===A&&f[e]<r.index){if(C=!0,I(r,t,f[e],s[0]),I(o,n,N.getStartPointIndex(),m[0]),0===a)return 0;A=a}}}}N.resetToFirstPath(),T=!1}}return C?Math.sqrt(A):Number.POSITIVE_INFINITY}catch(a){m.error=a,m.hasError=!0}finally{t(m)}}swapGeometriesIfAGtB(e,t){return i(e[0])>i(t[0])&&(t[0]=c(e[0],e[0]=t[0]),!0)}swapGeometriesIfBGtA(e,t){return this.swapGeometriesIfAGtB(t,e)}}export{b as D,v as m,M as s,q as w};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}