{"ast":null,"code":"import React,{useState}from\"react\";import{Button,FormControl,FormGroup,FormLabel}from\"react-bootstrap\";import\"./AiIntegration.css\";// Create this CSS file\nimport{GoogleGenerativeAI}from\"@google/generative-ai\";import{Loader}from'./Loader';//import { ChatGPT } from './AI'; // Assuming you have a ChatGPT component\n// Create this query function\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export function AIIntegrationPage(_ref){let{userKey,goToHomePage}=_ref;const[ingredients,setIngredients]=useState(\"\");const[country,setCountry]=useState(\"\");const[recipeGenerated,setRecipeGenerated]=useState(false);const[loading,setLoading]=useState(false);// type page = 'home' | 'Ai Page' | 'Recipe Page' | 'Map Page';\n// const [currentPage, setCurrentPage] = useState<page>('Ai Page');\nconst[recipe,setRecipe]=useState(null);function updateIngredients(event){setIngredients(event.target.value);}function updateCountry(event){setCountry(event.target.value);}async function handleSubmit(){setLoading(true);try{const apiKey=\"AIzaSyDR-VHD19VDVq_t8ORrz4SCctc5Z_Rc6uQ\";if(!apiKey){console.error(\"API key not found in environment variables.\");return;}const genAI=new GoogleGenerativeAI(apiKey);const model=genAI.getGenerativeModel({model:\"gemini-2.0-flash\"});const prompt=`Generate a MEDIEVAL recipe from ${country} using the following ingredients: ${ingredients}.\n    Format the response as valid JSON with the following keys and make sure its medieval with medieval cooking methods:\n    {\n        \"title\": \"Recipe title\",\n        \"country\": \"Country of origin\",\n      \"time\": \"Estimated preparation and cooking time\",\n      \"ingredients\": [\"List of ingredients with quantities\"],\n      \"instructions\": [\"Step 1\", \"Step 2\", \"Step 3\", ...],\n      \"macronutrients\": {\n        \"calories\": \"value\",\n        \"protein\": \"value\",\n        \"carbs\": \"value\",\n        \"fat\": \"value\"\n        \"nutrition\": \"Why protein, carbs, and fat are important to human diet and how this recipe provides them.\" \n      }\n    }\n      \n    Return only the JSON object without extra formatting.`;const result=await model.generateContent(prompt);const response=await result.response;const text=await response.text();// Await the text response\n// Ensure the response text is valid JSON\nconst jsonStartIndex=text.indexOf('{');const jsonEndIndex=text.lastIndexOf('}')+1;const jsonString=text.substring(jsonStartIndex,jsonEndIndex);const recipeData=JSON.parse(jsonString);setRecipe(recipeData);// Use the state setter\nsetRecipeGenerated(true);}catch(error){console.error(\"Error generating recipe:\",error);}finally{setLoading(false);// Stop loading\n}}return/*#__PURE__*/_jsxs(\"div\",{className:\"ai-integration-page\",children:[loading&&/*#__PURE__*/_jsx(Loader,{}),!loading&&!recipeGenerated?/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{className:\"header\",children:\"Get a Medieval European Recipe!\"}),/*#__PURE__*/_jsxs(FormGroup,{children:[/*#__PURE__*/_jsx(FormLabel,{className:\"text\",children:\"Enter Your Ingredients:\"}),/*#__PURE__*/_jsx(FormControl,{as:\"textarea\",rows:3,value:ingredients,onChange:updateIngredients,className:\"responsebox\"})]}),/*#__PURE__*/_jsxs(FormGroup,{children:[/*#__PURE__*/_jsx(FormLabel,{className:\"text\",children:\"Select European Country:\"}),/*#__PURE__*/_jsx(FormControl,{type:\"text\",value:country,onChange:updateCountry,className:\"countrybox\"})]}),/*#__PURE__*/_jsx(Button,{onClick:handleSubmit,className:\"submitAns\",children:\"Get Recipe\"}),/*#__PURE__*/_jsx(Button,{onClick:goToHomePage,className:\"submitAns\",children:\"Go Home\"})]}):/*#__PURE__*/_jsxs(\"div\",{className:\"recipe-container\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"recipe-title\",children:/*#__PURE__*/_jsx(\"strong\",{children:recipe===null||recipe===void 0?void 0:recipe.title})}),/*#__PURE__*/_jsxs(\"p\",{className:\"recipe-country\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Country:\"}),\" \",recipe===null||recipe===void 0?void 0:recipe.country]}),recipe&&/*#__PURE__*/_jsxs(\"p\",{className:\"recipe-time\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Time:\"}),\" \",recipe.time]}),/*#__PURE__*/_jsx(\"h3\",{children:\"Ingredients\"}),/*#__PURE__*/_jsx(\"ul\",{className:\"recipe-ingredients\",children:recipe===null||recipe===void 0?void 0:recipe.ingredients.map((item,index)=>/*#__PURE__*/_jsx(\"li\",{children:item},index))}),/*#__PURE__*/_jsx(\"h3\",{children:\"Instructions\"}),/*#__PURE__*/_jsx(\"ol\",{className:\"recipe-instructions\",children:recipe===null||recipe===void 0?void 0:recipe.instructions.map((step,index)=>/*#__PURE__*/_jsx(\"li\",{children:step},index))}),/*#__PURE__*/_jsx(\"h3\",{children:\"Macronutrients\"}),/*#__PURE__*/_jsxs(\"ul\",{className:\"recipe-macronutrients\",children:[/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Calories:\"}),\" \",recipe===null||recipe===void 0?void 0:recipe.macronutrients.calories]}),/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Protein:\"}),\" \",recipe===null||recipe===void 0?void 0:recipe.macronutrients.protein]}),/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Carbs:\"}),\" \",recipe===null||recipe===void 0?void 0:recipe.macronutrients.carbs]}),/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Fat:\"}),\" \",recipe===null||recipe===void 0?void 0:recipe.macronutrients.fat]}),/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Nutrition:\"}),\" \",recipe===null||recipe===void 0?void 0:recipe.macronutrients.nutrition]})]}),/*#__PURE__*/_jsx(Button,{onClick:goToHomePage,className:\"submitAns\",children:\"Go Home\"})]})]});}","map":{"version":3,"names":["React","useState","Button","FormControl","FormGroup","FormLabel","GoogleGenerativeAI","Loader","jsx","_jsx","jsxs","_jsxs","AIIntegrationPage","_ref","userKey","goToHomePage","ingredients","setIngredients","country","setCountry","recipeGenerated","setRecipeGenerated","loading","setLoading","recipe","setRecipe","updateIngredients","event","target","value","updateCountry","handleSubmit","apiKey","console","error","genAI","model","getGenerativeModel","prompt","result","generateContent","response","text","jsonStartIndex","indexOf","jsonEndIndex","lastIndexOf","jsonString","substring","recipeData","JSON","parse","className","children","as","rows","onChange","type","onClick","title","time","map","item","index","instructions","step","macronutrients","calories","protein","carbs","fat","nutrition"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/src/AiIntegration.tsx"],"sourcesContent":["import React, { JSX, useState } from \"react\";\r\nimport { Button, FormControl, FormGroup, FormLabel } from \"react-bootstrap\";\r\nimport \"./AiIntegration.css\"; // Create this CSS file\r\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\r\nimport App from \"./App\";\r\nimport { Loader } from './Loader';\r\n//import { ChatGPT } from './AI'; // Assuming you have a ChatGPT component\r\n // Create this query function\r\n\r\n interface AIIntegrationPageProps {\r\n  userKey: string;\r\n  goToHomePage: () => void;\r\n}\r\n\r\nexport function AIIntegrationPage({ userKey, goToHomePage }: AIIntegrationPageProps): JSX.Element {\r\n  const [ingredients, setIngredients] = useState<string>(\"\");\r\n  const [country, setCountry] = useState<string>(\"\");\r\n  const [recipeGenerated, setRecipeGenerated] = useState<boolean>(false);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  // type page = 'home' | 'Ai Page' | 'Recipe Page' | 'Map Page';\r\n  // const [currentPage, setCurrentPage] = useState<page>('Ai Page');\r\n  interface Recipe {\r\n    title: string;\r\n    country: string\r\n    time: string;\r\n    ingredients: string[];\r\n    instructions: string[];\r\n    macronutrients: {\r\n      calories: string;\r\n      protein: string;\r\n      carbs: string;\r\n      fat: string;\r\n      nutrition: string;\r\n    };\r\n  }\r\n\r\n\r\n  const [recipe, setRecipe] = useState<Recipe | null>(null);\r\n\r\n\r\n\r\n\r\n\r\n\r\n  function updateIngredients(event: React.ChangeEvent<HTMLInputElement>) {\r\n    setIngredients(event.target.value);\r\n  }\r\n\r\n  function updateCountry(event: React.ChangeEvent<HTMLInputElement>) {\r\n    setCountry(event.target.value);\r\n  }\r\n\r\n  async function handleSubmit() {\r\n    setLoading(true);\r\n    try {\r\n      const apiKey = \"AIzaSyDR-VHD19VDVq_t8ORrz4SCctc5Z_Rc6uQ\";\r\n      if (!apiKey) {\r\n        console.error(\"API key not found in environment variables.\");\r\n        return;\r\n      }\r\n\r\n      const genAI = new GoogleGenerativeAI(apiKey);\r\n      const model = genAI.getGenerativeModel({ model: \"gemini-2.0-flash\" });\r\n      const prompt = `Generate a MEDIEVAL recipe from ${country} using the following ingredients: ${ingredients}.\r\n    Format the response as valid JSON with the following keys and make sure its medieval with medieval cooking methods:\r\n    {\r\n        \"title\": \"Recipe title\",\r\n        \"country\": \"Country of origin\",\r\n      \"time\": \"Estimated preparation and cooking time\",\r\n      \"ingredients\": [\"List of ingredients with quantities\"],\r\n      \"instructions\": [\"Step 1\", \"Step 2\", \"Step 3\", ...],\r\n      \"macronutrients\": {\r\n        \"calories\": \"value\",\r\n        \"protein\": \"value\",\r\n        \"carbs\": \"value\",\r\n        \"fat\": \"value\"\r\n        \"nutrition\": \"Why protein, carbs, and fat are important to human diet and how this recipe provides them.\" \r\n      }\r\n    }\r\n      \r\n    Return only the JSON object without extra formatting.`;\r\n\r\n      const result = await model.generateContent(prompt);\r\n      const response = await result.response;\r\n      const text = await response.text(); // Await the text response\r\n\r\n      // Ensure the response text is valid JSON\r\n      const jsonStartIndex = text.indexOf('{');\r\n      const jsonEndIndex = text.lastIndexOf('}') + 1;\r\n      const jsonString = text.substring(jsonStartIndex, jsonEndIndex);\r\n\r\n      const recipeData = JSON.parse(jsonString);\r\n  \r\n      setRecipe(recipeData); // Use the state setter\r\n      setRecipeGenerated(true);\r\n    } catch (error) {\r\n        console.error(\"Error generating recipe:\", error);\r\n      } finally {\r\n        setLoading(false); // Stop loading\r\n      }\r\n  }\r\n  return (\r\n    <div className=\"ai-integration-page\">\r\n        {loading && <Loader />}\r\n    {!loading && !recipeGenerated ? (\r\n      <div >\r\n        <h2 className=\"header\">Get a Medieval European Recipe!</h2>\r\n        <FormGroup>\r\n          <FormLabel className=\"text\">Enter Your Ingredients:</FormLabel>\r\n          <FormControl\r\n            as=\"textarea\"\r\n            rows={3}\r\n            value={ingredients}\r\n            onChange={updateIngredients}\r\n            className=\"responsebox\"\r\n          />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <FormLabel className=\"text\">Select European Country:</FormLabel>\r\n        <FormControl\r\n          type=\"text\"\r\n          value={country}\r\n          onChange={updateCountry}\r\n          className=\"countrybox\"\r\n        />\r\n        </FormGroup>\r\n        <Button onClick={handleSubmit} className=\"submitAns\">\r\n          Get Recipe\r\n        </Button>\r\n        <Button onClick={goToHomePage} className=\"submitAns\">\r\n          Go Home\r\n        </Button>\r\n      </div>\r\n    ) : (\r\n      <div className=\"recipe-container\">\r\n        <h2 className=\"recipe-title\"><strong>{recipe?.title}</strong></h2>\r\n        <p className=\"recipe-country\"><strong>Country:</strong> {recipe?.country}</p>\r\n        \r\n        {recipe && <p className=\"recipe-time\"><strong>Time:</strong> {recipe.time}</p>}\r\n        \r\n        <h3>Ingredients</h3>\r\n        <ul className=\"recipe-ingredients\">\r\n          {recipe?.ingredients.map((item, index) => (\r\n            <li key={index}>{item}</li>\r\n          ))}\r\n        </ul>\r\n  \r\n        <h3>Instructions</h3>\r\n        <ol className=\"recipe-instructions\">\r\n          {recipe?.instructions.map((step, index) => (\r\n            <li key={index}>{step}</li>\r\n          ))}\r\n        </ol>\r\n  \r\n        <h3>Macronutrients</h3>\r\n        <ul className=\"recipe-macronutrients\">\r\n          <li><strong>Calories:</strong> {recipe?.macronutrients.calories}</li>\r\n          <li><strong>Protein:</strong> {recipe?.macronutrients.protein}</li>\r\n          <li><strong>Carbs:</strong> {recipe?.macronutrients.carbs}</li>\r\n          <li><strong>Fat:</strong> {recipe?.macronutrients.fat}</li>\r\n          <li><strong>Nutrition:</strong> {recipe?.macronutrients.nutrition}</li>\r\n        </ul>\r\n          \r\n        <Button onClick={goToHomePage} className=\"submitAns\">\r\n          Go Home\r\n        </Button>\r\n      </div>\r\n    )}\r\n  </div>\r\n  );\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}