{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport t from \"../../core/Error.js\";\nimport \"../../core/has.js\";\nimport e from \"../../core/Logger.js\";\nimport { abortMaybe as i } from \"../../core/maybe.js\";\nimport { isAbortError as r } from \"../../core/promiseUtils.js\";\nimport { signal as s } from \"../../core/signal.js\";\nimport { getTextureCompressionWorker as o, isCompressible as a } from \"../support/TextureCompressionHelper.js\";\nimport { checkWebGLError as n } from \"./checkWebGLError.js\";\nimport { TextureType as l, ResourceType as p, CompressedTextureFormat as m, TextureSamplingMode as h } from \"./enums.js\";\nimport { GLObjectType as _ } from \"./GLObjectType.js\";\nimport { estimateMemory as d } from \"./TextureDescriptor.js\";\nimport { isCompressedData as c, deriveInternalFormat as u, isTexImageSource as g, is3DTarget as T, validateTexture as x, isCompressedFormat as E, getDimensions as M, calcMipmapLevels as A, isSizedPixelFormat as I } from \"./textureUtils.js\";\nimport { ValidatedTextureDescriptor as f } from \"./ValidatedTextureDescriptor.js\";\nconst w = null,\n  D = () => e.getLogger(\"esri/views/webgl/Texture\");\nlet R = class e {\n  constructor(e) {\n    let i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    if (this.type = _.Texture, this._glName = null, this._samplingModeDirty = !1, this._wrapModeDirty = !1, this._wasImmutablyAllocated = !1, this._compressionAbortController = s(null), \"context\" in e) this._descriptor = e, r = i;else {\n      const r = f.validate(e, i);\n      if (!r) throw new t(\"Texture descriptor invalid\");\n      this._descriptor = r;\n    }\n    this._descriptor.target === l.TEXTURE_CUBE_MAP ? this._setDataCubeMap(r) : this.setData(r);\n  }\n  get glName() {\n    return this._glName;\n  }\n  get descriptor() {\n    return this._descriptor;\n  }\n  get usedMemory() {\n    return d(this._descriptor);\n  }\n  get cachedMemory() {\n    return this.usedMemory;\n  }\n  get isDirty() {\n    return this._samplingModeDirty || this._wrapModeDirty;\n  }\n  get isCompressing() {\n    return null !== this._compressionAbortController.value;\n  }\n  dispose() {\n    this.abortCompression(), this._glName && this._descriptor.context.instanceCounter.decrement(p.Texture, this), this._descriptor.context.gl && this._glName && (this._descriptor.context.unbindTexture(this), this._descriptor.context.gl.deleteTexture(this._glName), this._glName = null);\n  }\n  release() {\n    this.dispose();\n  }\n  resize(e, i) {\n    const r = this._descriptor;\n    if (r.width !== e || r.height !== i) {\n      if (this._wasImmutablyAllocated) throw new t(\"Immutable textures can't be resized!\");\n      r.width = e, r.height = i, this._descriptor.target === l.TEXTURE_CUBE_MAP ? this._setDataCubeMap(null) : this.setData(null);\n    }\n  }\n  enableCompression(t) {\n    this._descriptor.shouldCompress = t;\n  }\n  setData(t) {\n    this.abortCompression(), !c(t) && this._descriptor.internalFormat && this._descriptor.internalFormat in m && (this._descriptor.internalFormat = void 0), this._setData(t), o() && !c(t) && a(t) && this._descriptor.shouldCompress && this.compressOnWorker(t);\n  }\n  updateData(i, r, s, o, a, n) {\n    let l = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n    n || D().error(\"An attempt to use uninitialized data!\"), this._glName || D().error(\"An attempt to update uninitialized texture!\");\n    const p = this._descriptor;\n    p.internalFormat = u(p);\n    const {\n      context: m,\n      pixelFormat: h,\n      dataType: _,\n      target: d,\n      isImmutable: T\n    } = p;\n    if (T && !this._wasImmutablyAllocated) throw new t(\"Cannot update immutable texture before allocation!\");\n    const x = m.bindTexture(this, e.TEXTURE_UNIT_FOR_UPDATES, !0);\n    (r < 0 || s < 0 || r + o > p.width || s + a > p.height) && D().error(\"An attempt to update out of bounds of the texture!\"), this._configurePixelStorage();\n    const {\n      gl: E\n    } = m;\n    l && (o && a || D().warn(\"Must pass width and height if `UNPACK_SKIP_ROWS` is used\"), E.pixelStorei(E.UNPACK_SKIP_ROWS, l)), g(n) ? E.texSubImage2D(d, i, r, s, o, a, h, _, n) : c(n) ? E.compressedTexSubImage2D(d, i, r, s, o, a, p.internalFormat, n.levels[i]) : E.texSubImage2D(d, i, r, s, o, a, h, _, n), l && E.pixelStorei(E.UNPACK_SKIP_ROWS, 0), m.bindTexture(x, e.TEXTURE_UNIT_FOR_UPDATES);\n  }\n  updateData3D(i, r, s, o, a, n, l, p) {\n    p || D().error(\"An attempt to use uninitialized data!\"), this._glName || D().error(\"An attempt to update an uninitialized texture!\");\n    const m = this._descriptor;\n    m.internalFormat = u(m);\n    const {\n      context: h,\n      pixelFormat: _,\n      dataType: d,\n      isImmutable: g,\n      target: x\n    } = m;\n    if (g && !this._wasImmutablyAllocated) throw new t(\"Cannot update immutable texture before allocation!\");\n    T(x) || D().warn(\"Attempting to set 3D texture data on a non-3D texture\");\n    const E = h.bindTexture(this, e.TEXTURE_UNIT_FOR_UPDATES);\n    h.setActiveTexture(e.TEXTURE_UNIT_FOR_UPDATES), (r < 0 || s < 0 || o < 0 || r + a > m.width || s + n > m.height || o + l > m.depth) && D().error(\"An attempt to update out of bounds of the texture!\"), this._configurePixelStorage();\n    const {\n      gl: M\n    } = h;\n    if (c(p)) p = p.levels[i], M.compressedTexSubImage3D(x, i, r, s, o, a, n, l, m.internalFormat, p);else {\n      const t = p;\n      M.texSubImage3D(x, i, r, s, o, a, n, l, _, d, t);\n    }\n    h.bindTexture(E, e.TEXTURE_UNIT_FOR_UPDATES);\n  }\n  generateMipmap() {\n    const i = this._descriptor;\n    if (0 === i.width || 0 === i.height) return;\n    if (!i.hasMipmap) {\n      if (this._wasImmutablyAllocated) throw new t(\"Cannot add mipmaps to immutable texture after allocation\");\n      i.hasMipmap = !0, this._samplingModeDirty = !0, x(i);\n    }\n    i.samplingMode === h.LINEAR ? (this._samplingModeDirty = !0, i.samplingMode = h.LINEAR_MIPMAP_NEAREST) : i.samplingMode === h.NEAREST && (this._samplingModeDirty = !0, i.samplingMode = h.NEAREST_MIPMAP_NEAREST);\n    const r = this._descriptor.context.bindTexture(this, e.TEXTURE_UNIT_FOR_UPDATES);\n    this._descriptor.context.setActiveTexture(e.TEXTURE_UNIT_FOR_UPDATES), this._descriptor.context.gl.generateMipmap(i.target), this._descriptor.context.bindTexture(r, e.TEXTURE_UNIT_FOR_UPDATES);\n  }\n  clearMipmap() {\n    const e = this._descriptor;\n    if (e.hasMipmap) {\n      if (this._wasImmutablyAllocated) throw new t(\"Cannot delete mipmaps to immutable texture after allocation\");\n      e.hasMipmap = !1, this._samplingModeDirty = !0, x(e);\n    }\n    e.samplingMode === h.LINEAR_MIPMAP_NEAREST ? (this._samplingModeDirty = !0, e.samplingMode = h.LINEAR) : e.samplingMode === h.NEAREST_MIPMAP_NEAREST && (this._samplingModeDirty = !0, e.samplingMode = h.NEAREST);\n  }\n  setSamplingMode(t) {\n    t !== this._descriptor.samplingMode && (this._descriptor.samplingMode = t, this._samplingModeDirty = !0);\n  }\n  setWrapMode(t) {\n    t !== this._descriptor.wrapMode && (this._descriptor.wrapMode = t, x(this._descriptor), this._wrapModeDirty = !0);\n  }\n  applyChanges() {\n    this._samplingModeDirty && (this._applySamplingMode(), this._samplingModeDirty = !1), this._wrapModeDirty && (this._applyWrapMode(), this._wrapModeDirty = !1);\n  }\n  abortCompression() {\n    this.isCompressing && (this._compressionAbortController.value = i(this._compressionAbortController.value));\n  }\n  _setData(i, r) {\n    const s = this._descriptor,\n      o = s.context?.gl;\n    if (!o) return;\n    n(o), this._glName || (this._glName = o.createTexture(), this._glName && s.context.instanceCounter.increment(p.Texture, this)), x(s);\n    const a = s.context.bindTexture(this, e.TEXTURE_UNIT_FOR_UPDATES);\n    s.context.setActiveTexture(e.TEXTURE_UNIT_FOR_UPDATES), this._configurePixelStorage(), n(o);\n    const l = r ?? s.target,\n      m = T(l);\n    if (g(i)) this._setDataFromTexImageSource(i, l);else {\n      const {\n        width: e,\n        height: r,\n        depth: a\n      } = s;\n      if (null == e || null == r) throw new t(\"Width and height must be specified!\");\n      if (m && null == a) throw new t(\"Depth must be specified!\");\n      if (s.internalFormat = u(s), s.isImmutable && !this._wasImmutablyAllocated && this._texStorage(l, s.internalFormat, s.hasMipmap, e, r, a), c(i)) {\n        if (!E(s.internalFormat)) throw new t(\"Attempting to use compressed data with an uncompressed format!\");\n        this._setDataFromCompressedSource(i, s.internalFormat, l);\n      } else this._texImage(l, 0, s.internalFormat, e, r, a, i), n(o), s.hasMipmap && this.generateMipmap();\n    }\n    this._applySamplingMode(), this._applyWrapMode(), this._applyAnisotropicFilteringParameters(), n(o), s.context.bindTexture(a, e.TEXTURE_UNIT_FOR_UPDATES);\n  }\n  _setDataCubeMap() {\n    let t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    for (let e = l.TEXTURE_CUBE_MAP_POSITIVE_X; e <= l.TEXTURE_CUBE_MAP_NEGATIVE_Z; e++) this._setData(t, e);\n  }\n  _configurePixelStorage() {\n    const t = this._descriptor.context.gl,\n      {\n        unpackAlignment: e,\n        flipped: i,\n        preMultiplyAlpha: r\n      } = this._descriptor;\n    t.pixelStorei(t.UNPACK_ALIGNMENT, e), t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL, i ? 1 : 0), t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL, r ? 1 : 0);\n  }\n  _setDataFromTexImageSource(t, e) {\n    const {\n        gl: i\n      } = this._descriptor.context,\n      r = this._descriptor;\n    r.internalFormat = u(r);\n    const s = T(e),\n      {\n        width: o,\n        height: a,\n        depth: l\n      } = M(t);\n    r.width && r.height, r.width || (r.width = o), r.height || (r.height = a), s && r.depth, s && (r.depth = l), r.isImmutable && !this._wasImmutablyAllocated && this._texStorage(e, r.internalFormat, r.hasMipmap, o, a, l), this._texImage(e, 0, r.internalFormat, o, a, l, t), n(i), r.hasMipmap && (this.generateMipmap(), n(i));\n  }\n  _setDataFromCompressedSource(t, e, i) {\n    const r = this._descriptor,\n      {\n        width: s,\n        height: o,\n        depth: a\n      } = r,\n      n = t.levels,\n      l = A(i, s, o, a),\n      p = Math.min(l, n.length) - 1;\n    this._descriptor.context.gl.texParameteri(r.target, r.context.gl.TEXTURE_MAX_LEVEL, p), this._forEachMipmapLevel((t, r, s, o) => {\n      const a = n[Math.min(t, n.length - 1)];\n      this._compressedTexImage(i, t, e, r, s, o, a);\n    }, p);\n  }\n  _texStorage(e, i, r, s, o, a) {\n    const {\n      gl: n\n    } = this._descriptor.context;\n    if (!I(i)) throw new t(\"Immutable textures must have a sized internal format\");\n    if (!this._descriptor.isImmutable) return;\n    const l = r ? A(e, s, o, a) : 1;\n    if (T(e)) {\n      if (null == a) throw new t(\"Missing depth dimension for 3D texture upload\");\n      n.texStorage3D(e, l, i, s, o, a);\n    } else n.texStorage2D(e, l, i, s, o);\n    this._wasImmutablyAllocated = !0;\n  }\n  _texImage(e, i, r, s, o, a, n) {\n    const l = this._descriptor.context.gl,\n      p = T(e),\n      {\n        isImmutable: m,\n        pixelFormat: h,\n        dataType: _\n      } = this._descriptor;\n    if (m) {\n      if (null != n) {\n        const r = n;\n        if (p) {\n          if (null == a) throw new t(\"Missing depth dimension for 3D texture upload\");\n          l.texSubImage3D(e, i, 0, 0, 0, s, o, a, h, _, r);\n        } else l.texSubImage2D(e, i, 0, 0, s, o, h, _, r);\n      }\n    } else {\n      const m = n;\n      if (p) {\n        if (null == a) throw new t(\"Missing depth dimension for 3D texture upload\");\n        l.texImage3D(e, i, r, s, o, a, 0, h, _, m);\n      } else l.texImage2D(e, i, r, s, o, 0, h, _, m);\n    }\n  }\n  _compressedTexImage(e, i, r, s, o, a, n) {\n    const l = this._descriptor.context.gl,\n      p = T(e);\n    if (this._descriptor.isImmutable) {\n      if (null != n) if (p) {\n        if (null == a) throw new t(\"Missing depth dimension for 3D texture upload\");\n        l.compressedTexSubImage3D(e, i, 0, 0, 0, s, o, a, r, n);\n      } else l.compressedTexSubImage2D(e, i, 0, 0, s, o, r, n);\n    } else if (p) {\n      if (null == a) throw new t(\"Missing depth dimension for 3D texture upload\");\n      l.compressedTexImage3D(e, i, r, s, o, a, 0, n);\n    } else l.compressedTexImage2D(e, i, r, s, o, 0, n);\n  }\n  async compressOnWorker(t) {\n    const e = this._descriptor.context?.gl.getExtension(\"WEBGL_compressed_texture_etc\"),\n      i = this._descriptor.context?.gl.getExtension(\"WEBGL_compressed_texture_s3tc\"),\n      s = o();\n    if (s && (e || i)) {\n      const o = new AbortController();\n      this._compressionAbortController.value = o;\n      const a = {\n        data: await createImageBitmap(t),\n        flipped: this.descriptor.flipped,\n        width: t.width,\n        height: t.height,\n        hasMipmap: this._descriptor.hasMipmap,\n        hasETC: !!e,\n        hasS3TC: !!i\n      };\n      s.invoke(a, this._compressionAbortController.value.signal).then(t => {\n        t && this.isCompressing && this.glName && (this._descriptor.internalFormat = t.internalFormat, this._setData(t.compressedTexture)), o === this._compressionAbortController.value && (this._compressionAbortController.value = null);\n      }).catch(t => {\n        r(t) || o !== this._compressionAbortController.value || (this._compressionAbortController.value = null);\n      });\n    }\n  }\n  _forEachMipmapLevel(e) {\n    let i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1 / 0;\n    let {\n      width: r,\n      height: s,\n      depth: o,\n      hasMipmap: a,\n      target: n\n    } = this._descriptor;\n    const p = n === l.TEXTURE_3D;\n    if (null == r || null == s || p && null == o) throw new t(\"Missing texture dimensions for mipmap calculation\");\n    for (let t = 0; e(t, r, s, o), a && (1 !== r || 1 !== s || p && 1 !== o) && !(t >= i); ++t) r = Math.max(1, r >> 1), s = Math.max(1, s >> 1), p && (o = Math.max(1, o >> 1));\n  }\n  _applySamplingMode() {\n    const t = this._descriptor,\n      e = t.context?.gl;\n    let i = t.samplingMode,\n      r = t.samplingMode;\n    i === h.LINEAR_MIPMAP_NEAREST || i === h.LINEAR_MIPMAP_LINEAR ? (i = h.LINEAR, t.hasMipmap || (r = h.LINEAR)) : i !== h.NEAREST_MIPMAP_NEAREST && i !== h.NEAREST_MIPMAP_LINEAR || (i = h.NEAREST, t.hasMipmap || (r = h.NEAREST)), e.texParameteri(t.target, e.TEXTURE_MAG_FILTER, i), e.texParameteri(t.target, e.TEXTURE_MIN_FILTER, r);\n  }\n  _applyWrapMode() {\n    const t = this._descriptor,\n      e = t.context?.gl;\n    \"number\" == typeof t.wrapMode ? (e.texParameteri(t.target, e.TEXTURE_WRAP_S, t.wrapMode), e.texParameteri(t.target, e.TEXTURE_WRAP_T, t.wrapMode)) : (e.texParameteri(t.target, e.TEXTURE_WRAP_S, t.wrapMode.s), e.texParameteri(t.target, e.TEXTURE_WRAP_T, t.wrapMode.t));\n  }\n  _applyAnisotropicFilteringParameters() {\n    const t = this._descriptor,\n      e = t.context.capabilities.textureFilterAnisotropic;\n    if (!e) return;\n    t.context.gl.texParameterf(t.target, e.TEXTURE_MAX_ANISOTROPY, t.maxAnisotropy ?? 1);\n  }\n};\nR.TEXTURE_UNIT_FOR_UPDATES = 0;\nexport { R as Texture, w as tracer };","map":{"version":3,"names":["t","e","abortMaybe","i","isAbortError","r","signal","s","getTextureCompressionWorker","o","isCompressible","a","checkWebGLError","n","TextureType","l","ResourceType","p","CompressedTextureFormat","m","TextureSamplingMode","h","GLObjectType","_","estimateMemory","d","isCompressedData","c","deriveInternalFormat","u","isTexImageSource","g","is3DTarget","T","validateTexture","x","isCompressedFormat","E","getDimensions","M","calcMipmapLevels","A","isSizedPixelFormat","I","ValidatedTextureDescriptor","f","w","D","getLogger","R","constructor","arguments","length","undefined","type","Texture","_glName","_samplingModeDirty","_wrapModeDirty","_wasImmutablyAllocated","_compressionAbortController","_descriptor","validate","target","TEXTURE_CUBE_MAP","_setDataCubeMap","setData","glName","descriptor","usedMemory","cachedMemory","isDirty","isCompressing","value","dispose","abortCompression","context","instanceCounter","decrement","gl","unbindTexture","deleteTexture","release","resize","width","height","enableCompression","shouldCompress","internalFormat","_setData","compressOnWorker","updateData","error","pixelFormat","dataType","isImmutable","bindTexture","TEXTURE_UNIT_FOR_UPDATES","_configurePixelStorage","warn","pixelStorei","UNPACK_SKIP_ROWS","texSubImage2D","compressedTexSubImage2D","levels","updateData3D","setActiveTexture","depth","compressedTexSubImage3D","texSubImage3D","generateMipmap","hasMipmap","samplingMode","LINEAR","LINEAR_MIPMAP_NEAREST","NEAREST","NEAREST_MIPMAP_NEAREST","clearMipmap","setSamplingMode","setWrapMode","wrapMode","applyChanges","_applySamplingMode","_applyWrapMode","createTexture","increment","_setDataFromTexImageSource","_texStorage","_setDataFromCompressedSource","_texImage","_applyAnisotropicFilteringParameters","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_Z","unpackAlignment","flipped","preMultiplyAlpha","UNPACK_ALIGNMENT","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","Math","min","texParameteri","TEXTURE_MAX_LEVEL","_forEachMipmapLevel","_compressedTexImage","texStorage3D","texStorage2D","texImage3D","texImage2D","compressedTexImage3D","compressedTexImage2D","getExtension","AbortController","data","createImageBitmap","hasETC","hasS3TC","invoke","then","compressedTexture","catch","TEXTURE_3D","max","LINEAR_MIPMAP_LINEAR","NEAREST_MIPMAP_LINEAR","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","capabilities","textureFilterAnisotropic","texParameterf","TEXTURE_MAX_ANISOTROPY","maxAnisotropy","tracer"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/node_modules/@arcgis/core/views/webgl/Texture.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport t from\"../../core/Error.js\";import\"../../core/has.js\";import e from\"../../core/Logger.js\";import{abortMaybe as i}from\"../../core/maybe.js\";import{isAbortError as r}from\"../../core/promiseUtils.js\";import{signal as s}from\"../../core/signal.js\";import{getTextureCompressionWorker as o,isCompressible as a}from\"../support/TextureCompressionHelper.js\";import{checkWebGLError as n}from\"./checkWebGLError.js\";import{TextureType as l,ResourceType as p,CompressedTextureFormat as m,TextureSamplingMode as h}from\"./enums.js\";import{GLObjectType as _}from\"./GLObjectType.js\";import{estimateMemory as d}from\"./TextureDescriptor.js\";import{isCompressedData as c,deriveInternalFormat as u,isTexImageSource as g,is3DTarget as T,validateTexture as x,isCompressedFormat as E,getDimensions as M,calcMipmapLevels as A,isSizedPixelFormat as I}from\"./textureUtils.js\";import{ValidatedTextureDescriptor as f}from\"./ValidatedTextureDescriptor.js\";const w=null,D=()=>e.getLogger(\"esri/views/webgl/Texture\");let R=class e{constructor(e,i=null,r=null){if(this.type=_.Texture,this._glName=null,this._samplingModeDirty=!1,this._wrapModeDirty=!1,this._wasImmutablyAllocated=!1,this._compressionAbortController=s(null),\"context\"in e)this._descriptor=e,r=i;else{const r=f.validate(e,i);if(!r)throw new t(\"Texture descriptor invalid\");this._descriptor=r}this._descriptor.target===l.TEXTURE_CUBE_MAP?this._setDataCubeMap(r):this.setData(r)}get glName(){return this._glName}get descriptor(){return this._descriptor}get usedMemory(){return d(this._descriptor)}get cachedMemory(){return this.usedMemory}get isDirty(){return this._samplingModeDirty||this._wrapModeDirty}get isCompressing(){return null!==this._compressionAbortController.value}dispose(){this.abortCompression(),this._glName&&this._descriptor.context.instanceCounter.decrement(p.Texture,this),this._descriptor.context.gl&&this._glName&&(this._descriptor.context.unbindTexture(this),this._descriptor.context.gl.deleteTexture(this._glName),this._glName=null)}release(){this.dispose()}resize(e,i){const r=this._descriptor;if(r.width!==e||r.height!==i){if(this._wasImmutablyAllocated)throw new t(\"Immutable textures can't be resized!\");r.width=e,r.height=i,this._descriptor.target===l.TEXTURE_CUBE_MAP?this._setDataCubeMap(null):this.setData(null)}}enableCompression(t){this._descriptor.shouldCompress=t}setData(t){this.abortCompression(),!c(t)&&this._descriptor.internalFormat&&this._descriptor.internalFormat in m&&(this._descriptor.internalFormat=void 0),this._setData(t),o()&&!c(t)&&a(t)&&this._descriptor.shouldCompress&&this.compressOnWorker(t)}updateData(i,r,s,o,a,n,l=0){n||D().error(\"An attempt to use uninitialized data!\"),this._glName||D().error(\"An attempt to update uninitialized texture!\");const p=this._descriptor;p.internalFormat=u(p);const{context:m,pixelFormat:h,dataType:_,target:d,isImmutable:T}=p;if(T&&!this._wasImmutablyAllocated)throw new t(\"Cannot update immutable texture before allocation!\");const x=m.bindTexture(this,e.TEXTURE_UNIT_FOR_UPDATES,!0);(r<0||s<0||r+o>p.width||s+a>p.height)&&D().error(\"An attempt to update out of bounds of the texture!\"),this._configurePixelStorage();const{gl:E}=m;l&&(o&&a||D().warn(\"Must pass width and height if `UNPACK_SKIP_ROWS` is used\"),E.pixelStorei(E.UNPACK_SKIP_ROWS,l)),g(n)?E.texSubImage2D(d,i,r,s,o,a,h,_,n):c(n)?E.compressedTexSubImage2D(d,i,r,s,o,a,p.internalFormat,n.levels[i]):E.texSubImage2D(d,i,r,s,o,a,h,_,n),l&&E.pixelStorei(E.UNPACK_SKIP_ROWS,0),m.bindTexture(x,e.TEXTURE_UNIT_FOR_UPDATES)}updateData3D(i,r,s,o,a,n,l,p){p||D().error(\"An attempt to use uninitialized data!\"),this._glName||D().error(\"An attempt to update an uninitialized texture!\");const m=this._descriptor;m.internalFormat=u(m);const{context:h,pixelFormat:_,dataType:d,isImmutable:g,target:x}=m;if(g&&!this._wasImmutablyAllocated)throw new t(\"Cannot update immutable texture before allocation!\");T(x)||D().warn(\"Attempting to set 3D texture data on a non-3D texture\");const E=h.bindTexture(this,e.TEXTURE_UNIT_FOR_UPDATES);h.setActiveTexture(e.TEXTURE_UNIT_FOR_UPDATES),(r<0||s<0||o<0||r+a>m.width||s+n>m.height||o+l>m.depth)&&D().error(\"An attempt to update out of bounds of the texture!\"),this._configurePixelStorage();const{gl:M}=h;if(c(p))p=p.levels[i],M.compressedTexSubImage3D(x,i,r,s,o,a,n,l,m.internalFormat,p);else{const t=p;M.texSubImage3D(x,i,r,s,o,a,n,l,_,d,t)}h.bindTexture(E,e.TEXTURE_UNIT_FOR_UPDATES)}generateMipmap(){const i=this._descriptor;if(0===i.width||0===i.height)return;if(!i.hasMipmap){if(this._wasImmutablyAllocated)throw new t(\"Cannot add mipmaps to immutable texture after allocation\");i.hasMipmap=!0,this._samplingModeDirty=!0,x(i)}i.samplingMode===h.LINEAR?(this._samplingModeDirty=!0,i.samplingMode=h.LINEAR_MIPMAP_NEAREST):i.samplingMode===h.NEAREST&&(this._samplingModeDirty=!0,i.samplingMode=h.NEAREST_MIPMAP_NEAREST);const r=this._descriptor.context.bindTexture(this,e.TEXTURE_UNIT_FOR_UPDATES);this._descriptor.context.setActiveTexture(e.TEXTURE_UNIT_FOR_UPDATES),this._descriptor.context.gl.generateMipmap(i.target),this._descriptor.context.bindTexture(r,e.TEXTURE_UNIT_FOR_UPDATES)}clearMipmap(){const e=this._descriptor;if(e.hasMipmap){if(this._wasImmutablyAllocated)throw new t(\"Cannot delete mipmaps to immutable texture after allocation\");e.hasMipmap=!1,this._samplingModeDirty=!0,x(e)}e.samplingMode===h.LINEAR_MIPMAP_NEAREST?(this._samplingModeDirty=!0,e.samplingMode=h.LINEAR):e.samplingMode===h.NEAREST_MIPMAP_NEAREST&&(this._samplingModeDirty=!0,e.samplingMode=h.NEAREST)}setSamplingMode(t){t!==this._descriptor.samplingMode&&(this._descriptor.samplingMode=t,this._samplingModeDirty=!0)}setWrapMode(t){t!==this._descriptor.wrapMode&&(this._descriptor.wrapMode=t,x(this._descriptor),this._wrapModeDirty=!0)}applyChanges(){this._samplingModeDirty&&(this._applySamplingMode(),this._samplingModeDirty=!1),this._wrapModeDirty&&(this._applyWrapMode(),this._wrapModeDirty=!1)}abortCompression(){this.isCompressing&&(this._compressionAbortController.value=i(this._compressionAbortController.value))}_setData(i,r){const s=this._descriptor,o=s.context?.gl;if(!o)return;n(o),this._glName||(this._glName=o.createTexture(),this._glName&&s.context.instanceCounter.increment(p.Texture,this)),x(s);const a=s.context.bindTexture(this,e.TEXTURE_UNIT_FOR_UPDATES);s.context.setActiveTexture(e.TEXTURE_UNIT_FOR_UPDATES),this._configurePixelStorage(),n(o);const l=r??s.target,m=T(l);if(g(i))this._setDataFromTexImageSource(i,l);else{const{width:e,height:r,depth:a}=s;if(null==e||null==r)throw new t(\"Width and height must be specified!\");if(m&&null==a)throw new t(\"Depth must be specified!\");if(s.internalFormat=u(s),s.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(l,s.internalFormat,s.hasMipmap,e,r,a),c(i)){if(!E(s.internalFormat))throw new t(\"Attempting to use compressed data with an uncompressed format!\");this._setDataFromCompressedSource(i,s.internalFormat,l)}else this._texImage(l,0,s.internalFormat,e,r,a,i),n(o),s.hasMipmap&&this.generateMipmap()}this._applySamplingMode(),this._applyWrapMode(),this._applyAnisotropicFilteringParameters(),n(o),s.context.bindTexture(a,e.TEXTURE_UNIT_FOR_UPDATES)}_setDataCubeMap(t=null){for(let e=l.TEXTURE_CUBE_MAP_POSITIVE_X;e<=l.TEXTURE_CUBE_MAP_NEGATIVE_Z;e++)this._setData(t,e)}_configurePixelStorage(){const t=this._descriptor.context.gl,{unpackAlignment:e,flipped:i,preMultiplyAlpha:r}=this._descriptor;t.pixelStorei(t.UNPACK_ALIGNMENT,e),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,i?1:0),t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,r?1:0)}_setDataFromTexImageSource(t,e){const{gl:i}=this._descriptor.context,r=this._descriptor;r.internalFormat=u(r);const s=T(e),{width:o,height:a,depth:l}=M(t);r.width&&r.height,r.width||(r.width=o),r.height||(r.height=a),s&&r.depth,s&&(r.depth=l),r.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(e,r.internalFormat,r.hasMipmap,o,a,l),this._texImage(e,0,r.internalFormat,o,a,l,t),n(i),r.hasMipmap&&(this.generateMipmap(),n(i))}_setDataFromCompressedSource(t,e,i){const r=this._descriptor,{width:s,height:o,depth:a}=r,n=t.levels,l=A(i,s,o,a),p=Math.min(l,n.length)-1;this._descriptor.context.gl.texParameteri(r.target,r.context.gl.TEXTURE_MAX_LEVEL,p),this._forEachMipmapLevel(((t,r,s,o)=>{const a=n[Math.min(t,n.length-1)];this._compressedTexImage(i,t,e,r,s,o,a)}),p)}_texStorage(e,i,r,s,o,a){const{gl:n}=this._descriptor.context;if(!I(i))throw new t(\"Immutable textures must have a sized internal format\");if(!this._descriptor.isImmutable)return;const l=r?A(e,s,o,a):1;if(T(e)){if(null==a)throw new t(\"Missing depth dimension for 3D texture upload\");n.texStorage3D(e,l,i,s,o,a)}else n.texStorage2D(e,l,i,s,o);this._wasImmutablyAllocated=!0}_texImage(e,i,r,s,o,a,n){const l=this._descriptor.context.gl,p=T(e),{isImmutable:m,pixelFormat:h,dataType:_}=this._descriptor;if(m){if(null!=n){const r=n;if(p){if(null==a)throw new t(\"Missing depth dimension for 3D texture upload\");l.texSubImage3D(e,i,0,0,0,s,o,a,h,_,r)}else l.texSubImage2D(e,i,0,0,s,o,h,_,r)}}else{const m=n;if(p){if(null==a)throw new t(\"Missing depth dimension for 3D texture upload\");l.texImage3D(e,i,r,s,o,a,0,h,_,m)}else l.texImage2D(e,i,r,s,o,0,h,_,m)}}_compressedTexImage(e,i,r,s,o,a,n){const l=this._descriptor.context.gl,p=T(e);if(this._descriptor.isImmutable){if(null!=n)if(p){if(null==a)throw new t(\"Missing depth dimension for 3D texture upload\");l.compressedTexSubImage3D(e,i,0,0,0,s,o,a,r,n)}else l.compressedTexSubImage2D(e,i,0,0,s,o,r,n)}else if(p){if(null==a)throw new t(\"Missing depth dimension for 3D texture upload\");l.compressedTexImage3D(e,i,r,s,o,a,0,n)}else l.compressedTexImage2D(e,i,r,s,o,0,n)}async compressOnWorker(t){const e=this._descriptor.context?.gl.getExtension(\"WEBGL_compressed_texture_etc\"),i=this._descriptor.context?.gl.getExtension(\"WEBGL_compressed_texture_s3tc\"),s=o();if(s&&(e||i)){const o=new AbortController;this._compressionAbortController.value=o;const a={data:await createImageBitmap(t),flipped:this.descriptor.flipped,width:t.width,height:t.height,hasMipmap:this._descriptor.hasMipmap,hasETC:!!e,hasS3TC:!!i};s.invoke(a,this._compressionAbortController.value.signal).then((t=>{t&&this.isCompressing&&this.glName&&(this._descriptor.internalFormat=t.internalFormat,this._setData(t.compressedTexture)),o===this._compressionAbortController.value&&(this._compressionAbortController.value=null)})).catch((t=>{r(t)||o!==this._compressionAbortController.value||(this._compressionAbortController.value=null)}))}}_forEachMipmapLevel(e,i=1/0){let{width:r,height:s,depth:o,hasMipmap:a,target:n}=this._descriptor;const p=n===l.TEXTURE_3D;if(null==r||null==s||p&&null==o)throw new t(\"Missing texture dimensions for mipmap calculation\");for(let t=0;e(t,r,s,o),a&&(1!==r||1!==s||p&&1!==o)&&!(t>=i);++t)r=Math.max(1,r>>1),s=Math.max(1,s>>1),p&&(o=Math.max(1,o>>1))}_applySamplingMode(){const t=this._descriptor,e=t.context?.gl;let i=t.samplingMode,r=t.samplingMode;i===h.LINEAR_MIPMAP_NEAREST||i===h.LINEAR_MIPMAP_LINEAR?(i=h.LINEAR,t.hasMipmap||(r=h.LINEAR)):i!==h.NEAREST_MIPMAP_NEAREST&&i!==h.NEAREST_MIPMAP_LINEAR||(i=h.NEAREST,t.hasMipmap||(r=h.NEAREST)),e.texParameteri(t.target,e.TEXTURE_MAG_FILTER,i),e.texParameteri(t.target,e.TEXTURE_MIN_FILTER,r)}_applyWrapMode(){const t=this._descriptor,e=t.context?.gl;\"number\"==typeof t.wrapMode?(e.texParameteri(t.target,e.TEXTURE_WRAP_S,t.wrapMode),e.texParameteri(t.target,e.TEXTURE_WRAP_T,t.wrapMode)):(e.texParameteri(t.target,e.TEXTURE_WRAP_S,t.wrapMode.s),e.texParameteri(t.target,e.TEXTURE_WRAP_T,t.wrapMode.t))}_applyAnisotropicFilteringParameters(){const t=this._descriptor,e=t.context.capabilities.textureFilterAnisotropic;if(!e)return;t.context.gl.texParameterf(t.target,e.TEXTURE_MAX_ANISOTROPY,t.maxAnisotropy??1)}};R.TEXTURE_UNIT_FOR_UPDATES=0;export{R as Texture,w as tracer};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}