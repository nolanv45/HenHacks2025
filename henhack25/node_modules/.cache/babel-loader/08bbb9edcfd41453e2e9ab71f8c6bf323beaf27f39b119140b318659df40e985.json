{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport { isBadArcadeResult as t } from \"../../../arcade/callExpressionWithCursor.js\";\nconst e = Math.PI / 180;\nclass s {\n  static create(t) {\n    return new s(t.map(t => i(t)));\n  }\n  constructor(t) {\n    this._statistics = t;\n  }\n  values() {\n    return this._statistics.values();\n  }\n  insert(t, e) {\n    for (const s of this._statistics) s.insert(t, e);\n  }\n  merge(t) {\n    for (let e = 0; e < this._statistics.length; e++) {\n      const s = this._statistics[e],\n        i = t._statistics[e];\n      if (s.field.name !== i.field.name) throw new Error(\"InternalError: Tried to merge incompatible statistics\");\n      s.merge(i);\n    }\n  }\n  clone() {\n    return new s(this._statistics.map(t => t.clone()));\n  }\n}\nfunction i(t) {\n  switch (t.statisticType) {\n    case \"min\":\n      return new r(t);\n    case \"max\":\n      return new u(t);\n    case \"avg\":\n      return new c(t);\n    case \"avg_angle\":\n      return new h(t);\n    case \"sum\":\n    case \"count\":\n      return new a(t);\n    case \"mode\":\n      return new o(t);\n  }\n}\nclass n {\n  constructor(t) {\n    this.field = t;\n  }\n  insert(e, s) {\n    if (!this.field.computed) return;\n    const i = this.field.computed.read(e, s);\n    t(i) || this._insertValue(i);\n  }\n}\nclass r extends n {\n  constructor() {\n    super(...arguments), this.type = \"min\", this.value = Number.MAX_VALUE;\n  }\n  _insertValue(t) {\n    this.value = Math.min(this.value, t);\n  }\n  merge(t) {\n    this.value = Math.min(this.value, t.value);\n  }\n  clone() {\n    const t = new r(this.field);\n    return t.value = this.value, t;\n  }\n}\nclass u extends n {\n  constructor() {\n    super(...arguments), this.type = \"max\", this.value = Number.MIN_VALUE;\n  }\n  _insertValue(t) {\n    this.value = Math.max(this.value, t);\n  }\n  merge(t) {\n    this.value = Math.max(this.value, t.value);\n  }\n  clone() {\n    const t = new u(this.field);\n    return t.value = this.value, t;\n  }\n}\nclass a extends n {\n  constructor() {\n    super(...arguments), this.type = \"sum\", this.value = 0;\n  }\n  _insertValue(t) {\n    this.value += t;\n  }\n  merge(t) {\n    this.value += t.value;\n  }\n  clone() {\n    const t = new a(this.field);\n    return t.value = this.value, t;\n  }\n}\nclass c extends n {\n  constructor() {\n    super(...arguments), this.type = \"avg\", this._total = 0, this._count = 0;\n  }\n  get value() {\n    return this._total / this._count;\n  }\n  _insertValue(t) {\n    this._total += t, this._count += 1;\n  }\n  merge(t) {\n    this._total += t._total, this._count += t._count;\n  }\n  clone() {\n    const t = new c(this.field);\n    return t._total = this._total, t._count = this._count, t;\n  }\n}\nclass h extends n {\n  constructor() {\n    super(...arguments), this.type = \"avg_angle\", this._x = 0, this._y = 0, this._count = 0;\n  }\n  get value() {\n    const t = this._x / this._count,\n      e = this._y / this._count,\n      s = 180 / Math.PI;\n    return Math.atan2(e, t) * s;\n  }\n  _insertValue(t) {\n    this._x = this._x + Math.cos(t * e), this._y = this._y + Math.sin(t * e), this._count += 1;\n  }\n  merge(t) {\n    this._x += t._x, this._y += t._y, this._count += t._count;\n  }\n  clone() {\n    const t = new h(this.field);\n    return t._x = this._x, t._y = this._y, t._count = this._count, t;\n  }\n}\nclass o extends n {\n  constructor() {\n    super(...arguments), this._frequencies = new Map();\n  }\n  get value() {\n    let t,\n      e = 0;\n    for (const [s, i] of this._frequencies.entries()) i > e && (e = i, t = s);\n    return t;\n  }\n  _insertValue(t) {\n    const e = this._frequencies.get(t);\n    null != e ? this._frequencies.set(t, e + 1) : this._frequencies.set(t, 1);\n  }\n  merge(t) {\n    for (const [e, s] of t._frequencies.entries()) {\n      const t = this._frequencies.get(e);\n      null != t ? this._frequencies.set(e, t + s) : this._frequencies.set(e, s);\n    }\n  }\n  clone() {\n    const t = new o(this.field);\n    return t._frequencies = new Map(this._frequencies), t;\n  }\n}\nexport { s as AccumulatedStatistics };","map":{"version":3,"names":["isBadArcadeResult","t","e","Math","PI","s","create","map","i","constructor","_statistics","values","insert","merge","length","field","name","Error","clone","statisticType","r","u","c","h","a","o","n","computed","read","_insertValue","arguments","type","value","Number","MAX_VALUE","min","MIN_VALUE","max","_total","_count","_x","_y","atan2","cos","sin","_frequencies","Map","entries","get","set","AccumulatedStatistics"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/node_modules/@arcgis/core/views/2d/layers/features/aggregation/AccumulatedStatistics.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{isBadArcadeResult as t}from\"../../../arcade/callExpressionWithCursor.js\";const e=Math.PI/180;class s{static create(t){return new s(t.map((t=>i(t))))}constructor(t){this._statistics=t}values(){return this._statistics.values()}insert(t,e){for(const s of this._statistics)s.insert(t,e)}merge(t){for(let e=0;e<this._statistics.length;e++){const s=this._statistics[e],i=t._statistics[e];if(s.field.name!==i.field.name)throw new Error(\"InternalError: Tried to merge incompatible statistics\");s.merge(i)}}clone(){return new s(this._statistics.map((t=>t.clone())))}}function i(t){switch(t.statisticType){case\"min\":return new r(t);case\"max\":return new u(t);case\"avg\":return new c(t);case\"avg_angle\":return new h(t);case\"sum\":case\"count\":return new a(t);case\"mode\":return new o(t)}}class n{constructor(t){this.field=t}insert(e,s){if(!this.field.computed)return;const i=this.field.computed.read(e,s);t(i)||this._insertValue(i)}}class r extends n{constructor(){super(...arguments),this.type=\"min\",this.value=Number.MAX_VALUE}_insertValue(t){this.value=Math.min(this.value,t)}merge(t){this.value=Math.min(this.value,t.value)}clone(){const t=new r(this.field);return t.value=this.value,t}}class u extends n{constructor(){super(...arguments),this.type=\"max\",this.value=Number.MIN_VALUE}_insertValue(t){this.value=Math.max(this.value,t)}merge(t){this.value=Math.max(this.value,t.value)}clone(){const t=new u(this.field);return t.value=this.value,t}}class a extends n{constructor(){super(...arguments),this.type=\"sum\",this.value=0}_insertValue(t){this.value+=t}merge(t){this.value+=t.value}clone(){const t=new a(this.field);return t.value=this.value,t}}class c extends n{constructor(){super(...arguments),this.type=\"avg\",this._total=0,this._count=0}get value(){return this._total/this._count}_insertValue(t){this._total+=t,this._count+=1}merge(t){this._total+=t._total,this._count+=t._count}clone(){const t=new c(this.field);return t._total=this._total,t._count=this._count,t}}class h extends n{constructor(){super(...arguments),this.type=\"avg_angle\",this._x=0,this._y=0,this._count=0}get value(){const t=this._x/this._count,e=this._y/this._count,s=180/Math.PI;return Math.atan2(e,t)*s}_insertValue(t){this._x=this._x+Math.cos(t*e),this._y=this._y+Math.sin(t*e),this._count+=1}merge(t){this._x+=t._x,this._y+=t._y,this._count+=t._count}clone(){const t=new h(this.field);return t._x=this._x,t._y=this._y,t._count=this._count,t}}class o extends n{constructor(){super(...arguments),this._frequencies=new Map}get value(){let t,e=0;for(const[s,i]of this._frequencies.entries())i>e&&(e=i,t=s);return t}_insertValue(t){const e=this._frequencies.get(t);null!=e?this._frequencies.set(t,e+1):this._frequencies.set(t,1)}merge(t){for(const[e,s]of t._frequencies.entries()){const t=this._frequencies.get(e);null!=t?this._frequencies.set(e,t+s):this._frequencies.set(e,s)}}clone(){const t=new o(this.field);return t._frequencies=new Map(this._frequencies),t}}export{s as AccumulatedStatistics};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}