{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport { convertToFeature as e } from \"../../../../../layers/graphics/featureConversionUtils.js\";\nimport { OptimizedFeature as t } from \"../../../../../layers/graphics/OptimizedFeature.js\";\nimport s from \"../../../../../layers/graphics/OptimizedGeometry.js\";\nimport i from \"../../../../../layers/support/FieldsIndex.js\";\nimport { tileSize as r } from \"../../../engine/webgl/definitions.js\";\nimport { ComputedAggregateField as n } from \"../aggregation/ComputedAggregateField.js\";\nimport { GridCell as a } from \"../aggregation/GridCell.js\";\nimport { pixelsPerMapUnit as l } from \"../aggregation/GridSpatialIndex.js\";\nimport { AAggregateStrategy as o } from \"./AAggregateStrategy.js\";\nimport { ASendState as d } from \"./AProcessorStrategy.js\";\nimport { WithDisplayId as u } from \"./support/WithDisplayId.js\";\nimport { FeatureTileAppendMessage as c } from \"../sources/FeatureSourceMessage.js\";\nimport { ComputedAttributeStorage as h } from \"../support/ComputedAttributeStorage.js\";\nimport p from \"../support/FeatureFilterEvaluator.js\";\nimport { FeatureMetadata as f } from \"../support/FeatureMetadata.js\";\nimport { FeatureSetReaderJSON as g } from \"../support/FeatureSetReaderJSON.js\";\nimport _ from \"../../../tiling/TileKey.js\";\nconst m = 128;\nclass y extends d {\n  constructor(e) {\n    super(e), this.didSend = !1, this.done = !1;\n  }\n}\nclass S {\n  constructor(e, t, s, i, r) {\n    this._level = e, this._scale = t, this._indexOptions = s, this._clusterRadius = i, this._store = r, this._cells = new Map(), this._handledChunks = new Set(), this._statistics = new Map(), this._clusters = new Map();\n  }\n  destroy() {\n    this._clearClusters();\n  }\n  _clearClusters() {\n    for (const e of this._clusters.values()) this._store.releaseDisplayIdForObjectId(e.inner.id);\n    this._clusters.clear();\n  }\n  *aggregatesWorldSpace() {\n    for (const e of this._clusters.values()) {\n      const s = e.inner.getCentroid(null),\n        i = new t(s, e.inner.getAttributes(), null, e.inner.id, e.displayId);\n      yield i;\n    }\n  }\n  clusters() {\n    return this._clusters.values();\n  }\n  updateChunks(e, t) {\n    let s = !1;\n    for (const a of e) {\n      const e = a.queryInfo;\n      if (\"tileId\" in e) {\n        if (new _(e.tileId).level !== this._level) continue;\n      }\n      if (!this._handledChunks.has(a.normalizedChunkId)) {\n        this._handledChunks.add(a.normalizedChunkId), s = !0;\n        a.getAggregateIndex({\n          ...this._indexOptions,\n          scale: this._scale\n        }).put(this._cells);\n      }\n    }\n    const i = {\n        xMin: 1 / 0,\n        yMin: 1 / 0,\n        xMax: -1 / 0,\n        yMax: -1 / 0\n      },\n      r = l(this._indexOptions.spatialReference, this._scale),\n      n = this._indexOptions.cellSize;\n    for (const {\n      subscription: a\n    } of t) {\n      const e = a.tile.bounds,\n        t = Math.floor(e[0] * r / n),\n        s = Math.floor(e[1] * r / n),\n        l = Math.ceil(e[2] * r / n),\n        o = Math.ceil(e[3] * r / n);\n      i.xMin = Math.min(i.xMin, t), i.yMin = Math.min(i.yMin, s), i.xMax = Math.max(i.xMax, l), i.yMax = Math.max(i.yMax, o);\n    }\n    return null != this._lastCellBounds && i.xMin === this._lastCellBounds.xMin && i.yMin === this._lastCellBounds.yMin && i.yMin === this._lastCellBounds.yMin && i.yMax === this._lastCellBounds.yMax || (s = !0, this._lastCellBounds = i), s && this._clusterCells(i), s;\n  }\n  async updateStatistics(e) {\n    let t = !1;\n    for (const s of this._clusters.values()) s.inner.count > 1 && (t = this._updateAggregateStatistics(this._statistics, s.inner) || t);\n    if (t) {\n      const t = Array.from(this._statistics.entries()).map(([e, t]) => ({\n        fieldName: e,\n        minValue: t.minValue,\n        maxValue: t.maxValue\n      }));\n      await e.container.updateStatistics(this._level, t);\n    }\n  }\n  createAggregateFeatures(e, i) {\n    const n = e.subscription,\n      a = [],\n      l = n.tile.transform;\n    for (const o of this._clusters.values()) {\n      let e = o.inner.getCentroidX(l);\n      const i = o.inner.getCentroidY(l),\n        d = n.tile.lod,\n        u = d.wrap ? d.worldSize[0] : null,\n        c = 1 === o.inner.count ? o.inner.firstObjectId : o.inner.id,\n        h = o.displayId;\n      if (null != u) if (1 === u) {\n        const n = new s([], [e, i]),\n          l = new t(n, o.inner.getAttributes(), null, c, h);\n        l.geometry.coords[0] -= r, a.push(l);\n        const d = new s([], [e, i]),\n          u = new t(d, o.inner.getAttributes(), null, c, h);\n        u.geometry.coords[0] += r, a.push(u);\n      } else e > r + r / 2 ? e -= u * r : e < -256 && (e += u * r);\n      if (e < r + m && e >= -128 && i < r + m && i >= -128) {\n        const r = new s([], [e, i]),\n          n = new t(r, o.inner.getAttributes(), null, c, h);\n        a.push(n);\n      }\n    }\n    return g.fromOptimizedFeatures(a, i, n.tile.transform);\n  }\n  _clusterCells(e) {\n    let t = Array.from(this._cells.values());\n    t = t.sort((e, t) => t.count - e.count);\n    const s = [];\n    for (const a of this._clusters.values()) s.push(a.inner.id);\n    this._clusters.clear();\n    const i = this._clusterRadius * (1 / l(this._indexOptions.spatialReference, this._scale)),\n      r = 1 + this._clusterRadius / this._indexOptions.cellSize,\n      n = new Set();\n    for (const l of t) {\n      if (n.has(l.id)) continue;\n      if (l.gridX < e.xMin || l.gridX > e.xMax || l.gridY < e.yMin || l.gridY > e.yMax) continue;\n      const t = this._store.createDisplayIdForObjectId(l.id),\n        s = new u(l.clone(), t);\n      n.add(l.id), this._clusters.set(l.id, s);\n      const o = l.centroidXWorld,\n        d = l.centroidYWorld;\n      for (let e = l.gridY - r; e <= l.gridY + r; e++) for (let t = l.gridX - r; t <= l.gridX + r; t++) {\n        if (e === l.gridY && t === l.gridX) continue;\n        const r = this._cells.get(a.createId(t, e));\n        if (!r || n.has(r.id)) continue;\n        const u = Math.abs(r.centroidXWorld - o),\n          c = Math.abs(r.centroidYWorld - d);\n        u < i && c < i && (s.inner.merge(r), n.add(r.id));\n      }\n    }\n    for (const a of s) this._store.releaseDisplayIdForObjectId(a);\n  }\n  _updateAggregateStatistics(e, t) {\n    let s = !1;\n    for (const i of t.statistics.values()) {\n      if (\"esriFieldTypeString\" === i.field.type) continue;\n      const t = i.value,\n        r = i.field,\n        n = e.get(r.name);\n      if (n) {\n        const {\n            minValue: e,\n            maxValue: i\n          } = n,\n          r = Math.min(n.minValue, t),\n          a = Math.max(n.maxValue, t);\n        e === r && i === a || (n.minValue = r, n.maxValue = a, s = !0);\n      } else e.set(r.name, {\n        minValue: t,\n        maxValue: t\n      }), s = !0;\n    }\n    return s;\n  }\n}\nclass x extends o {\n  static async create(e, t, s, i, r, a, l) {\n    const o = new h({\n        spatialReference: s\n      }),\n      d = {\n        type: \"grid\",\n        fields: await Promise.all(t.fields.map(async e => n.create(o, e))),\n        spatialReference: s,\n        featureFilter: t.featureFilter ? await p.create({\n          geometryType: i.metadata.geometryType,\n          hasM: !1,\n          hasZ: !1,\n          timeInfo: i.metadata.timeInfo,\n          fieldsIndex: i.metadata.fieldsIndex,\n          spatialReference: s,\n          filterJSON: t.featureFilter\n        }) : null,\n        cellSize: t.clusterRadius / 4,\n        arcadeContextInfo: a,\n        sqlOptions: l\n      };\n    return new x(e, t.clusterRadius, d, t.fields, i, r, l);\n  }\n  constructor(e, t, s, r, n, a, l) {\n    super(n, a, s.spatialReference, s.fields, l), this._connection = e, this._clusterRadius = t, this._indexOptions = s, this._cellsPerScale = new Map(), this._metadata = f.createFeature({\n      geometryType: \"esriGeometryPoint\",\n      objectIdField: \"aggregateId\",\n      fieldsIndex: new i([...r, ...this._source.metadata.fieldsIndex.fields, {\n        name: \"aggregateId\",\n        alias: \"aggregateId\",\n        type: \"esriFieldTypeOID\"\n      }]).toJSON(),\n      globalIdField: null,\n      spatialReference: n.metadata.spatialReference,\n      outSpatialReference: n.metadata.outSpatialReference,\n      subtypeField: null,\n      subtypes: null,\n      timeInfo: null,\n      timeReferenceUnknownClient: null,\n      dateFieldsTimeZone: null,\n      typeIdField: null,\n      types: null\n    });\n  }\n  get enablePixelBuffering() {\n    return !1;\n  }\n  invalidate() {\n    super.invalidate();\n    for (const e of this._cellsPerScale.values()) e.destroy();\n    this._cellsPerScale.clear();\n  }\n  onSubscribe(e) {\n    super.onSubscribe(e), this._requiredLevel = e.tile.level, this._requiredScale = e.tile.scale;\n  }\n  createState(e) {\n    return new y(e);\n  }\n  async *applyOverrideUpdate(e) {\n    for (const t of this._cellsPerScale.values()) t.destroy();\n    this._cellsPerScale.clear();\n    for (const t of this._sendStates.values()) t.done = !1;\n  }\n  displayMap(e, t, s) {\n    const i = new Map(e.map(e => [t(e), e])),\n      r = [],\n      n = this._getClusterState(this._requiredLevel, this._requiredScale);\n    for (const a of n.clusters()) {\n      const e = i.get(a.inner.id);\n      if (null == e) {\n        if (1 === a.inner.count) {\n          const {\n              firstObjectId: e\n            } = a.inner,\n            t = e ? i.get(e) : null;\n          if (null != t) {\n            const n = s(a.displayId, t, e);\n            r.push(n), i.delete(e);\n          }\n        }\n      } else {\n        const t = s(a.displayId, e, a.inner.id);\n        r.push(t), i.delete(a.inner.id);\n      }\n    }\n    return r;\n  }\n  getDisplayFeatures(t) {\n    const s = new Set(t),\n      i = new Set(),\n      r = [],\n      n = [],\n      a = this._getClusterState(this._requiredLevel, this._requiredScale);\n    for (const l of a.aggregatesWorldSpace()) if (s.has(l.displayId) && !i.has(l.displayId)) {\n      const t = e(l, this._metadata.geometryType, !1, !1);\n      if (i.add(l.displayId), 1 === t.attributes.cluster_count) {\n        r.push({\n          ...t,\n          displayId: l.displayId\n        });\n        continue;\n      }\n      n.push({\n        ...t,\n        displayId: l.displayId\n      });\n    }\n    return {\n      features: r,\n      aggregates: n,\n      tracks: []\n    };\n  }\n  getFeatureObjectIdsForAggregate(e) {\n    const t = this._getClusterState(this._requiredLevel, this._requiredScale);\n    for (const s of t.clusters()) if (s.inner.id === e) return Array.from(s.inner.containedObjectIds);\n    return [];\n  }\n  async *updateChunks() {\n    const e = this._source.chunks();\n    if (!e.length) return;\n    const t = this._getClusterState(this._requiredLevel, this._requiredScale),\n      s = Array.from(this._sendStates.values()).filter(e => e.subscription.tile.level === this._requiredLevel);\n    if (t.updateChunks(e, s) || !this._source.updateTracking.updating) for (const n of s) n.subscription.tile.level === this._requiredLevel && (n.didSend = !1, n.done = !1);\n    const i = Array.from(this._sendStates.values()).filter(e => e.done).map(e => e.subscription.tile.key),\n      r = new Set(i);\n    for (const n of this._sendStates.values()) {\n      if (this._source.updateTracking.updating) {\n        if (i.some(e => e.containsChild(n.subscription.tile.key))) continue;\n        if (n.subscription.tile.key.getChildKeys().every(e => r.has(e))) continue;\n      }\n      n.didSend || n.subscription.tile.level !== this._requiredLevel || (n.didSend = !0, yield* this._update(n, t, this._source));\n    }\n    await t.updateStatistics(this._connection);\n  }\n  forEachAggregateWorldSpace(e) {\n    if (null == this._requiredLevel || null == this._requiredScale) return;\n    const t = this._getClusterState(this._requiredLevel, this._requiredScale);\n    for (const s of t.aggregatesWorldSpace()) e(s);\n  }\n  _getClusterState(e, t) {\n    if (null == e || null == t) throw new Error(\"InternalError: Level and scale must be defined\");\n    let s = this._cellsPerScale.get(t);\n    return s || (s = new S(e, t, this._indexOptions, this._clusterRadius, this._attributeStore), this._cellsPerScale.set(t, s)), s;\n  }\n  async *_update(e, t, s) {\n    if (e.done) return;\n    const i = t.createAggregateFeatures(e, this._metadata);\n    this.events.emit(\"changed\"), e.done = !s.updateTracking.updating;\n    const r = i.getCursor(),\n      n = e.subscription.tile.createArcadeEvaluationOptions(this._indexOptions.arcadeContextInfo);\n    for (; r.next();) this._attributeStore.setAttributeData(r.getDisplayId(), r, n, this._sqlOptions);\n    const a = new c(e.subscription, i, !0, e.done, {});\n    yield a;\n  }\n}\nexport { y as ClusterState, x as ClusterStrategy };","map":{"version":3,"names":["convertToFeature","e","OptimizedFeature","t","s","i","tileSize","r","ComputedAggregateField","n","GridCell","a","pixelsPerMapUnit","l","AAggregateStrategy","o","ASendState","d","WithDisplayId","u","FeatureTileAppendMessage","c","ComputedAttributeStorage","h","p","FeatureMetadata","f","FeatureSetReaderJSON","g","_","m","y","constructor","didSend","done","S","_level","_scale","_indexOptions","_clusterRadius","_store","_cells","Map","_handledChunks","Set","_statistics","_clusters","destroy","_clearClusters","values","releaseDisplayIdForObjectId","inner","id","clear","aggregatesWorldSpace","getCentroid","getAttributes","displayId","clusters","updateChunks","queryInfo","tileId","level","has","normalizedChunkId","add","getAggregateIndex","scale","put","xMin","yMin","xMax","yMax","spatialReference","cellSize","subscription","tile","bounds","Math","floor","ceil","min","max","_lastCellBounds","_clusterCells","updateStatistics","count","_updateAggregateStatistics","Array","from","entries","map","fieldName","minValue","maxValue","container","createAggregateFeatures","transform","getCentroidX","getCentroidY","lod","wrap","worldSize","firstObjectId","geometry","coords","push","fromOptimizedFeatures","sort","gridX","gridY","createDisplayIdForObjectId","clone","set","centroidXWorld","centroidYWorld","get","createId","abs","merge","statistics","field","type","value","name","x","create","fields","Promise","all","featureFilter","geometryType","metadata","hasM","hasZ","timeInfo","fieldsIndex","filterJSON","clusterRadius","arcadeContextInfo","sqlOptions","_connection","_cellsPerScale","_metadata","createFeature","objectIdField","_source","alias","toJSON","globalIdField","outSpatialReference","subtypeField","subtypes","timeReferenceUnknownClient","dateFieldsTimeZone","typeIdField","types","enablePixelBuffering","invalidate","onSubscribe","_requiredLevel","_requiredScale","createState","applyOverrideUpdate","_sendStates","displayMap","_getClusterState","delete","getDisplayFeatures","attributes","cluster_count","features","aggregates","tracks","getFeatureObjectIdsForAggregate","containedObjectIds","chunks","length","filter","updateTracking","updating","key","some","containsChild","getChildKeys","every","_update","forEachAggregateWorldSpace","Error","_attributeStore","events","emit","getCursor","createArcadeEvaluationOptions","next","setAttributeData","getDisplayId","_sqlOptions","ClusterState","ClusterStrategy"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/node_modules/@arcgis/core/views/2d/layers/features/processor/ClusterStrategy.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{convertToFeature as e}from\"../../../../../layers/graphics/featureConversionUtils.js\";import{OptimizedFeature as t}from\"../../../../../layers/graphics/OptimizedFeature.js\";import s from\"../../../../../layers/graphics/OptimizedGeometry.js\";import i from\"../../../../../layers/support/FieldsIndex.js\";import{tileSize as r}from\"../../../engine/webgl/definitions.js\";import{ComputedAggregateField as n}from\"../aggregation/ComputedAggregateField.js\";import{GridCell as a}from\"../aggregation/GridCell.js\";import{pixelsPerMapUnit as l}from\"../aggregation/GridSpatialIndex.js\";import{AAggregateStrategy as o}from\"./AAggregateStrategy.js\";import{ASendState as d}from\"./AProcessorStrategy.js\";import{WithDisplayId as u}from\"./support/WithDisplayId.js\";import{FeatureTileAppendMessage as c}from\"../sources/FeatureSourceMessage.js\";import{ComputedAttributeStorage as h}from\"../support/ComputedAttributeStorage.js\";import p from\"../support/FeatureFilterEvaluator.js\";import{FeatureMetadata as f}from\"../support/FeatureMetadata.js\";import{FeatureSetReaderJSON as g}from\"../support/FeatureSetReaderJSON.js\";import _ from\"../../../tiling/TileKey.js\";const m=128;class y extends d{constructor(e){super(e),this.didSend=!1,this.done=!1}}class S{constructor(e,t,s,i,r){this._level=e,this._scale=t,this._indexOptions=s,this._clusterRadius=i,this._store=r,this._cells=new Map,this._handledChunks=new Set,this._statistics=new Map,this._clusters=new Map}destroy(){this._clearClusters()}_clearClusters(){for(const e of this._clusters.values())this._store.releaseDisplayIdForObjectId(e.inner.id);this._clusters.clear()}*aggregatesWorldSpace(){for(const e of this._clusters.values()){const s=e.inner.getCentroid(null),i=new t(s,e.inner.getAttributes(),null,e.inner.id,e.displayId);yield i}}clusters(){return this._clusters.values()}updateChunks(e,t){let s=!1;for(const a of e){const e=a.queryInfo;if(\"tileId\"in e){if(new _(e.tileId).level!==this._level)continue}if(!this._handledChunks.has(a.normalizedChunkId)){this._handledChunks.add(a.normalizedChunkId),s=!0;a.getAggregateIndex({...this._indexOptions,scale:this._scale}).put(this._cells)}}const i={xMin:1/0,yMin:1/0,xMax:-1/0,yMax:-1/0},r=l(this._indexOptions.spatialReference,this._scale),n=this._indexOptions.cellSize;for(const{subscription:a}of t){const e=a.tile.bounds,t=Math.floor(e[0]*r/n),s=Math.floor(e[1]*r/n),l=Math.ceil(e[2]*r/n),o=Math.ceil(e[3]*r/n);i.xMin=Math.min(i.xMin,t),i.yMin=Math.min(i.yMin,s),i.xMax=Math.max(i.xMax,l),i.yMax=Math.max(i.yMax,o)}return null!=this._lastCellBounds&&i.xMin===this._lastCellBounds.xMin&&i.yMin===this._lastCellBounds.yMin&&i.yMin===this._lastCellBounds.yMin&&i.yMax===this._lastCellBounds.yMax||(s=!0,this._lastCellBounds=i),s&&this._clusterCells(i),s}async updateStatistics(e){let t=!1;for(const s of this._clusters.values())s.inner.count>1&&(t=this._updateAggregateStatistics(this._statistics,s.inner)||t);if(t){const t=Array.from(this._statistics.entries()).map((([e,t])=>({fieldName:e,minValue:t.minValue,maxValue:t.maxValue})));await e.container.updateStatistics(this._level,t)}}createAggregateFeatures(e,i){const n=e.subscription,a=[],l=n.tile.transform;for(const o of this._clusters.values()){let e=o.inner.getCentroidX(l);const i=o.inner.getCentroidY(l),d=n.tile.lod,u=d.wrap?d.worldSize[0]:null,c=1===o.inner.count?o.inner.firstObjectId:o.inner.id,h=o.displayId;if(null!=u)if(1===u){const n=new s([],[e,i]),l=new t(n,o.inner.getAttributes(),null,c,h);l.geometry.coords[0]-=r,a.push(l);const d=new s([],[e,i]),u=new t(d,o.inner.getAttributes(),null,c,h);u.geometry.coords[0]+=r,a.push(u)}else e>r+r/2?e-=u*r:e<-256&&(e+=u*r);if(e<r+m&&e>=-128&&i<r+m&&i>=-128){const r=new s([],[e,i]),n=new t(r,o.inner.getAttributes(),null,c,h);a.push(n)}}return g.fromOptimizedFeatures(a,i,n.tile.transform)}_clusterCells(e){let t=Array.from(this._cells.values());t=t.sort(((e,t)=>t.count-e.count));const s=[];for(const a of this._clusters.values())s.push(a.inner.id);this._clusters.clear();const i=this._clusterRadius*(1/l(this._indexOptions.spatialReference,this._scale)),r=1+this._clusterRadius/this._indexOptions.cellSize,n=new Set;for(const l of t){if(n.has(l.id))continue;if(l.gridX<e.xMin||l.gridX>e.xMax||l.gridY<e.yMin||l.gridY>e.yMax)continue;const t=this._store.createDisplayIdForObjectId(l.id),s=new u(l.clone(),t);n.add(l.id),this._clusters.set(l.id,s);const o=l.centroidXWorld,d=l.centroidYWorld;for(let e=l.gridY-r;e<=l.gridY+r;e++)for(let t=l.gridX-r;t<=l.gridX+r;t++){if(e===l.gridY&&t===l.gridX)continue;const r=this._cells.get(a.createId(t,e));if(!r||n.has(r.id))continue;const u=Math.abs(r.centroidXWorld-o),c=Math.abs(r.centroidYWorld-d);u<i&&c<i&&(s.inner.merge(r),n.add(r.id))}}for(const a of s)this._store.releaseDisplayIdForObjectId(a)}_updateAggregateStatistics(e,t){let s=!1;for(const i of t.statistics.values()){if(\"esriFieldTypeString\"===i.field.type)continue;const t=i.value,r=i.field,n=e.get(r.name);if(n){const{minValue:e,maxValue:i}=n,r=Math.min(n.minValue,t),a=Math.max(n.maxValue,t);e===r&&i===a||(n.minValue=r,n.maxValue=a,s=!0)}else e.set(r.name,{minValue:t,maxValue:t}),s=!0}return s}}class x extends o{static async create(e,t,s,i,r,a,l){const o=new h({spatialReference:s}),d={type:\"grid\",fields:await Promise.all(t.fields.map((async e=>n.create(o,e)))),spatialReference:s,featureFilter:t.featureFilter?await p.create({geometryType:i.metadata.geometryType,hasM:!1,hasZ:!1,timeInfo:i.metadata.timeInfo,fieldsIndex:i.metadata.fieldsIndex,spatialReference:s,filterJSON:t.featureFilter}):null,cellSize:t.clusterRadius/4,arcadeContextInfo:a,sqlOptions:l};return new x(e,t.clusterRadius,d,t.fields,i,r,l)}constructor(e,t,s,r,n,a,l){super(n,a,s.spatialReference,s.fields,l),this._connection=e,this._clusterRadius=t,this._indexOptions=s,this._cellsPerScale=new Map,this._metadata=f.createFeature({geometryType:\"esriGeometryPoint\",objectIdField:\"aggregateId\",fieldsIndex:new i([...r,...this._source.metadata.fieldsIndex.fields,{name:\"aggregateId\",alias:\"aggregateId\",type:\"esriFieldTypeOID\"}]).toJSON(),globalIdField:null,spatialReference:n.metadata.spatialReference,outSpatialReference:n.metadata.outSpatialReference,subtypeField:null,subtypes:null,timeInfo:null,timeReferenceUnknownClient:null,dateFieldsTimeZone:null,typeIdField:null,types:null})}get enablePixelBuffering(){return!1}invalidate(){super.invalidate();for(const e of this._cellsPerScale.values())e.destroy();this._cellsPerScale.clear()}onSubscribe(e){super.onSubscribe(e),this._requiredLevel=e.tile.level,this._requiredScale=e.tile.scale}createState(e){return new y(e)}async*applyOverrideUpdate(e){for(const t of this._cellsPerScale.values())t.destroy();this._cellsPerScale.clear();for(const t of this._sendStates.values())t.done=!1}displayMap(e,t,s){const i=new Map(e.map((e=>[t(e),e]))),r=[],n=this._getClusterState(this._requiredLevel,this._requiredScale);for(const a of n.clusters()){const e=i.get(a.inner.id);if(null==e){if(1===a.inner.count){const{firstObjectId:e}=a.inner,t=e?i.get(e):null;if(null!=t){const n=s(a.displayId,t,e);r.push(n),i.delete(e)}}}else{const t=s(a.displayId,e,a.inner.id);r.push(t),i.delete(a.inner.id)}}return r}getDisplayFeatures(t){const s=new Set(t),i=new Set,r=[],n=[],a=this._getClusterState(this._requiredLevel,this._requiredScale);for(const l of a.aggregatesWorldSpace())if(s.has(l.displayId)&&!i.has(l.displayId)){const t=e(l,this._metadata.geometryType,!1,!1);if(i.add(l.displayId),1===t.attributes.cluster_count){r.push({...t,displayId:l.displayId});continue}n.push({...t,displayId:l.displayId})}return{features:r,aggregates:n,tracks:[]}}getFeatureObjectIdsForAggregate(e){const t=this._getClusterState(this._requiredLevel,this._requiredScale);for(const s of t.clusters())if(s.inner.id===e)return Array.from(s.inner.containedObjectIds);return[]}async*updateChunks(){const e=this._source.chunks();if(!e.length)return;const t=this._getClusterState(this._requiredLevel,this._requiredScale),s=Array.from(this._sendStates.values()).filter((e=>e.subscription.tile.level===this._requiredLevel));if(t.updateChunks(e,s)||!this._source.updateTracking.updating)for(const n of s)n.subscription.tile.level===this._requiredLevel&&(n.didSend=!1,n.done=!1);const i=Array.from(this._sendStates.values()).filter((e=>e.done)).map((e=>e.subscription.tile.key)),r=new Set(i);for(const n of this._sendStates.values()){if(this._source.updateTracking.updating){if(i.some((e=>e.containsChild(n.subscription.tile.key))))continue;if(n.subscription.tile.key.getChildKeys().every((e=>r.has(e))))continue}n.didSend||n.subscription.tile.level!==this._requiredLevel||(n.didSend=!0,yield*this._update(n,t,this._source))}await t.updateStatistics(this._connection)}forEachAggregateWorldSpace(e){if(null==this._requiredLevel||null==this._requiredScale)return;const t=this._getClusterState(this._requiredLevel,this._requiredScale);for(const s of t.aggregatesWorldSpace())e(s)}_getClusterState(e,t){if(null==e||null==t)throw new Error(\"InternalError: Level and scale must be defined\");let s=this._cellsPerScale.get(t);return s||(s=new S(e,t,this._indexOptions,this._clusterRadius,this._attributeStore),this._cellsPerScale.set(t,s)),s}async*_update(e,t,s){if(e.done)return;const i=t.createAggregateFeatures(e,this._metadata);this.events.emit(\"changed\"),e.done=!s.updateTracking.updating;const r=i.getCursor(),n=e.subscription.tile.createArcadeEvaluationOptions(this._indexOptions.arcadeContextInfo);for(;r.next();)this._attributeStore.setAttributeData(r.getDisplayId(),r,n,this._sqlOptions);const a=new c(e.subscription,i,!0,e.done,{});yield a}}export{y as ClusterState,x as ClusterStrategy};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}