{"ast":null,"code":"/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global Worker, URL, TransformStream, WritableStream */\n\nimport { UNDEFINED_TYPE, FUNCTION_TYPE } from \"./constants.js\";\nimport { CodecStream, ChunkStream, MESSAGE_EVENT_TYPE, MESSAGE_START, MESSAGE_PULL, MESSAGE_DATA, MESSAGE_ACK_DATA, MESSAGE_CLOSE } from \"./streams/codec-stream.js\";\n\n// deno-lint-ignore valid-typeof\nlet WEB_WORKERS_SUPPORTED = typeof Worker != UNDEFINED_TYPE;\nexport { CodecWorker };\nclass CodecWorker {\n  constructor(workerData, _ref, _ref2, onTaskFinished) {\n    let {\n      readable,\n      writable\n    } = _ref;\n    let {\n      options,\n      config,\n      streamOptions,\n      useWebWorkers,\n      transferStreams,\n      scripts\n    } = _ref2;\n    const {\n      signal\n    } = streamOptions;\n    Object.assign(workerData, {\n      busy: true,\n      readable: readable.pipeThrough(new ChunkStream(config.chunkSize)).pipeThrough(new ProgressWatcherStream(readable, streamOptions), {\n        signal\n      }),\n      writable,\n      options: Object.assign({}, options),\n      scripts,\n      transferStreams,\n      terminate() {\n        return new Promise(resolve => {\n          const {\n            worker,\n            busy\n          } = workerData;\n          if (worker) {\n            if (busy) {\n              workerData.resolveTerminated = resolve;\n            } else {\n              worker.terminate();\n              resolve();\n            }\n            workerData.interface = null;\n          } else {\n            resolve();\n          }\n        });\n      },\n      onTaskFinished() {\n        const {\n          resolveTerminated\n        } = workerData;\n        if (resolveTerminated) {\n          workerData.resolveTerminated = null;\n          workerData.terminated = true;\n          workerData.worker.terminate();\n          resolveTerminated();\n        }\n        workerData.busy = false;\n        onTaskFinished(workerData);\n      }\n    });\n    return (useWebWorkers && WEB_WORKERS_SUPPORTED ? createWebWorkerInterface : createWorkerInterface)(workerData, config);\n  }\n}\nclass ProgressWatcherStream extends TransformStream {\n  constructor(readableSource, _ref3) {\n    let {\n      onstart,\n      onprogress,\n      size,\n      onend\n    } = _ref3;\n    let chunkOffset = 0;\n    super({\n      async start() {\n        if (onstart) {\n          await callHandler(onstart, size);\n        }\n      },\n      async transform(chunk, controller) {\n        chunkOffset += chunk.length;\n        if (onprogress) {\n          await callHandler(onprogress, chunkOffset, size);\n        }\n        controller.enqueue(chunk);\n      },\n      async flush() {\n        readableSource.size = chunkOffset;\n        if (onend) {\n          await callHandler(onend, chunkOffset);\n        }\n      }\n    });\n  }\n}\nasync function callHandler(handler) {\n  try {\n    for (var _len = arguments.length, parameters = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      parameters[_key - 1] = arguments[_key];\n    }\n    await handler(...parameters);\n    // eslint-disable-next-line no-unused-vars\n  } catch (_) {\n    // ignored\n  }\n}\nfunction createWorkerInterface(workerData, config) {\n  return {\n    run: () => runWorker(workerData, config)\n  };\n}\nfunction createWebWorkerInterface(workerData, config) {\n  const {\n    baseURL,\n    chunkSize\n  } = config;\n  if (!workerData.interface) {\n    let worker;\n    try {\n      worker = getWebWorker(workerData.scripts[0], baseURL, workerData);\n      // eslint-disable-next-line no-unused-vars\n    } catch (_) {\n      WEB_WORKERS_SUPPORTED = false;\n      return createWorkerInterface(workerData, config);\n    }\n    Object.assign(workerData, {\n      worker,\n      interface: {\n        run: () => runWebWorker(workerData, {\n          chunkSize\n        })\n      }\n    });\n  }\n  return workerData.interface;\n}\nasync function runWorker(_ref4, config) {\n  let {\n    options,\n    readable,\n    writable,\n    onTaskFinished\n  } = _ref4;\n  try {\n    const codecStream = new CodecStream(options, config);\n    await readable.pipeThrough(codecStream).pipeTo(writable, {\n      preventClose: true,\n      preventAbort: true\n    });\n    const {\n      signature,\n      inputSize,\n      outputSize\n    } = codecStream;\n    return {\n      signature,\n      inputSize,\n      outputSize\n    };\n  } finally {\n    onTaskFinished();\n  }\n}\nasync function runWebWorker(workerData, config) {\n  let resolveResult, rejectResult;\n  const result = new Promise((resolve, reject) => {\n    resolveResult = resolve;\n    rejectResult = reject;\n  });\n  Object.assign(workerData, {\n    reader: null,\n    writer: null,\n    resolveResult,\n    rejectResult,\n    result\n  });\n  const {\n    readable,\n    options,\n    scripts\n  } = workerData;\n  const {\n    writable,\n    closed\n  } = watchClosedStream(workerData.writable);\n  const streamsTransferred = sendMessage({\n    type: MESSAGE_START,\n    scripts: scripts.slice(1),\n    options,\n    config,\n    readable,\n    writable\n  }, workerData);\n  if (!streamsTransferred) {\n    Object.assign(workerData, {\n      reader: readable.getReader(),\n      writer: writable.getWriter()\n    });\n  }\n  const resultValue = await result;\n  if (!streamsTransferred) {\n    await writable.getWriter().close();\n  }\n  await closed;\n  return resultValue;\n}\nfunction watchClosedStream(writableSource) {\n  let resolveStreamClosed;\n  const closed = new Promise(resolve => resolveStreamClosed = resolve);\n  const writable = new WritableStream({\n    async write(chunk) {\n      const writer = writableSource.getWriter();\n      await writer.ready;\n      await writer.write(chunk);\n      writer.releaseLock();\n    },\n    close() {\n      resolveStreamClosed();\n    },\n    abort(reason) {\n      const writer = writableSource.getWriter();\n      return writer.abort(reason);\n    }\n  });\n  return {\n    writable,\n    closed\n  };\n}\nlet classicWorkersSupported = true;\nlet transferStreamsSupported = true;\nfunction getWebWorker(url, baseURL, workerData) {\n  const workerOptions = {\n    type: \"module\"\n  };\n  let scriptUrl, worker;\n  // deno-lint-ignore valid-typeof\n  if (typeof url == FUNCTION_TYPE) {\n    url = url();\n  }\n  try {\n    scriptUrl = new URL(url, baseURL);\n    // eslint-disable-next-line no-unused-vars\n  } catch (_) {\n    scriptUrl = url;\n  }\n  if (classicWorkersSupported) {\n    try {\n      worker = new Worker(scriptUrl);\n      // eslint-disable-next-line no-unused-vars\n    } catch (_) {\n      classicWorkersSupported = false;\n      worker = new Worker(scriptUrl, workerOptions);\n    }\n  } else {\n    worker = new Worker(scriptUrl, workerOptions);\n  }\n  worker.addEventListener(MESSAGE_EVENT_TYPE, event => onMessage(event, workerData));\n  return worker;\n}\nfunction sendMessage(message, _ref5) {\n  let {\n    worker,\n    writer,\n    onTaskFinished,\n    transferStreams\n  } = _ref5;\n  try {\n    const {\n      value,\n      readable,\n      writable\n    } = message;\n    const transferables = [];\n    if (value) {\n      if (value.byteLength < value.buffer.byteLength) {\n        message.value = value.buffer.slice(0, value.byteLength);\n      } else {\n        message.value = value.buffer;\n      }\n      transferables.push(message.value);\n    }\n    if (transferStreams && transferStreamsSupported) {\n      if (readable) {\n        transferables.push(readable);\n      }\n      if (writable) {\n        transferables.push(writable);\n      }\n    } else {\n      message.readable = message.writable = null;\n    }\n    if (transferables.length) {\n      try {\n        worker.postMessage(message, transferables);\n        return true;\n        // eslint-disable-next-line no-unused-vars\n      } catch (_) {\n        transferStreamsSupported = false;\n        message.readable = message.writable = null;\n        worker.postMessage(message);\n      }\n    } else {\n      worker.postMessage(message);\n    }\n  } catch (error) {\n    if (writer) {\n      writer.releaseLock();\n    }\n    onTaskFinished();\n    throw error;\n  }\n}\nasync function onMessage(_ref6, workerData) {\n  let {\n    data\n  } = _ref6;\n  const {\n    type,\n    value,\n    messageId,\n    result,\n    error\n  } = data;\n  const {\n    reader,\n    writer,\n    resolveResult,\n    rejectResult,\n    onTaskFinished\n  } = workerData;\n  try {\n    if (error) {\n      const {\n        message,\n        stack,\n        code,\n        name\n      } = error;\n      const responseError = new Error(message);\n      Object.assign(responseError, {\n        stack,\n        code,\n        name\n      });\n      close(responseError);\n    } else {\n      if (type == MESSAGE_PULL) {\n        const {\n          value,\n          done\n        } = await reader.read();\n        sendMessage({\n          type: MESSAGE_DATA,\n          value,\n          done,\n          messageId\n        }, workerData);\n      }\n      if (type == MESSAGE_DATA) {\n        await writer.ready;\n        await writer.write(new Uint8Array(value));\n        sendMessage({\n          type: MESSAGE_ACK_DATA,\n          messageId\n        }, workerData);\n      }\n      if (type == MESSAGE_CLOSE) {\n        close(null, result);\n      }\n    }\n  } catch (error) {\n    sendMessage({\n      type: MESSAGE_CLOSE,\n      messageId\n    }, workerData);\n    close(error);\n  }\n  function close(error, result) {\n    if (error) {\n      rejectResult(error);\n    } else {\n      resolveResult(result);\n    }\n    if (writer) {\n      writer.releaseLock();\n    }\n    onTaskFinished();\n  }\n}","map":{"version":3,"names":["UNDEFINED_TYPE","FUNCTION_TYPE","CodecStream","ChunkStream","MESSAGE_EVENT_TYPE","MESSAGE_START","MESSAGE_PULL","MESSAGE_DATA","MESSAGE_ACK_DATA","MESSAGE_CLOSE","WEB_WORKERS_SUPPORTED","Worker","CodecWorker","constructor","workerData","_ref","_ref2","onTaskFinished","readable","writable","options","config","streamOptions","useWebWorkers","transferStreams","scripts","signal","Object","assign","busy","pipeThrough","chunkSize","ProgressWatcherStream","terminate","Promise","resolve","worker","resolveTerminated","interface","terminated","createWebWorkerInterface","createWorkerInterface","TransformStream","readableSource","_ref3","onstart","onprogress","size","onend","chunkOffset","start","callHandler","transform","chunk","controller","length","enqueue","flush","handler","_len","arguments","parameters","Array","_key","_","run","runWorker","baseURL","getWebWorker","runWebWorker","_ref4","codecStream","pipeTo","preventClose","preventAbort","signature","inputSize","outputSize","resolveResult","rejectResult","result","reject","reader","writer","closed","watchClosedStream","streamsTransferred","sendMessage","type","slice","getReader","getWriter","resultValue","close","writableSource","resolveStreamClosed","WritableStream","write","ready","releaseLock","abort","reason","classicWorkersSupported","transferStreamsSupported","url","workerOptions","scriptUrl","URL","addEventListener","event","onMessage","message","_ref5","value","transferables","byteLength","buffer","push","postMessage","error","_ref6","data","messageId","stack","code","name","responseError","Error","done","read","Uint8Array"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/node_modules/@zip.js/zip.js/lib/core/codec-worker.js"],"sourcesContent":["/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global Worker, URL, TransformStream, WritableStream */\n\nimport {\n\tUNDEFINED_TYPE,\n\tFUNCTION_TYPE\n} from \"./constants.js\";\nimport {\n\tCodecStream,\n\tChunkStream,\n\tMESSAGE_EVENT_TYPE,\n\tMESSAGE_START,\n\tMESSAGE_PULL,\n\tMESSAGE_DATA,\n\tMESSAGE_ACK_DATA,\n\tMESSAGE_CLOSE\n} from \"./streams/codec-stream.js\";\n\n// deno-lint-ignore valid-typeof\nlet WEB_WORKERS_SUPPORTED = typeof Worker != UNDEFINED_TYPE;\n\nexport {\n\tCodecWorker\n};\n\nclass CodecWorker {\n\n\tconstructor(workerData, { readable, writable }, { options, config, streamOptions, useWebWorkers, transferStreams, scripts }, onTaskFinished) {\n\t\tconst { signal } = streamOptions;\n\t\tObject.assign(workerData, {\n\t\t\tbusy: true,\n\t\t\treadable: readable\n\t\t\t\t.pipeThrough(new ChunkStream(config.chunkSize))\n\t\t\t\t.pipeThrough(new ProgressWatcherStream(readable, streamOptions), { signal }),\n\t\t\twritable,\n\t\t\toptions: Object.assign({}, options),\n\t\t\tscripts,\n\t\t\ttransferStreams,\n\t\t\tterminate() {\n\t\t\t\treturn new Promise(resolve => {\n\t\t\t\t\tconst { worker, busy } = workerData;\n\t\t\t\t\tif (worker) {\n\t\t\t\t\t\tif (busy) {\n\t\t\t\t\t\t\tworkerData.resolveTerminated = resolve;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tworker.terminate();\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tworkerData.interface = null;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\t\t\tonTaskFinished() {\n\t\t\t\tconst { resolveTerminated } = workerData;\n\t\t\t\tif (resolveTerminated) {\n\t\t\t\t\tworkerData.resolveTerminated = null;\n\t\t\t\t\tworkerData.terminated = true;\n\t\t\t\t\tworkerData.worker.terminate();\n\t\t\t\t\tresolveTerminated();\n\t\t\t\t}\n\t\t\t\tworkerData.busy = false;\n\t\t\t\tonTaskFinished(workerData);\n\t\t\t}\n\t\t});\n\t\treturn (useWebWorkers && WEB_WORKERS_SUPPORTED ? createWebWorkerInterface : createWorkerInterface)(workerData, config);\n\t}\n}\n\nclass ProgressWatcherStream extends TransformStream {\n\n\tconstructor(readableSource, { onstart, onprogress, size, onend }) {\n\t\tlet chunkOffset = 0;\n\t\tsuper({\n\t\t\tasync start() {\n\t\t\t\tif (onstart) {\n\t\t\t\t\tawait callHandler(onstart, size);\n\t\t\t\t}\n\t\t\t},\n\t\t\tasync transform(chunk, controller) {\n\t\t\t\tchunkOffset += chunk.length;\n\t\t\t\tif (onprogress) {\n\t\t\t\t\tawait callHandler(onprogress, chunkOffset, size);\n\t\t\t\t}\n\t\t\t\tcontroller.enqueue(chunk);\n\t\t\t},\n\t\t\tasync flush() {\n\t\t\t\treadableSource.size = chunkOffset;\n\t\t\t\tif (onend) {\n\t\t\t\t\tawait callHandler(onend, chunkOffset);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nasync function callHandler(handler, ...parameters) {\n\ttry {\n\t\tawait handler(...parameters);\n\t\t// eslint-disable-next-line no-unused-vars\n\t} catch (_) {\n\t\t// ignored\n\t}\n}\n\nfunction createWorkerInterface(workerData, config) {\n\treturn {\n\t\trun: () => runWorker(workerData, config)\n\t};\n}\n\nfunction createWebWorkerInterface(workerData, config) {\n\tconst { baseURL, chunkSize } = config;\n\tif (!workerData.interface) {\n\t\tlet worker;\n\t\ttry {\n\t\t\tworker = getWebWorker(workerData.scripts[0], baseURL, workerData);\n\t\t\t// eslint-disable-next-line no-unused-vars\n\t\t} catch (_) {\n\t\t\tWEB_WORKERS_SUPPORTED = false;\n\t\t\treturn createWorkerInterface(workerData, config);\n\t\t}\n\t\tObject.assign(workerData, {\n\t\t\tworker,\n\t\t\tinterface: {\n\t\t\t\trun: () => runWebWorker(workerData, { chunkSize })\n\t\t\t}\n\t\t});\n\t}\n\treturn workerData.interface;\n}\n\nasync function runWorker({ options, readable, writable, onTaskFinished }, config) {\n\ttry {\n\t\tconst codecStream = new CodecStream(options, config);\n\t\tawait readable.pipeThrough(codecStream).pipeTo(writable, { preventClose: true, preventAbort: true });\n\t\tconst {\n\t\t\tsignature,\n\t\t\tinputSize,\n\t\t\toutputSize\n\t\t} = codecStream;\n\t\treturn {\n\t\t\tsignature,\n\t\t\tinputSize,\n\t\t\toutputSize\n\t\t};\n\t} finally {\n\t\tonTaskFinished();\n\t}\n}\n\nasync function runWebWorker(workerData, config) {\n\tlet resolveResult, rejectResult;\n\tconst result = new Promise((resolve, reject) => {\n\t\tresolveResult = resolve;\n\t\trejectResult = reject;\n\t});\n\tObject.assign(workerData, {\n\t\treader: null,\n\t\twriter: null,\n\t\tresolveResult,\n\t\trejectResult,\n\t\tresult\n\t});\n\tconst { readable, options, scripts } = workerData;\n\tconst { writable, closed } = watchClosedStream(workerData.writable);\n\tconst streamsTransferred = sendMessage({\n\t\ttype: MESSAGE_START,\n\t\tscripts: scripts.slice(1),\n\t\toptions,\n\t\tconfig,\n\t\treadable,\n\t\twritable\n\t}, workerData);\n\tif (!streamsTransferred) {\n\t\tObject.assign(workerData, {\n\t\t\treader: readable.getReader(),\n\t\t\twriter: writable.getWriter()\n\t\t});\n\t}\n\tconst resultValue = await result;\n\tif (!streamsTransferred) {\n\t\tawait writable.getWriter().close();\n\t}\n\tawait closed;\n\treturn resultValue;\n}\n\nfunction watchClosedStream(writableSource) {\n\tlet resolveStreamClosed;\n\tconst closed = new Promise(resolve => resolveStreamClosed = resolve);\n\tconst writable = new WritableStream({\n\t\tasync write(chunk) {\n\t\t\tconst writer = writableSource.getWriter();\n\t\t\tawait writer.ready;\n\t\t\tawait writer.write(chunk);\n\t\t\twriter.releaseLock();\n\t\t},\n\t\tclose() {\n\t\t\tresolveStreamClosed();\n\t\t},\n\t\tabort(reason) {\n\t\t\tconst writer = writableSource.getWriter();\n\t\t\treturn writer.abort(reason);\n\t\t}\n\t});\n\treturn { writable, closed };\n}\n\nlet classicWorkersSupported = true;\nlet transferStreamsSupported = true;\n\nfunction getWebWorker(url, baseURL, workerData) {\n\tconst workerOptions = { type: \"module\" };\n\tlet scriptUrl, worker;\n\t// deno-lint-ignore valid-typeof\n\tif (typeof url == FUNCTION_TYPE) {\n\t\turl = url();\n\t}\n\ttry {\n\t\tscriptUrl = new URL(url, baseURL);\n\t\t// eslint-disable-next-line no-unused-vars\n\t} catch (_) {\n\t\tscriptUrl = url;\n\t}\n\tif (classicWorkersSupported) {\n\t\ttry {\n\t\t\tworker = new Worker(scriptUrl);\n\t\t\t// eslint-disable-next-line no-unused-vars\n\t\t} catch (_) {\n\t\t\tclassicWorkersSupported = false;\n\t\t\tworker = new Worker(scriptUrl, workerOptions);\n\t\t}\n\t} else {\n\t\tworker = new Worker(scriptUrl, workerOptions);\n\t}\n\tworker.addEventListener(MESSAGE_EVENT_TYPE, event => onMessage(event, workerData));\n\treturn worker;\n}\n\nfunction sendMessage(message, { worker, writer, onTaskFinished, transferStreams }) {\n\ttry {\n\t\tconst { value, readable, writable } = message;\n\t\tconst transferables = [];\n\t\tif (value) {\n\t\t\tif (value.byteLength < value.buffer.byteLength) {\n\t\t\t\tmessage.value = value.buffer.slice(0, value.byteLength);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmessage.value = value.buffer;\n\t\t\t}\n\t\t\ttransferables.push(message.value);\n\t\t}\n\t\tif (transferStreams && transferStreamsSupported) {\n\t\t\tif (readable) {\n\t\t\t\ttransferables.push(readable);\n\t\t\t}\n\t\t\tif (writable) {\n\t\t\t\ttransferables.push(writable);\n\t\t\t}\n\t\t} else {\n\t\t\tmessage.readable = message.writable = null;\n\t\t}\n\t\tif (transferables.length) {\n\t\t\ttry {\n\t\t\t\tworker.postMessage(message, transferables);\n\t\t\t\treturn true;\n\t\t\t\t// eslint-disable-next-line no-unused-vars\n\t\t\t} catch (_) {\n\t\t\t\ttransferStreamsSupported = false;\n\t\t\t\tmessage.readable = message.writable = null;\n\t\t\t\tworker.postMessage(message);\n\t\t\t}\n\t\t} else {\n\t\t\tworker.postMessage(message);\n\t\t}\n\t} catch (error) {\n\t\tif (writer) {\n\t\t\twriter.releaseLock();\n\t\t}\n\t\tonTaskFinished();\n\t\tthrow error;\n\t}\n}\n\nasync function onMessage({ data }, workerData) {\n\tconst { type, value, messageId, result, error } = data;\n\tconst { reader, writer, resolveResult, rejectResult, onTaskFinished } = workerData;\n\ttry {\n\t\tif (error) {\n\t\t\tconst { message, stack, code, name } = error;\n\t\t\tconst responseError = new Error(message);\n\t\t\tObject.assign(responseError, { stack, code, name });\n\t\t\tclose(responseError);\n\t\t} else {\n\t\t\tif (type == MESSAGE_PULL) {\n\t\t\t\tconst { value, done } = await reader.read();\n\t\t\t\tsendMessage({ type: MESSAGE_DATA, value, done, messageId }, workerData);\n\t\t\t}\n\t\t\tif (type == MESSAGE_DATA) {\n\t\t\t\tawait writer.ready;\n\t\t\t\tawait writer.write(new Uint8Array(value));\n\t\t\t\tsendMessage({ type: MESSAGE_ACK_DATA, messageId }, workerData);\n\t\t\t}\n\t\t\tif (type == MESSAGE_CLOSE) {\n\t\t\t\tclose(null, result);\n\t\t\t}\n\t\t}\n\t} catch (error) {\n\t\tsendMessage({ type: MESSAGE_CLOSE, messageId }, workerData);\n\t\tclose(error);\n\t}\n\n\tfunction close(error, result) {\n\t\tif (error) {\n\t\t\trejectResult(error);\n\t\t} else {\n\t\t\tresolveResult(result);\n\t\t}\n\t\tif (writer) {\n\t\t\twriter.releaseLock();\n\t\t}\n\t\tonTaskFinished();\n\t}\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}