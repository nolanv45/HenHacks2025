{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport { signal as t } from \"../../../core/signal.js\";\nimport { InputHandler as e } from \"../InputHandler.js\";\nclass i extends e {\n  get multiTouchActive() {\n    return this._multiTouchActive.value;\n  }\n  constructor() {\n    super(!0), this._activeTouchPointerIds = new Set(), this._multiTouchActive = t(!1), this._onPointerAdd = _ref => {\n      let {\n        data: t\n      } = _ref;\n      \"touch\" === t.pointerType && (this._activeTouchPointerIds.add(t.native.pointerId), this._update());\n    }, this._onPointerRemove = _ref2 => {\n      let {\n        data: t\n      } = _ref2;\n      \"touch\" === t.pointerType && (this._activeTouchPointerIds.delete(t.native.pointerId), this._update());\n    }, this.registerIncoming(\"pointer-down\", this._onPointerAdd), this.registerIncoming(\"pointer-up\", this._onPointerRemove), this.registerIncoming(\"pointer-capture-lost\", this._onPointerRemove), this.registerIncoming(\"pointer-cancel\", this._onPointerRemove);\n  }\n  _update() {\n    this._multiTouchActive.value = this._activeTouchPointerIds.size > 1;\n  }\n}\nexport { i as MultiTouch };","map":{"version":3,"names":["signal","t","InputHandler","e","i","multiTouchActive","_multiTouchActive","value","constructor","_activeTouchPointerIds","Set","_onPointerAdd","_ref","data","pointerType","add","native","pointerId","_update","_onPointerRemove","_ref2","delete","registerIncoming","size","MultiTouch"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/node_modules/@arcgis/core/views/input/handlers/MultiTouch.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{signal as t}from\"../../../core/signal.js\";import{InputHandler as e}from\"../InputHandler.js\";class i extends e{get multiTouchActive(){return this._multiTouchActive.value}constructor(){super(!0),this._activeTouchPointerIds=new Set,this._multiTouchActive=t(!1),this._onPointerAdd=({data:t})=>{\"touch\"===t.pointerType&&(this._activeTouchPointerIds.add(t.native.pointerId),this._update())},this._onPointerRemove=({data:t})=>{\"touch\"===t.pointerType&&(this._activeTouchPointerIds.delete(t.native.pointerId),this._update())},this.registerIncoming(\"pointer-down\",this._onPointerAdd),this.registerIncoming(\"pointer-up\",this._onPointerRemove),this.registerIncoming(\"pointer-capture-lost\",this._onPointerRemove),this.registerIncoming(\"pointer-cancel\",this._onPointerRemove)}_update(){this._multiTouchActive.value=this._activeTouchPointerIds.size>1}}export{i as MultiTouch};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAAOA,MAAM,IAAIC,CAAC,QAAK,yBAAyB;AAAC,SAAOC,YAAY,IAAIC,CAAC,QAAK,oBAAoB;AAAC,MAAMC,CAAC,SAASD,CAAC;EAAC,IAAIE,gBAAgBA,CAAA,EAAE;IAAC,OAAO,IAAI,CAACC,iBAAiB,CAACC,KAAK;EAAA;EAACC,WAAWA,CAAA,EAAE;IAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAACC,sBAAsB,GAAC,IAAIC,GAAG,CAAD,CAAC,EAAC,IAAI,CAACJ,iBAAiB,GAACL,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAACU,aAAa,GAACC,IAAA,IAAY;MAAA,IAAX;QAACC,IAAI,EAACZ;MAAC,CAAC,GAAAW,IAAA;MAAI,OAAO,KAAGX,CAAC,CAACa,WAAW,KAAG,IAAI,CAACL,sBAAsB,CAACM,GAAG,CAACd,CAAC,CAACe,MAAM,CAACC,SAAS,CAAC,EAAC,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;IAAA,CAAC,EAAC,IAAI,CAACC,gBAAgB,GAACC,KAAA,IAAY;MAAA,IAAX;QAACP,IAAI,EAACZ;MAAC,CAAC,GAAAmB,KAAA;MAAI,OAAO,KAAGnB,CAAC,CAACa,WAAW,KAAG,IAAI,CAACL,sBAAsB,CAACY,MAAM,CAACpB,CAAC,CAACe,MAAM,CAACC,SAAS,CAAC,EAAC,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;IAAA,CAAC,EAAC,IAAI,CAACI,gBAAgB,CAAC,cAAc,EAAC,IAAI,CAACX,aAAa,CAAC,EAAC,IAAI,CAACW,gBAAgB,CAAC,YAAY,EAAC,IAAI,CAACH,gBAAgB,CAAC,EAAC,IAAI,CAACG,gBAAgB,CAAC,sBAAsB,EAAC,IAAI,CAACH,gBAAgB,CAAC,EAAC,IAAI,CAACG,gBAAgB,CAAC,gBAAgB,EAAC,IAAI,CAACH,gBAAgB,CAAC;EAAA;EAACD,OAAOA,CAAA,EAAE;IAAC,IAAI,CAACZ,iBAAiB,CAACC,KAAK,GAAC,IAAI,CAACE,sBAAsB,CAACc,IAAI,GAAC,CAAC;EAAA;AAAC;AAAC,SAAOnB,CAAC,IAAIoB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}