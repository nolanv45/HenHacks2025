{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport { _ as e } from \"../../../chunks/tslib.es6.js\";\nimport t from \"../../../core/Error.js\";\nimport { assertIsSome as i } from \"../../../core/maybe.js\";\nimport { urlToObject as s } from \"../../../core/urlUtils.js\";\nimport { property as r } from \"../../../core/accessorSupport/decorators/property.js\";\nimport \"../../../core/has.js\";\nimport \"../../../core/Logger.js\";\nimport \"../../../core/RandomLCG.js\";\nimport { subclass as a } from \"../../../core/accessorSupport/decorators/subclass.js\";\nimport l from \"../../../geometry/Extent.js\";\nimport n from \"../../../geometry/Point.js\";\nimport o from \"../../../geometry/SpatialReference.js\";\nimport c from \"../RasterInfo.js\";\nimport m from \"../RasterStorageInfo.js\";\nimport u from \"../TileInfo.js\";\nimport { TilemapCache as h } from \"../TilemapCache.js\";\nimport f from \"./BaseRaster.js\";\nimport { setValidBoundary as p } from \"../rasterFunctions/pixelUtils.js\";\nimport d from \"../rasterTransforms/GCSShiftTransform.js\";\nimport { patchServiceInfo as y, fetchServiceRasterInfo as x } from \"../../../rest/imageService/fetchRasterInfo.js\";\nlet g = class extends f {\n  constructor() {\n    super(...arguments), this._levelOffset = 0, this._tilemapCache = null, this._slices = null, this.datasetFormat = \"RasterTileServer\", this.tileType = null;\n  }\n  async fetchRawTile(e, t, i, s = {}) {\n    const {\n        storageInfo: r,\n        extent: a\n      } = this.rasterInfo,\n      {\n        transposeInfo: l\n      } = r,\n      n = null != l && !!s.transposedVariableName;\n    if (this._slices && !n && null == s.sliceId) return null;\n    const o = n ? 0 : r.maximumPyramidLevel - e + this._levelOffset,\n      c = `${this.url}/tile/${o}/${t}/${i}`,\n      m = this._slices ? n ? {\n        variable: s.transposedVariableName\n      } : {\n        sliceId: s.sliceId || 0\n      } : null,\n      {\n        data: u\n      } = await this.request(c, {\n        query: m,\n        responseType: \"array-buffer\",\n        signal: s.signal\n      });\n    if (!u) return null;\n    const h = n ? l.tileSize : r.tileInfo.size,\n      f = await this.decodePixelBlock(u, {\n        width: h[0],\n        height: h[1],\n        planes: null,\n        pixelType: null,\n        isPoint: \"Elevation\" === this.tileType,\n        returnInterleaved: n,\n        noDataValue: this.rasterInfo.noDataValue\n      });\n    if (null == f) return null;\n    const d = r.blockBoundary[e];\n    if (\"jpg\" !== r.compression || i > d.minCol && i < d.maxCol && t > d.minRow && t < d.maxRow) return f;\n    const {\n        origin: y,\n        blockWidth: x,\n        blockHeight: g\n      } = r,\n      {\n        x: v,\n        y: S\n      } = this.getPyramidPixelSize(e),\n      I = Math.round((a.xmin - y.x) / v) % x,\n      w = Math.round((a.xmax - y.x) / v) % x || x,\n      j = Math.round((y.y - a.ymax) / S) % g,\n      M = Math.round((y.y - a.ymin) / S) % g || g,\n      b = i === d.minCol ? I : 0,\n      T = t === d.minRow ? j : 0,\n      _ = i === d.maxCol ? w : x,\n      O = t === d.maxRow ? M : g;\n    return p(f, {\n      x: b,\n      y: T\n    }, {\n      width: _ - b,\n      height: O - T\n    }), f;\n  }\n  getSliceIndex(e) {\n    if (!this._slices || null == e || 0 === e.length) return null;\n    const t = e;\n    for (let i = 0; i < this._slices.length; i++) {\n      const e = this._slices[i].multidimensionalDefinition;\n      if (e.length === t.length && !e.some(e => {\n        const i = t.find(t => e.variableName === t.variableName && t.dimensionName === e.dimensionName);\n        if (!i) return !0;\n        return (Array.isArray(e.values[0]) ? `${e.values[0][0]}-${e.values[0][1]}` : e.values[0]) !== (Array.isArray(i.values[0]) ? `${i.values[0][0]}-${i.values[0][1]}` : i.values[0]);\n      })) return i;\n    }\n    return null;\n  }\n  async fetchVariableStatisticsHistograms(e, t) {\n    const i = this.request(this.url + \"/statistics\", {\n        query: {\n          variable: e,\n          f: \"json\"\n        },\n        signal: t\n      }).then(e => e.data?.statistics),\n      s = this.request(this.url + \"/histograms\", {\n        query: {\n          variable: e,\n          f: \"json\"\n        },\n        signal: t\n      }).then(e => e.data?.histograms),\n      r = await Promise.all([i, s]);\n    return r[0] && r[0].forEach(e => {\n      e.avg = e.mean, e.stddev = e.standardDeviation;\n    }), r[1]?.[0]?.counts?.length || (r[1] = null), {\n      statistics: r[0] || null,\n      histograms: r[1] || null\n    };\n  }\n  async computeBestPyramidLevelForLocation(e, t = {}) {\n    if (!this._tilemapCache) return 0;\n    let i = this.identifyPixelLocation(e, 0, t.datumTransformation);\n    if (null === i) return null;\n    let s = 0;\n    const {\n      maximumPyramidLevel: r\n    } = this.rasterInfo.storageInfo;\n    let a = r - s + this._levelOffset;\n    const l = i.srcLocation;\n    for (; a >= 0;) {\n      try {\n        if (\"available\" === (await this._tilemapCache.fetchAvailability(a, i.row, i.col, t))) break;\n      } catch {}\n      if (a--, s++, i = this.identifyPixelLocation(l, s, t.datumTransformation), null === i) return null;\n    }\n    return -1 === a || null == i ? null : s;\n  }\n  async _open(e) {\n    const r = e?.signal,\n      a = this.sourceJSON ? {\n        data: this.sourceJSON\n      } : await this.request(this.url, {\n        query: {\n          f: \"json\"\n        },\n        signal: r\n      });\n    a.ssl && (this.url = this.url.replace(/^http:/i, \"https:\"));\n    const l = a.data;\n    if (this.sourceJSON = l, !l) throw new t(\"imageserverraster:open\", \"cannot initialize tiled image service, missing service info\");\n    if (!l.tileInfo) throw new t(\"imageserverraster:open\", \"use ImageryLayer to open non-tiled image services\");\n    this._fixScaleInServiceInfo();\n    const n = [\"jpg\", \"jpeg\", \"png\", \"png8\", \"png24\", \"png32\", \"mixed\"];\n    this.tileType = l.cacheType, null == this.tileType && (n.includes(l.tileInfo.format.toLowerCase()) ? this.tileType = \"Map\" : \"lerc\" === l.tileInfo.format.toLowerCase() ? this.tileType = \"Elevation\" : this.tileType = \"Raster\"), this.datasetName = l.name?.slice(l.name.indexOf(\"/\") + 1) ?? \"\";\n    const o = await this._fetchRasterInfo({\n      signal: r\n    });\n    if (null == o) throw new t(\"image-server-raster:open\", \"cannot initialize image service\");\n    y(o, l);\n    const c = \"Map\" === this.tileType ? v(l.tileInfo, l) : u.fromJSON(l.tileInfo);\n    i(c);\n    const [f, p] = this._computeMinMaxLOD(o, c),\n      {\n        extent: d,\n        pixelSize: x\n      } = o,\n      g = .5 / o.width * x.x,\n      I = Math.max(x.x, x.y),\n      {\n        lods: w\n      } = c;\n    (\"Map\" !== this.tileType && 0 !== l.maxScale || Math.abs(x.x - x.y) > g || !w.some(e => Math.abs(e.resolution - I) < g)) && (x.x = x.y = f.resolution, o.width = Math.ceil((d.xmax - d.xmin) / x.x - .1), o.height = Math.ceil((d.ymax - d.ymin) / x.y - .1));\n    const j = f.level - p.level,\n      [M, b] = c.size,\n      T = [],\n      _ = [];\n    w.forEach((e, t) => {\n      e.level >= p.level && e.level <= f.level && T.push({\n        x: e.resolution,\n        y: e.resolution\n      }), t < w.length - 1 && _.push(Math.round(10 * e.resolution / w[t + 1].resolution) / 10);\n    }), T.sort((e, t) => e.x - t.x);\n    const O = this.computeBlockBoundary(d, M, b, c.origin, T, j),\n      R = T.length > 1 ? T.slice(1) : null;\n    let z;\n    l.transposeInfo && (z = {\n      tileSize: [l.transposeInfo.rows, l.transposeInfo.cols],\n      packetSize: o.keyProperties?._yxs.PacketSize ?? 0\n    });\n    const N = _.length <= 1 || _.length >= 3 && _.slice(0, -1).every(e => e === _[0]) ? _[0] ?? 2 : Math.round(10 / (p.resolution / f.resolution) ** (-1 / j)) / 10;\n    if (o.storageInfo = new m({\n      blockWidth: c.size[0],\n      blockHeight: c.size[1],\n      pyramidBlockWidth: c.size[0],\n      pyramidBlockHeight: c.size[1],\n      pyramidResolutions: R,\n      pyramidScalingFactor: N,\n      compression: c.format,\n      origin: c.origin,\n      firstPyramidLevel: 1,\n      maximumPyramidLevel: j,\n      tileInfo: c,\n      transposeInfo: z,\n      blockBoundary: O\n    }), S(o), this._set(\"rasterInfo\", o), l.capabilities.toLowerCase().includes(\"tilemap\")) {\n      const e = {\n        tileInfo: o.storageInfo.tileInfo,\n        parsedUrl: s(this.url),\n        url: this.url,\n        tileServers: []\n      };\n      this._tilemapCache = new h({\n        layer: e\n      });\n    }\n  }\n  async _fetchRasterInfo(e) {\n    const t = this.sourceJSON;\n    if (\"Map\" === this.tileType) {\n      const e = t.fullExtent || t.extent,\n        i = Math.ceil((e.xmax - e.xmin) / t.pixelSizeX - .1),\n        s = Math.ceil((e.ymax - e.ymin) / t.pixelSizeY - .1),\n        r = o.fromJSON(t.spatialReference || e.spatialReference),\n        a = new n({\n          x: t.pixelSizeX,\n          y: t.pixelSizeY,\n          spatialReference: r\n        });\n      return new c({\n        width: i,\n        height: s,\n        bandCount: 3,\n        extent: l.fromJSON(e),\n        spatialReference: r,\n        pixelSize: a,\n        pixelType: \"u8\",\n        statistics: null,\n        keyProperties: {\n          DataType: \"processed\"\n        }\n      });\n    }\n    const {\n        signal: i\n      } = e,\n      s = x(this.url, this.sourceJSON, {\n        signal: i,\n        query: this.ioConfig.customFetchParameters\n      }),\n      r = t.hasMultidimensions ? this.request(`${this.url}/slices`, {\n        query: {\n          f: \"json\"\n        },\n        signal: i\n      }).then(e => e.data?.slices).catch(() => null) : null,\n      a = await Promise.all([s, r]);\n    return this._slices = a[1], a[0];\n  }\n  _fixScaleInServiceInfo() {\n    const {\n      sourceJSON: e\n    } = this;\n    e.minScale && e.minScale < 0 && (e.minScale = 0), e.maxScale && e.maxScale < 0 && (e.maxScale = 0);\n  }\n  _computeMinMaxLOD(e, t) {\n    const {\n        pixelSize: i\n      } = e,\n      s = .5 / e.width * i.x,\n      {\n        lods: r\n      } = t,\n      a = t.lodAt(Math.max.apply(null, r.map(e => e.level))),\n      l = t.lodAt(Math.min.apply(null, r.map(e => e.level))),\n      {\n        tileType: n\n      } = this;\n    if (\"Map\" === n) return this._levelOffset = r[0].level, [a, l];\n    if (\"Raster\" === n) {\n      return [r.find(e => e.resolution === i.x) ?? a, l];\n    }\n    const {\n      minScale: o,\n      maxScale: c\n    } = this.sourceJSON;\n    let m = a;\n    c > 0 && (m = r.find(e => Math.abs(e.scale - c) < s), m || (m = r.filter(e => e.scale > c).sort((e, t) => e.scale > t.scale ? 1 : -1)[0] ?? a));\n    let u = l;\n    return o > 0 && (u = r.find(e => Math.abs(e.scale - o) < s) ?? l, this._levelOffset = u.level - l.level), [m, u];\n  }\n};\nfunction v(e, t) {\n  if (!e) return null;\n  const {\n    minScale: i,\n    maxScale: s,\n    minLOD: r,\n    maxLOD: a\n  } = t;\n  if (null != r && null != a) return u.fromJSON({\n    ...e,\n    lods: e.lods.filter(({\n      level: e\n    }) => null != e && e >= r && e <= a)\n  });\n  if (0 !== i && 0 !== s) {\n    const t = e => Math.round(1e4 * e) / 1e4,\n      r = i ? t(i) : 1 / 0,\n      a = s ? t(s) : -1 / 0;\n    return u.fromJSON({\n      ...e,\n      lods: e.lods.filter(e => {\n        const i = t(e.scale);\n        return i <= r && i >= a;\n      })\n    });\n  }\n  return u.fromJSON(e);\n}\nfunction S(e) {\n  const {\n    extent: t,\n    spatialReference: i\n  } = e;\n  t.xmin > -1 && t.xmax > 181 && i?.wkid && i.isGeographic && (e.nativeExtent = e.extent, e.transform = new d(), e.extent = e.transform.forwardTransform(t));\n}\ne([r({\n  type: String,\n  json: {\n    write: !0\n  }\n})], g.prototype, \"datasetFormat\", void 0), e([r()], g.prototype, \"tileType\", void 0), g = e([a(\"esri.layers.support.rasterDatasets.ImageServerRaster\")], g);\nconst I = g;\nexport { I as default };","map":{"version":3,"names":["_","e","t","assertIsSome","i","urlToObject","s","property","r","subclass","a","l","n","o","c","m","u","TilemapCache","h","f","setValidBoundary","p","d","patchServiceInfo","y","fetchServiceRasterInfo","x","g","constructor","arguments","_levelOffset","_tilemapCache","_slices","datasetFormat","tileType","fetchRawTile","storageInfo","extent","rasterInfo","transposeInfo","transposedVariableName","sliceId","maximumPyramidLevel","url","variable","data","request","query","responseType","signal","tileSize","tileInfo","size","decodePixelBlock","width","height","planes","pixelType","isPoint","returnInterleaved","noDataValue","blockBoundary","compression","minCol","maxCol","minRow","maxRow","origin","blockWidth","blockHeight","v","S","getPyramidPixelSize","I","Math","round","xmin","w","xmax","j","ymax","M","ymin","b","T","O","getSliceIndex","length","multidimensionalDefinition","some","find","variableName","dimensionName","Array","isArray","values","fetchVariableStatisticsHistograms","then","statistics","histograms","Promise","all","forEach","avg","mean","stddev","standardDeviation","counts","computeBestPyramidLevelForLocation","identifyPixelLocation","datumTransformation","srcLocation","fetchAvailability","row","col","_open","sourceJSON","ssl","replace","_fixScaleInServiceInfo","cacheType","includes","format","toLowerCase","datasetName","name","slice","indexOf","_fetchRasterInfo","fromJSON","_computeMinMaxLOD","pixelSize","max","lods","maxScale","abs","resolution","ceil","level","push","sort","computeBlockBoundary","R","z","rows","cols","packetSize","keyProperties","_yxs","PacketSize","N","every","pyramidBlockWidth","pyramidBlockHeight","pyramidResolutions","pyramidScalingFactor","firstPyramidLevel","_set","capabilities","parsedUrl","tileServers","layer","fullExtent","pixelSizeX","pixelSizeY","spatialReference","bandCount","DataType","ioConfig","customFetchParameters","hasMultidimensions","slices","catch","minScale","lodAt","apply","map","min","scale","filter","minLOD","maxLOD","wkid","isGeographic","nativeExtent","transform","forwardTransform","type","String","json","write","prototype","default"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/node_modules/@arcgis/core/layers/support/rasterDatasets/ImageServerRaster.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{_ as e}from\"../../../chunks/tslib.es6.js\";import t from\"../../../core/Error.js\";import{assertIsSome as i}from\"../../../core/maybe.js\";import{urlToObject as s}from\"../../../core/urlUtils.js\";import{property as r}from\"../../../core/accessorSupport/decorators/property.js\";import\"../../../core/has.js\";import\"../../../core/Logger.js\";import\"../../../core/RandomLCG.js\";import{subclass as a}from\"../../../core/accessorSupport/decorators/subclass.js\";import l from\"../../../geometry/Extent.js\";import n from\"../../../geometry/Point.js\";import o from\"../../../geometry/SpatialReference.js\";import c from\"../RasterInfo.js\";import m from\"../RasterStorageInfo.js\";import u from\"../TileInfo.js\";import{TilemapCache as h}from\"../TilemapCache.js\";import f from\"./BaseRaster.js\";import{setValidBoundary as p}from\"../rasterFunctions/pixelUtils.js\";import d from\"../rasterTransforms/GCSShiftTransform.js\";import{patchServiceInfo as y,fetchServiceRasterInfo as x}from\"../../../rest/imageService/fetchRasterInfo.js\";let g=class extends f{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat=\"RasterTileServer\",this.tileType=null}async fetchRawTile(e,t,i,s={}){const{storageInfo:r,extent:a}=this.rasterInfo,{transposeInfo:l}=r,n=null!=l&&!!s.transposedVariableName;if(this._slices&&!n&&null==s.sliceId)return null;const o=n?0:r.maximumPyramidLevel-e+this._levelOffset,c=`${this.url}/tile/${o}/${t}/${i}`,m=this._slices?n?{variable:s.transposedVariableName}:{sliceId:s.sliceId||0}:null,{data:u}=await this.request(c,{query:m,responseType:\"array-buffer\",signal:s.signal});if(!u)return null;const h=n?l.tileSize:r.tileInfo.size,f=await this.decodePixelBlock(u,{width:h[0],height:h[1],planes:null,pixelType:null,isPoint:\"Elevation\"===this.tileType,returnInterleaved:n,noDataValue:this.rasterInfo.noDataValue});if(null==f)return null;const d=r.blockBoundary[e];if(\"jpg\"!==r.compression||i>d.minCol&&i<d.maxCol&&t>d.minRow&&t<d.maxRow)return f;const{origin:y,blockWidth:x,blockHeight:g}=r,{x:v,y:S}=this.getPyramidPixelSize(e),I=Math.round((a.xmin-y.x)/v)%x,w=Math.round((a.xmax-y.x)/v)%x||x,j=Math.round((y.y-a.ymax)/S)%g,M=Math.round((y.y-a.ymin)/S)%g||g,b=i===d.minCol?I:0,T=t===d.minRow?j:0,_=i===d.maxCol?w:x,O=t===d.maxRow?M:g;return p(f,{x:b,y:T},{width:_-b,height:O-T}),f}getSliceIndex(e){if(!this._slices||null==e||0===e.length)return null;const t=e;for(let i=0;i<this._slices.length;i++){const e=this._slices[i].multidimensionalDefinition;if(e.length===t.length&&!e.some((e=>{const i=t.find((t=>e.variableName===t.variableName&&t.dimensionName===e.dimensionName));if(!i)return!0;return(Array.isArray(e.values[0])?`${e.values[0][0]}-${e.values[0][1]}`:e.values[0])!==(Array.isArray(i.values[0])?`${i.values[0][0]}-${i.values[0][1]}`:i.values[0])})))return i}return null}async fetchVariableStatisticsHistograms(e,t){const i=this.request(this.url+\"/statistics\",{query:{variable:e,f:\"json\"},signal:t}).then((e=>e.data?.statistics)),s=this.request(this.url+\"/histograms\",{query:{variable:e,f:\"json\"},signal:t}).then((e=>e.data?.histograms)),r=await Promise.all([i,s]);return r[0]&&r[0].forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),r[1]?.[0]?.counts?.length||(r[1]=null),{statistics:r[0]||null,histograms:r[1]||null}}async computeBestPyramidLevelForLocation(e,t={}){if(!this._tilemapCache)return 0;let i=this.identifyPixelLocation(e,0,t.datumTransformation);if(null===i)return null;let s=0;const{maximumPyramidLevel:r}=this.rasterInfo.storageInfo;let a=r-s+this._levelOffset;const l=i.srcLocation;for(;a>=0;){try{if(\"available\"===await this._tilemapCache.fetchAvailability(a,i.row,i.col,t))break}catch{}if(a--,s++,i=this.identifyPixelLocation(l,s,t.datumTransformation),null===i)return null}return-1===a||null==i?null:s}async _open(e){const r=e?.signal,a=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:\"json\"},signal:r});a.ssl&&(this.url=this.url.replace(/^http:/i,\"https:\"));const l=a.data;if(this.sourceJSON=l,!l)throw new t(\"imageserverraster:open\",\"cannot initialize tiled image service, missing service info\");if(!l.tileInfo)throw new t(\"imageserverraster:open\",\"use ImageryLayer to open non-tiled image services\");this._fixScaleInServiceInfo();const n=[\"jpg\",\"jpeg\",\"png\",\"png8\",\"png24\",\"png32\",\"mixed\"];this.tileType=l.cacheType,null==this.tileType&&(n.includes(l.tileInfo.format.toLowerCase())?this.tileType=\"Map\":\"lerc\"===l.tileInfo.format.toLowerCase()?this.tileType=\"Elevation\":this.tileType=\"Raster\"),this.datasetName=l.name?.slice(l.name.indexOf(\"/\")+1)??\"\";const o=await this._fetchRasterInfo({signal:r});if(null==o)throw new t(\"image-server-raster:open\",\"cannot initialize image service\");y(o,l);const c=\"Map\"===this.tileType?v(l.tileInfo,l):u.fromJSON(l.tileInfo);i(c);const[f,p]=this._computeMinMaxLOD(o,c),{extent:d,pixelSize:x}=o,g=.5/o.width*x.x,I=Math.max(x.x,x.y),{lods:w}=c;(\"Map\"!==this.tileType&&0!==l.maxScale||Math.abs(x.x-x.y)>g||!w.some((e=>Math.abs(e.resolution-I)<g)))&&(x.x=x.y=f.resolution,o.width=Math.ceil((d.xmax-d.xmin)/x.x-.1),o.height=Math.ceil((d.ymax-d.ymin)/x.y-.1));const j=f.level-p.level,[M,b]=c.size,T=[],_=[];w.forEach(((e,t)=>{e.level>=p.level&&e.level<=f.level&&T.push({x:e.resolution,y:e.resolution}),t<w.length-1&&_.push(Math.round(10*e.resolution/w[t+1].resolution)/10)})),T.sort(((e,t)=>e.x-t.x));const O=this.computeBlockBoundary(d,M,b,c.origin,T,j),R=T.length>1?T.slice(1):null;let z;l.transposeInfo&&(z={tileSize:[l.transposeInfo.rows,l.transposeInfo.cols],packetSize:o.keyProperties?._yxs.PacketSize??0});const N=_.length<=1||_.length>=3&&_.slice(0,-1).every((e=>e===_[0]))?_[0]??2:Math.round(10/(p.resolution/f.resolution)**(-1/j))/10;if(o.storageInfo=new m({blockWidth:c.size[0],blockHeight:c.size[1],pyramidBlockWidth:c.size[0],pyramidBlockHeight:c.size[1],pyramidResolutions:R,pyramidScalingFactor:N,compression:c.format,origin:c.origin,firstPyramidLevel:1,maximumPyramidLevel:j,tileInfo:c,transposeInfo:z,blockBoundary:O}),S(o),this._set(\"rasterInfo\",o),l.capabilities.toLowerCase().includes(\"tilemap\")){const e={tileInfo:o.storageInfo.tileInfo,parsedUrl:s(this.url),url:this.url,tileServers:[]};this._tilemapCache=new h({layer:e})}}async _fetchRasterInfo(e){const t=this.sourceJSON;if(\"Map\"===this.tileType){const e=t.fullExtent||t.extent,i=Math.ceil((e.xmax-e.xmin)/t.pixelSizeX-.1),s=Math.ceil((e.ymax-e.ymin)/t.pixelSizeY-.1),r=o.fromJSON(t.spatialReference||e.spatialReference),a=new n({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:r});return new c({width:i,height:s,bandCount:3,extent:l.fromJSON(e),spatialReference:r,pixelSize:a,pixelType:\"u8\",statistics:null,keyProperties:{DataType:\"processed\"}})}const{signal:i}=e,s=x(this.url,this.sourceJSON,{signal:i,query:this.ioConfig.customFetchParameters}),r=t.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:\"json\"},signal:i}).then((e=>e.data?.slices)).catch((()=>null)):null,a=await Promise.all([s,r]);return this._slices=a[1],a[0]}_fixScaleInServiceInfo(){const{sourceJSON:e}=this;e.minScale&&e.minScale<0&&(e.minScale=0),e.maxScale&&e.maxScale<0&&(e.maxScale=0)}_computeMinMaxLOD(e,t){const{pixelSize:i}=e,s=.5/e.width*i.x,{lods:r}=t,a=t.lodAt(Math.max.apply(null,r.map((e=>e.level)))),l=t.lodAt(Math.min.apply(null,r.map((e=>e.level)))),{tileType:n}=this;if(\"Map\"===n)return this._levelOffset=r[0].level,[a,l];if(\"Raster\"===n){return[r.find((e=>e.resolution===i.x))??a,l]}const{minScale:o,maxScale:c}=this.sourceJSON;let m=a;c>0&&(m=r.find((e=>Math.abs(e.scale-c)<s)),m||(m=r.filter((e=>e.scale>c)).sort(((e,t)=>e.scale>t.scale?1:-1))[0]??a));let u=l;return o>0&&(u=r.find((e=>Math.abs(e.scale-o)<s))??l,this._levelOffset=u.level-l.level),[m,u]}};function v(e,t){if(!e)return null;const{minScale:i,maxScale:s,minLOD:r,maxLOD:a}=t;if(null!=r&&null!=a)return u.fromJSON({...e,lods:e.lods.filter((({level:e})=>null!=e&&e>=r&&e<=a))});if(0!==i&&0!==s){const t=e=>Math.round(1e4*e)/1e4,r=i?t(i):1/0,a=s?t(s):-1/0;return u.fromJSON({...e,lods:e.lods.filter((e=>{const i=t(e.scale);return i<=r&&i>=a}))})}return u.fromJSON(e)}function S(e){const{extent:t,spatialReference:i}=e;t.xmin>-1&&t.xmax>181&&i?.wkid&&i.isGeographic&&(e.nativeExtent=e.extent,e.transform=new d,e.extent=e.transform.forwardTransform(t))}e([r({type:String,json:{write:!0}})],g.prototype,\"datasetFormat\",void 0),e([r()],g.prototype,\"tileType\",void 0),g=e([a(\"esri.layers.support.rasterDatasets.ImageServerRaster\")],g);const I=g;export{I as default};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}