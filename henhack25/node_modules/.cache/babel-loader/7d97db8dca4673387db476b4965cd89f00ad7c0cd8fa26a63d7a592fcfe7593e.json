{"ast":null,"code":"import { getMemberType, parsePropertyValue } from \"./chunk-XKVBN44N.js\";\n\n// src/types.ts\nvar controllerSymbol = Symbol.for(\"controller\");\n\n// package.json\nvar name = \"@arcgis/components-controllers\";\n\n// src/utils.ts\nimport { isEsriInternalEnv } from \"@arcgis/components-utils\";\nvar isController = value => typeof value === \"object\" && value !== null && (controllerSymbol in value || \"hostConnected\" in value || \"hostDisconnected\" in value || \"hostUpdate\" in value || \"hostUpdated\" in value);\nvar devOnlySetPersistentControllerData = process.env.NODE_ENV !== \"production\" && isEsriInternalEnv() ? (controller, data) => {\n  const manager = controller.component.manager;\n  const controllers = \"_controllers\" in manager ? manager._controllers : void 0;\n  if (controllers === void 0) {\n    return void 0;\n  }\n  const index = Array.from(controllers).indexOf(controller);\n  if (index === -1) {\n    return;\n  }\n  const devOnlyControllerData = Symbol.for(`${name}: devOnlyControllerData`);\n  const el = controller.component.el;\n  el[devOnlyControllerData] ?? (el[devOnlyControllerData] = {});\n  el[devOnlyControllerData][index] = data;\n} : void 0;\nvar devOnlyGetPersistentControllerData = process.env.NODE_ENV !== \"production\" && isEsriInternalEnv() ? controller => {\n  const manager = controller.component.manager;\n  const controllers = \"_controllers\" in manager ? manager._controllers : void 0;\n  if (controllers === void 0) {\n    return void 0;\n  }\n  const index = Array.from(controllers).indexOf(controller);\n  const devOnlyControllerData = Symbol.for(`${name}: devOnlyControllerData`);\n  const el = controller.component.el;\n  return el[devOnlyControllerData]?.[index];\n} : void 0;\n\n// src/ControllerInternals.ts\nimport { isEsriInternalEnv as isEsriInternalEnv2 } from \"@arcgis/components-utils\";\nvar ambientComponent;\nfunction setAmbientComponent(component) {\n  if (ambientComponent === component) {\n    return;\n  }\n  ambientComponent = component;\n  queueMicrotask(() => {\n    if (ambientComponent === component) {\n      ambientComponent = void 0;\n    }\n  });\n}\nfunction retrieveComponent(name2) {\n  if (process.env.NODE_ENV !== \"production\" && ambientComponent === void 0) {\n    throw new Error([`Unable to find out which component ${name2 || \"this\"} controller `, \"belongs to. Possible causes:\\n\", \"- You might also have multiple versions of \", \"@arcgis/components-controllers package installed\\n\", ...(isEsriInternalEnv2() ? [\"- You tried to create controller outside the component. If so, \", \"please wrap your controller definition in an arrow function (like\", \"`const myController = ()=>makeController(...);`) and call that\", \"function inside the component (`my = myController();`), or \", \"define your controller using makeGenericController/GenericController \", \"instead.\\n\", \"- You tried to create a controller inside an async function. \", \"This is allowed without calling controller.use(). Make sure you \", \"use it like `await controller.use(useController())`.\"] : [])].join(\"\"));\n  }\n  return ambientComponent;\n}\nvar ambientControllers = [];\nfunction setParentController(controller) {\n  if (controller === void 0) {\n    ambientControllers = [];\n    return;\n  }\n  const index = ambientControllers.indexOf(controller);\n  ambientControllers = index === -1 ? [...ambientControllers, controller] : ambientControllers.slice(0, index + 1);\n  queueMicrotask(() => {\n    ambientControllers = [];\n  });\n}\nfunction retrieveParentControllers() {\n  return ambientControllers;\n}\nvar ambientChildController;\nfunction setAmbientChildController(controller) {\n  if (ambientChildController === controller) {\n    return;\n  }\n  ambientChildController = controller;\n  queueMicrotask(() => {\n    if (ambientChildController === controller) {\n      ambientChildController = void 0;\n    }\n  });\n}\nfunction retrieveAmbientChildController() {\n  const controller = ambientChildController;\n  ambientChildController = void 0;\n  return controller;\n}\nvar use = async (value, watchExports) => {\n  const controller = useRefSync(value);\n  if (controller === void 0) {\n    if (process.env.NODE_ENV !== \"production\" && isEsriInternalEnv2() && typeof watchExports === \"function\") {\n      throw new Error(`Unable to resolve a controller from the provided value, so can't watch it's exports. The value you passed is not a controller and not a controller exports. If your controller exports a literal value, try making your controller export an object instead`);\n    }\n    return value;\n  }\n  await controller.ready;\n  if (typeof watchExports === \"function\") {\n    if (process.env.NODE_ENV !== \"production\" && isEsriInternalEnv2() && controller.watchExports === void 0) {\n      throw new Error(`The controller must implement watchExports method to support watching exports`);\n    }\n    const unsubscribe = controller.watchExports(exports => watchExports(exports, unsubscribe));\n  }\n  return controller.exports;\n};\nvar useRef = async value => {\n  const controller = useRefSync(value);\n  if (process.env.NODE_ENV !== \"production\" && isEsriInternalEnv2() && controller === void 0) {\n    throw new Error(`Unable to resolve a controller from the provided value. The value you passed is not a controller and not a controller exports. If your controller exports a literal value, try making your controller export an object instead`);\n  }\n  await controller.ready;\n  return controller;\n};\nvar useRefSync = value => {\n  const component = retrieveComponent();\n  const controller = component.manager.internals.resolveExports(value);\n  if (controller !== void 0) {\n    return controller;\n  }\n  if (isController(value)) {\n    return value;\n  }\n  const ambientChildController2 = retrieveAmbientChildController();\n  if (ambientChildController2 !== void 0) {\n    return ambientChildController2;\n  }\n  return void 0;\n};\nvar shouldBypass = {\n  setter: false,\n  getter: false,\n  readOnly: false\n};\nvar elementToInstance = /* @__PURE__ */new WeakMap();\n\n// src/Controller.ts\nimport { Deferred, isEsriInternalEnv as isEsriInternalEnv3, safeAsyncCall, safeCall } from \"@arcgis/components-utils\";\nvar _a;\n_a = controllerSymbol;\nvar Controller = class {\n  constructor(component) {\n    this._callbacks = {\n      hostConnected: [],\n      hostDisconnected: [],\n      hostLoad: [],\n      hostLoaded: [],\n      hostUpdate: [],\n      hostUpdated: [],\n      hostDestroy: [],\n      hostLifecycle: []\n    };\n    this._ready = new Deferred();\n    this._lifecycleCleanups = [];\n    this.connectedCalled = false;\n    this._loadCalled = false;\n    this.loadedCalled = false;\n    this[_a] = true;\n    this.ready = this._ready.promise;\n    /*\n     * Setting default exports to \"this\" so that controllers that don't use\n     * exports/proxyExports(), could still be used as if they did\n     * (i.e with controller.use)\n     */\n    this._exports = makeProvisionalValue(this);\n    this._exportWatchers = /* @__PURE__ */new Set();\n    const resolvedComponent = toControllerHost(component ?? retrieveComponent(new.target.name));\n    if (process.env.NODE_ENV !== \"production\") {\n      Object.defineProperty(this, \"component\", {\n        writable: false,\n        enumerable: false,\n        configurable: true,\n        value: resolvedComponent\n      });\n      if (\"hostDestroy\" in this) {\n        this.component.manager.ensureHasDestroy?.();\n      }\n    } else {\n      this.component = resolvedComponent;\n    }\n    this.component.addController(this);\n    const manager = this.component.manager;\n    const isInControllerManager = manager === void 0;\n    if (!isInControllerManager) {\n      setParentController(this);\n      queueMicrotask(() => this.catchUpLifecycle());\n    }\n  }\n  /**\n   * If controller is being added dynamically, after the component\n   * construction, then trigger connected and load right away\n   */\n  catchUpLifecycle() {\n    const {\n      manager\n    } = this.component;\n    const connectedWillStillHappen = !manager.connectedCalled;\n    if (!connectedWillStillHappen && !this.connectedCalled) {\n      this.triggerConnected();\n    }\n    const loadWillStillHappen = !manager._loadCalled;\n    if (loadWillStillHappen) {\n      return;\n    }\n    this.triggerLoad().then(() => {\n      const loadedWillStillHappen = !manager.loadedCalled;\n      if (loadedWillStillHappen) {\n        return;\n      }\n      this.triggerLoaded();\n    }).catch(console.error);\n  }\n  get exports() {\n    return this._exports;\n  }\n  /**\n   * Set controller's exports property (for usage with proxyExports()) and mark\n   * controller as ready (for usage in other controllers). Also, triggers\n   * re-render of the component\n   */\n  set exports(exports) {\n    const oldExports = this._exports;\n    if (oldExports !== exports) {\n      this._exports = exports;\n      this._exportWatchers.forEach(safeCall);\n      if (this.connectedCalled && this.assignedProperty !== false) {\n        this.component.requestUpdate(this.assignedProperty, oldExports);\n      }\n    }\n    this._ready.resolve(exports);\n  }\n  setProvisionalExports(exports, proxy = true) {\n    this._exports = proxy ? makeProvisionalValue(exports) : exports;\n    this._exportWatchers.forEach(safeCall);\n  }\n  watchExports(callback) {\n    const safeCallback = () => callback(this._exports);\n    this._exportWatchers.add(safeCallback);\n    return () => void this._exportWatchers.delete(safeCallback);\n  }\n  /**\n   * A flexible utility for making sure a controller is loaded before it's used,\n   * regardless of how or where a controller was defined:\n   *\n   * @example\n   * makeGenericController(async (component, controller) => {\n   *   // Await some controller from the component:\n   *   await controller.use(component.someController);\n   *   // Initialize new controllers\n   *   await controller.use(load(importCoreReactiveUtils));\n   *   await controller.use(new ViewModelController(component,newWidgetsHomeHomeViewModel));\n   *   await controller.use(someController(component));\n   * });\n   *\n   * @remarks\n   * If your controller is not async, and you are not creating it async, then\n   * you are not required to use controller.use - you can use it directly.\n   * Similarly, accessing controllers after componentWillLoad callback does not\n   * require awaiting them as they are guaranteed to be loaded by then.\n   */\n  get use() {\n    setAmbientComponent(this.component);\n    return use;\n  }\n  /**\n   * Just like controller.use, but returns the controller itself, rather than it's\n   * exports\n   *\n   * Use cases:\n   * - You have a controller and you want to make sure it's loaded before you\n   *   try to use it\n   * - Your controller is not using exports, so you wish to access some props on\n   *   it directly\n   * - You have a controller exports only, and you want to retrieve the\n   *   controller itself. This is useful if you wish to call .watchExports() or\n   *   some other method on the controller\n   */\n  get useRef() {\n    setAmbientComponent(this.component);\n    return useRef;\n  }\n  /**\n   * Like useRef, but doesn't wait for the controller to get ready\n   *\n   * @internal\n   */\n  get useRefSync() {\n    setAmbientComponent(this.component);\n    return useRefSync;\n  }\n  controllerRemoved() {\n    if (this.component.el.isConnected) {\n      this.triggerDisconnected();\n    }\n    this.triggerDestroy();\n  }\n  // Register a lifecycle callback\n  onConnected(callback) {\n    this._callbacks.hostConnected.push(callback);\n  }\n  onDisconnected(callback) {\n    this._callbacks.hostDisconnected.push(callback);\n  }\n  onLoad(callback) {\n    this._callbacks.hostLoad.push(callback);\n  }\n  onLoaded(callback) {\n    this._callbacks.hostLoaded.push(callback);\n  }\n  onUpdate(callback) {\n    this._callbacks.hostUpdate.push(callback);\n  }\n  onUpdated(callback) {\n    this._callbacks.hostUpdated.push(callback);\n  }\n  onDestroy(callback) {\n    if (process.env.NODE_ENV !== \"production\" && isEsriInternalEnv3()) {\n      this.component.manager.ensureHasDestroy?.();\n    }\n    this._callbacks.hostDestroy.push(callback);\n  }\n  onLifecycle(callback) {\n    this._callbacks.hostLifecycle.push(callback);\n    if (this.connectedCalled && this.component.el.isConnected) {\n      this._callLifecycle(callback);\n    }\n  }\n  // Call each lifecycle hook\n  /** @internal */\n  triggerConnected() {\n    const genericController = this;\n    if (genericController.hostConnected) {\n      safeCall(genericController.hostConnected, genericController);\n    }\n    this._callbacks.hostConnected.forEach(safeCall);\n    this.triggerLifecycle();\n    this.connectedCalled = true;\n  }\n  /** @internal */\n  triggerDisconnected() {\n    const genericController = this;\n    if (genericController.hostDisconnected) {\n      safeCall(genericController.hostDisconnected, genericController);\n    }\n    this._callbacks.hostDisconnected.forEach(safeCall);\n    this._lifecycleCleanups.forEach(safeCall);\n    this._lifecycleCleanups = [];\n  }\n  /** @internal */\n  async triggerLoad() {\n    if (this._loadCalled) {\n      return;\n    }\n    this._loadCalled = true;\n    const genericController = this;\n    if (genericController.hostLoad) {\n      await safeAsyncCall(genericController.hostLoad, genericController);\n    }\n    if (this._callbacks.hostLoad.length > 0) {\n      await Promise.allSettled(this._callbacks.hostLoad.map(safeAsyncCall));\n    }\n    this._ready.resolve(this._exports);\n  }\n  /** @internal */\n  triggerLoaded() {\n    if (this.loadedCalled) {\n      return;\n    }\n    const genericController = this;\n    if (genericController.hostLoaded) {\n      safeCall(genericController.hostLoaded, genericController);\n    }\n    this._callbacks.hostLoaded.forEach(safeCall);\n    this.loadedCalled = true;\n  }\n  /** @internal */\n  triggerUpdate(changes) {\n    const genericController = this;\n    if (genericController.hostUpdate) {\n      safeCall(genericController.hostUpdate, genericController, changes);\n    }\n    this._callbacks.hostUpdate.forEach(callUpdate, changes);\n  }\n  /** @internal */\n  triggerUpdated(changes) {\n    const genericController = this;\n    if (genericController.hostUpdated) {\n      safeCall(genericController.hostUpdated, genericController, changes);\n    }\n    this._callbacks.hostUpdated.forEach(callUpdate, changes);\n  }\n  /** @internal */\n  triggerDestroy() {\n    const genericController = this;\n    if (genericController.hostDestroy) {\n      safeCall(genericController.hostDestroy, genericController);\n    }\n    this._callbacks.hostDestroy.forEach(safeCall);\n  }\n  /** @internal */\n  triggerLifecycle() {\n    const genericController = this;\n    if (genericController.hostLifecycle) {\n      this._callLifecycle(() => genericController.hostLifecycle());\n    }\n    this._callbacks.hostLifecycle.forEach(this._callLifecycle, this);\n  }\n  _callLifecycle(callback) {\n    setAmbientComponent(this.component);\n    const cleanupRaw = safeCall(callback);\n    const cleanup = Array.isArray(cleanupRaw) ? cleanupRaw : [cleanupRaw];\n    cleanup.forEach(cleanup2 => {\n      if (typeof cleanup2 === \"function\") {\n        this._lifecycleCleanups.push(cleanup2);\n      } else if (typeof cleanup2 === \"object\" && typeof cleanup2.remove === \"function\") {\n        this._lifecycleCleanups.push(cleanup2.remove);\n      }\n    });\n  }\n};\nfunction callUpdate(callback) {\n  safeCall(callback, void 0, this);\n}\nvar GenericController = Controller;\nfunction makeProvisionalValue(base) {\n  if (typeof base !== \"object\" && typeof base !== \"function\" || base === null) {\n    return base;\n  }\n  const proxy = new Proxy(base, {\n    get(target, prop, receiver) {\n      if (cyclical.has(prop) && prop in target && target[prop] === proxy) {\n        return void 0;\n      }\n      if (prop in target || prop in Promise.prototype || typeof prop === \"symbol\") {\n        return typeof target === \"function\" ? target[prop] : Reflect.get(target, prop, receiver);\n      }\n      if (process.env.NODE_ENV !== \"production\" && isEsriInternalEnv3()) {\n        if (process.env.NODE_ENV === \"test\" && (prop.startsWith(\"$$\") || prop.startsWith(\"@@\") || prop === \"nodeType\" || prop === \"tagName\" || prop === \"toJSON\" || prop === \"hasAttribute\")) {\n          return;\n        }\n        console.error(`Trying to access \"${prop.toString()}\" on the controller before it's loaded. ${accessBeforeLoad}`);\n      }\n      return void 0;\n    },\n    set: (target, prop, newValue, receiver) => {\n      if (process.env.NODE_ENV !== \"production\" && isEsriInternalEnv3()) {\n        console.error(`Trying to set \"${prop.toString()}\" on the controller before it's loaded. ${accessBeforeLoad}`);\n      }\n      return Reflect.set(target, prop, newValue, receiver);\n    }\n  });\n  return proxy;\n}\nvar cyclical = /* @__PURE__ */new Set([\"exports\", \"_exports\"]);\nvar accessBeforeLoad = process.env.NODE_ENV !== \"production\" && isEsriInternalEnv3() ? [\"This might be the case if you are trying to access an async controller in \", \"connectedCallback(). Or, if you are using it inside of \", \"componentWillLoad()/another controller without controller.use. Example correct \", \"usage:\\n\", \"makeController(async (component, controller)=>{ await controller.use(someOtherController); });\"].join(\"\") : void 0;\nfunction toControllerHost(component) {\n  if (process.env.NODE_ENV !== \"production\" && isEsriInternalEnv3()) {\n    if (\"addController\" in component) {\n      return component;\n    } else {\n      throw new Error(\"Component does not implement ControllerHost. This might be because you forgot to add 'manager: Controller<this> = useControllerManager(this);' in your component, or you tried to use some controller before that line\");\n    }\n  } else {\n    return component;\n  }\n}\n\n// src/trackPropertyKey.ts\nimport { safeCall as safeCall2 } from \"@arcgis/components-utils\";\nfunction trackPropertyKey(object, onResolved, defaultValue) {\n  const keys = Object.keys(object);\n  const keyCount = keys.length;\n  if (keyTrackMap === void 0) {\n    queueMicrotask(keyTrackResolve);\n  }\n  keyTrackMap ?? (keyTrackMap = /* @__PURE__ */new Map());\n  let pendingTrackers = keyTrackMap.get(object);\n  if (pendingTrackers === void 0) {\n    pendingTrackers = {\n      callbacks: [],\n      keyCount\n    };\n    keyTrackMap.set(object, pendingTrackers);\n  }\n  if (pendingTrackers.keyCount !== keyCount) {\n    pendingTrackers.callbacks.forEach(resolve => resolve(keys));\n    pendingTrackers.callbacks = [];\n    pendingTrackers.keyCount = keyCount;\n  }\n  pendingTrackers.callbacks.push(keys2 => {\n    const callback = key2 => safeCall2(onResolved, null, key2);\n    const key = keys2[keyCount];\n    if (key === void 0) {\n      callback(void 0);\n    } else if (object[key] === defaultValue) {\n      callback(key);\n    } else {\n      callback(void 0);\n    }\n  });\n  return defaultValue;\n}\nvar keyTrackMap = void 0;\nfunction keyTrackResolve() {\n  Array.from(keyTrackMap?.entries() ?? []).forEach(([object, {\n    callbacks\n  }]) => {\n    const keys = Object.keys(object);\n    callbacks.forEach(commit => commit(keys));\n  });\n  keyTrackMap = void 0;\n}\n\n// src/useWatch.ts\nimport { isEsriInternalEnv as isEsriInternalEnv4, safeCall as safeCall3 } from \"@arcgis/components-utils\";\nfunction watch(component, property, callback) {\n  var _a2;\n  const genericProperty = property;\n  if (process.env.NODE_ENV !== \"production\" && isEsriInternalEnv4()) {\n    const type = getMemberType(component, genericProperty);\n    if (type === void 0) {\n      throw new Error(component.manager.isLit ? `Trying to watch a non-@property, non-@state property \"${genericProperty}\". Either convert it into a @state() to be able to use watch() on it, or use the get/set syntax` : `Trying to watch a non-@Prop, non-@State property \"${genericProperty}\". Convert it into a @State() or @Prop property if you need to use watch() on it`);\n    }\n  }\n  const internals = component.manager.internals;\n  (_a2 = internals.allWatchers)[genericProperty] ?? (_a2[genericProperty] = []);\n  const watchers = internals.allWatchers[genericProperty];\n  const genericCallback = callback;\n  const safeCallback = (newValue, oldValue, propertyName) => safeCall3(genericCallback, null, newValue, oldValue, propertyName);\n  watchers.push(safeCallback);\n  return () => {\n    const index = watchers.indexOf(safeCallback);\n    if (index !== -1) {\n      watchers.splice(index, 1);\n    }\n  };\n}\n\n// src/trackPropKey.ts\nimport { safeCall as safeCall4 } from \"@arcgis/components-utils\";\n\n// src/ComponentInternals.ts\nimport { isEsriInternalEnv as isEsriInternalEnv5 } from \"@arcgis/components-utils\";\nvar ComponentInternals = class {\n  constructor(component) {\n    /**\n     * When watchers are set, they are set into `allWatchers`. When watchers are\n     * read in the setter, they are read from `enabledWatchers`.\n     *\n     * In Stencil, on connectedCallback(), controller manager does\n     * `enabledWatchers=allWatchers`. Reasoning:\n     * - This disables watchers until connected callback (matches behavior of\n     *   Stencil's watchers)\n     * - This removes the need for a check in the setter for whether the watchers\n     *   were enabled already or not (as getters/setters are hot path, and should\n     *   be streamlined)\n     *\n     * In Lit, we set enabledWatchers to allWatchers in the constructor.\n     * Reasoning:\n     * - While in Stencil all user provided properties are either set before the\n     *   component constructor (this is possible since Stencil's props store is\n     *   externalized) or after connectedCallback, in Lit the properties may be\n     *   set by attributeChangedCallback before connectedCallback. Thus, we need\n     *   to enable watchers even before connectedCallback.\n     * - This means, that a watcher set for some prop before your component got\n     *   a chance to set the default value will trigger the watcher when the\n     *   default value is set - but, that is inline with Lit's willUpdate behavior\n     *   of triggering for default values AND, the only way to set a watcher\n     *   before default value is if you called watcher inside a controller. For\n     *   now, there are no controllers written outside of arcgis-map-components\n     *   package, so I was able to verify that this change would have no\n     *   negative impact.\n     *\n     * In either way, I plan to remove watchers from controllers once Stencil\n     * support is removed.\n     */\n    this.enabledWatchers = {};\n    this.allWatchers = {};\n    /**\n     * \"readOnly\" is not enabled initially since we need to allow to set property\n     * default values in the constructor.\n     * For Stencil, readonly is enabled by the `readonly()` controller.\n     * For Lit, we have the following logic:\n     */\n    this.enableReadonly = () => {\n      this.enableReadonly = void 0;\n      if (!this.component.manager.isLit) {\n        return;\n      }\n      const internals = this.component.manager.internals;\n      Object.entries(internals.members).forEach(([name2, [type]]) => {\n        var _a2;\n        const isReadOnly = type & 2048 /* ReadOnly */;\n        if (isReadOnly) {\n          (_a2 = internals.setters)[name2] ?? (_a2[name2] = []);\n          internals.setters[name2].push(internals.readonlySetter);\n        }\n      });\n    };\n    this.trackedValue = nothing;\n    this.keyTrackers = [];\n    this.getters = {};\n    this.setters = {};\n    this.accessorGetter = {};\n    this.accessorSetter = {};\n    this._exports = /* @__PURE__ */new WeakMap();\n    this.readonlySetter = (newValue, _oldValue, property) => {\n      if (shouldBypass.readOnly) {\n        return newValue;\n      }\n      throw new Error(`Cannot assign to read-only property \"${property}\" of ${this.component.el.tagName.toLowerCase()}. Trying to assign \"${String(newValue)}\"`);\n    };\n    if (process.env.NODE_ENV !== \"production\") {\n      Object.defineProperty(this, \"component\", {\n        writable: false,\n        enumerable: false,\n        configurable: true,\n        value: component\n      });\n    } else {\n      this.component = component;\n    }\n  }\n  firePropTrackers(key, value) {\n    const trackers = this.keyTrackers;\n    this.trackedValue = nothing;\n    this.keyTrackers = [];\n    trackers.forEach(tracker => tracker(key, value));\n  }\n  // REFACTOR: once Stencil is no longer supported, simplify this with Lit's getPropertyDescriptor(), or https://github.com/shoelace-style/shoelace/issues/1990\n  /**\n   * Configure a getter or setter for a given \\@Prop/\\@State\n   *\n   * Since props are defined on the prototype, they are shared between all\n   * instances of a component. Thus, instead of passing a reference to the\n   * getter/setter function, you should update the\n   * ComponentInternals.getters/setters properties, and then call getSetProxy\n   * to apply the changes to the prototype\n   */\n  getSetProxy(property) {\n    const component = this.component;\n    const classPrototype = component.constructor.prototype;\n    this._getSetProxy(classPrototype, property, \"class\");\n    if (component.manager.isLit) {\n      return;\n    }\n    const htmlPrototype = component.el.constructor.prototype;\n    if (classPrototype !== htmlPrototype) {\n      this._getSetProxy(htmlPrototype, property, \"html\");\n    }\n  }\n  _getSetProxy(prototype, name2, type) {\n    const component = this.component;\n    const propType = getMemberType(component, name2);\n    let descriptor;\n    do {\n      descriptor = Object.getOwnPropertyDescriptor(prototype, name2);\n    } while (!descriptor && (prototype = Object.getPrototypeOf(prototype)));\n    if (process.env.NODE_ENV !== \"production\" && isEsriInternalEnv5()) {\n      const tolerateNotFound = type === \"html\";\n      if (descriptor?.set === void 0 || descriptor.get === void 0) {\n        if (descriptor !== void 0 && \"value\" in descriptor) {\n          throw new Error(`getSet() should only be used on @Prop/@property/@State/@state properties. For internal component properties, use regular get/set syntax. Tried to use it on \"${name2}\" in ${component.el.tagName}`);\n        } else if (tolerateNotFound) {\n          return;\n        } else {\n          throw new Error(`Unable to find \"${name2}\" property on the ${component.el.tagName} component`);\n        }\n      }\n      if (propType === void 0) {\n        throw new Error(\"Unable to retrieve prop type\");\n      }\n    } else if (!descriptor) {\n      return void 0;\n    }\n    const originalGet = descriptor.get;\n    const originalSet = descriptor.set;\n    const isGetterAlreadyOverwritten = customAccessor in originalGet;\n    const isSetterAlreadyOverwritten = customAccessor in originalSet;\n    if (isGetterAlreadyOverwritten && isSetterAlreadyOverwritten) {\n      return;\n    }\n    const shouldOverwriteGet = !isGetterAlreadyOverwritten;\n    const shouldOverwriteSet = !isSetterAlreadyOverwritten;\n    const finalGetter = shouldOverwriteGet ? function getter() {\n      let value = originalGet.call(this);\n      const component2 = elementToInstance.get(this);\n      if (shouldBypass.getter || component2 === void 0) {\n        return value;\n      }\n      const internals = component2.manager.internals;\n      value = internals.accessorGetter[name2](value, name2);\n      const getters = internals.getters[name2] ?? emptyArray;\n      for (let i = 0; i < getters.length; i++) {\n        value = getters[i](value, name2);\n      }\n      return value;\n    } : originalGet;\n    const finalSetter = shouldOverwriteSet ? function setter(rawNewValue) {\n      const oldValue = originalGet.call(this);\n      const component2 = elementToInstance.get(this);\n      if (component2 === void 0) {\n        originalSet.call(this, rawNewValue);\n        return;\n      }\n      let newValue = component2.manager.isLit ? (\n      /*\n       * Cast `null` to `undefined`.\n       * See https://devtopia.esri.com/WebGIS/arcgis-web-components/discussions/1299\n       */\n      rawNewValue ?? void 0) : parsePropertyValue(rawNewValue, propType);\n      const internals = component2.manager.internals;\n      if (newValue === oldValue) {\n        originalSet.call(this, newValue);\n      } else {\n        const setters = shouldBypass.setter ? emptyArray : internals.setters[name2] ?? emptyArray;\n        for (let i = 0; i < setters.length; i++) {\n          newValue = setters[i](newValue, oldValue, name2);\n          if (newValue === oldValue) {\n            break;\n          }\n        }\n        newValue = internals.accessorSetter[name2](newValue, oldValue, name2);\n        originalSet.call(this, newValue);\n        if (newValue !== oldValue) {\n          internals.enabledWatchers[name2]?.forEach(watcher => watcher(newValue, oldValue, name2));\n        }\n      }\n      if (internals.keyTrackers.length > 0) {\n        internals?.firePropTrackers(name2, rawNewValue);\n      }\n    } : originalSet;\n    if (shouldOverwriteGet) {\n      finalGetter[customAccessor] = true;\n    }\n    if (shouldOverwriteSet) {\n      finalSetter[customAccessor] = true;\n    }\n    Object.defineProperty(prototype, name2, {\n      ...descriptor,\n      get: finalGetter,\n      set: finalSetter\n    });\n  }\n  /**\n   * Associate an exports object with a controller for reverse lookup in\n   * controller.use\n   */\n  markExports(controller, exports) {\n    if (typeof exports === \"object\" && exports !== null || typeof exports === \"function\") {\n      this._exports.set(exports, controller);\n    }\n  }\n  resolveExports(exports) {\n    if (typeof exports === \"object\" && exports !== null || typeof exports === \"function\") {\n      return this._exports.get(exports);\n    } else {\n      return void 0;\n    }\n  }\n};\nvar emptyArray = [];\nvar customAccessor = Symbol();\nvar nothing = process.env.NODE_ENV !== \"production\" ? Symbol.for(\n// Use Symbol.for in dev mode to make it easier to maintain state when doing HMR.\n`${name}: nothing`) :\n// eslint-disable-next-line symbol-description\nSymbol();\n\n// src/trackPropKey.ts\nfunction trackPropKey(component, onResolved, defaultValue) {\n  const internals = component.manager.internals;\n  if (internals.trackedValue !== nothing && internals.trackedValue !== defaultValue) {\n    internals.firePropTrackers(void 0, void 0);\n  }\n  if (internals.keyTrackers.length === 0) {\n    queueMicrotask(() => internals.firePropTrackers(void 0, void 0));\n  }\n  internals.trackedValue = defaultValue;\n  internals.keyTrackers.push((key, value) => safeCall4(onResolved, void 0, defaultValue === value ? key : void 0));\n  return defaultValue;\n}\n\n// src/trackKey.ts\nfunction trackKey(hostsCandidates = [retrieveComponent(), ...retrieveParentControllers()], onResolved, defaultValue) {\n  const candidateHosts = Array.isArray(hostsCandidates) ? hostsCandidates : [hostsCandidates];\n  let leftToResolve = candidateHosts.length + 1;\n  const resolved = resolution => {\n    leftToResolve -= 1;\n    if (resolution !== void 0) {\n      leftToResolve = Math.min(leftToResolve, 0);\n    }\n    if (leftToResolve === 0) {\n      onResolved(resolution);\n    }\n  };\n  candidateHosts.forEach(host => trackPropertyKey(host, key => resolved(key === void 0 ? void 0 : {\n    key,\n    host,\n    isReactive: false\n  }), defaultValue));\n  const component = candidateHosts.find(host => \"manager\" in host && typeof host.manager === \"object\" && host.manager.component === host);\n  if (component) {\n    trackPropKey(component, key => resolved(key === void 0 ? void 0 : {\n      key,\n      host: component,\n      isReactive: true\n    }), defaultValue);\n  }\n  return defaultValue;\n}\n\n// src/getSet.ts\nimport { isEsriInternalEnv as isEsriInternalEnv6 } from \"@arcgis/components-utils\";\nfunction getSet(defaultValue, getSet2) {\n  const component = retrieveComponent();\n  return trackPropKey(component, rawName => {\n    if (process.env.NODE_ENV !== \"production\" && isEsriInternalEnv6() && rawName === void 0) {\n      throw new Error(\"Unable to resolve get/set's prop name. Make sure you are using it like @Prop() someProp = getSet(defaultValue,{get,set})\");\n    }\n    const name2 = rawName;\n    const manager = component.manager;\n    const genericComponent = component;\n    const value = genericComponent[name2];\n    const isStencilHotReload = process.env.NODE_ENV !== \"production\" && isEsriInternalEnv6() && !manager.isLit && devOnlyGetPersistentControllerData?.(manager) === true;\n    if (value != null && value !== defaultValue && typeof getSet2.set === \"function\" && !isStencilHotReload) {\n      const newValue = getSet2.set(value, defaultValue, name2);\n      if (newValue !== value) {\n        if (manager.isLit) {\n          genericComponent[name2] = newValue;\n        } else {\n          let firstConnected = true;\n          manager.onConnected(() => {\n            if (!firstConnected) {\n              return;\n            }\n            firstConnected = true;\n            bypassSetter(() => {\n              genericComponent[name2] = newValue;\n            });\n          });\n        }\n      }\n    }\n    genericGetSet(component, name2, getSet2);\n  }, defaultValue);\n}\nvar dynamicGetSet = (component, property, getSet2) => genericGetSet(component, property, getSet2);\nfunction bypassSetter(callback) {\n  shouldBypass.setter = true;\n  try {\n    return callback();\n  } finally {\n    shouldBypass.setter = false;\n  }\n}\nfunction bypassGetter(callback) {\n  shouldBypass.getter = true;\n  try {\n    return callback();\n  } finally {\n    shouldBypass.getter = false;\n  }\n}\nfunction genericGetSet(component, property, getSet2) {\n  var _a2, _b;\n  const genericGetSet2 = getSet2;\n  const internals = component.manager.internals;\n  const get = typeof genericGetSet2.get === \"function\" ? genericGetSet2.get : void 0;\n  if (get) {\n    (_a2 = internals.getters)[property] ?? (_a2[property] = []);\n    internals.getters[property].unshift(get);\n  }\n  const set = genericGetSet2.set === \"ignore\" ? ignoreSet : genericGetSet2.set;\n  if (set) {\n    (_b = internals.setters)[property] ?? (_b[property] = []);\n    internals.setters[property].unshift(set);\n  }\n}\nvar ignoreSet = (_, value) => value;\n\n// src/readonly.ts\nfunction readonly(value) {\n  const component = retrieveComponent();\n  return getSet(value, {\n    set: component.manager.internals.readonlySetter\n  });\n}\nfunction bypassReadOnly(callback) {\n  shouldBypass.readOnly = true;\n  try {\n    return callback();\n  } finally {\n    shouldBypass.readOnly = false;\n  }\n}\n\n// src/proxyExports.ts\nvar proxyExports = Class => (...args) => {\n  const ambientControllers2 = retrieveParentControllers();\n  const instance = new Class(...args);\n  const initialExports = instance.exports;\n  setParentController(ambientControllers2.at(-1));\n  const internals = instance.component.manager.internals;\n  internals.markExports(instance, initialExports);\n  instance.watchExports(exports => internals.markExports(instance, exports));\n  setAmbientChildController(instance);\n  const hostCandidates = [instance.component, ...ambientControllers2].reverse();\n  return trackKey(hostCandidates, resolution => resolution === void 0 ? void 0 : setProxy(instance, resolution, initialExports), initialExports);\n};\nfunction setProxy(controller, {\n  host,\n  key,\n  isReactive: assignedToProp\n}, initialExports) {\n  const genericHost = host;\n  const controllerValueChanged = genericHost[key] !== controller.exports;\n  const hostValueChanged = genericHost[key] !== initialExports;\n  const controllerUpdatedExports = initialExports !== controller.exports;\n  if (controllerValueChanged && !hostValueChanged && controllerUpdatedExports) {\n    genericHost[key] = controller.exports;\n  }\n  const isProxyExportsOnComponent = host === controller.component;\n  if (isProxyExportsOnComponent) {\n    if (assignedToProp) {\n      const internals = controller.component.manager.internals;\n      if (hostValueChanged) {\n        internals.markExports(controller, genericHost[key]);\n      }\n      watch(controller.component, key, value => {\n        if (value !== controller.exports) {\n          internals.markExports(controller, value);\n        }\n      });\n    }\n    controller.assignedProperty = assignedToProp ? void 0 : key;\n  }\n  controller.watchExports(() => {\n    if (genericHost[key] === controller.exports) {\n      return;\n    }\n    const manager = controller.component.manager;\n    const isReadOnly = manager.internals.setters[key]?.includes(manager.internals.readonlySetter);\n    if (isReadOnly) {\n      bypassReadOnly(() => {\n        genericHost[key] = controller.exports;\n      });\n    } else {\n      genericHost[key] = controller.exports;\n    }\n  });\n}\nexport { controllerSymbol, isController, devOnlySetPersistentControllerData, devOnlyGetPersistentControllerData, setAmbientComponent, retrieveComponent, setParentController, retrieveParentControllers, elementToInstance, Controller, GenericController, trackPropertyKey, keyTrackResolve, ComponentInternals, watch, trackPropKey, trackKey, getSet, dynamicGetSet, bypassSetter, bypassGetter, readonly, bypassReadOnly, proxyExports };","map":{"version":3,"names":["getMemberType","parsePropertyValue","controllerSymbol","Symbol","for","name","isEsriInternalEnv","isController","value","devOnlySetPersistentControllerData","process","env","NODE_ENV","controller","data","manager","component","controllers","_controllers","index","Array","from","indexOf","devOnlyControllerData","el","devOnlyGetPersistentControllerData","isEsriInternalEnv2","ambientComponent","setAmbientComponent","queueMicrotask","retrieveComponent","name2","Error","join","ambientControllers","setParentController","slice","retrieveParentControllers","ambientChildController","setAmbientChildController","retrieveAmbientChildController","use","watchExports","useRefSync","ready","unsubscribe","exports","useRef","internals","resolveExports","ambientChildController2","shouldBypass","setter","getter","readOnly","elementToInstance","WeakMap","Deferred","isEsriInternalEnv3","safeAsyncCall","safeCall","_a","Controller","constructor","_callbacks","hostConnected","hostDisconnected","hostLoad","hostLoaded","hostUpdate","hostUpdated","hostDestroy","hostLifecycle","_ready","_lifecycleCleanups","connectedCalled","_loadCalled","loadedCalled","promise","_exports","makeProvisionalValue","_exportWatchers","Set","resolvedComponent","toControllerHost","new","target","Object","defineProperty","writable","enumerable","configurable","ensureHasDestroy","addController","isInControllerManager","catchUpLifecycle","connectedWillStillHappen","triggerConnected","loadWillStillHappen","triggerLoad","then","loadedWillStillHappen","triggerLoaded","catch","console","error","oldExports","forEach","assignedProperty","requestUpdate","resolve","setProvisionalExports","proxy","callback","safeCallback","add","delete","controllerRemoved","isConnected","triggerDisconnected","triggerDestroy","onConnected","push","onDisconnected","onLoad","onLoaded","onUpdate","onUpdated","onDestroy","onLifecycle","_callLifecycle","genericController","triggerLifecycle","length","Promise","allSettled","map","triggerUpdate","changes","callUpdate","triggerUpdated","cleanupRaw","cleanup","isArray","cleanup2","remove","GenericController","base","Proxy","get","prop","receiver","cyclical","has","prototype","Reflect","startsWith","toString","accessBeforeLoad","set","newValue","safeCall2","trackPropertyKey","object","onResolved","defaultValue","keys","keyCount","keyTrackMap","keyTrackResolve","Map","pendingTrackers","callbacks","keys2","key2","key","entries","commit","isEsriInternalEnv4","safeCall3","watch","property","_a2","genericProperty","type","isLit","allWatchers","watchers","genericCallback","oldValue","propertyName","splice","safeCall4","isEsriInternalEnv5","ComponentInternals","enabledWatchers","enableReadonly","members","isReadOnly","setters","readonlySetter","trackedValue","nothing","keyTrackers","getters","accessorGetter","accessorSetter","_oldValue","tagName","toLowerCase","String","firePropTrackers","trackers","tracker","getSetProxy","classPrototype","_getSetProxy","htmlPrototype","propType","descriptor","getOwnPropertyDescriptor","getPrototypeOf","tolerateNotFound","originalGet","originalSet","isGetterAlreadyOverwritten","customAccessor","isSetterAlreadyOverwritten","shouldOverwriteGet","shouldOverwriteSet","finalGetter","call","component2","emptyArray","i","finalSetter","rawNewValue","watcher","markExports","trackPropKey","trackKey","hostsCandidates","candidateHosts","leftToResolve","resolved","resolution","Math","min","host","isReactive","find","isEsriInternalEnv6","getSet","getSet2","rawName","genericComponent","isStencilHotReload","firstConnected","bypassSetter","genericGetSet","dynamicGetSet","bypassGetter","_b","genericGetSet2","unshift","ignoreSet","_","readonly","bypassReadOnly","proxyExports","Class","args","ambientControllers2","instance","initialExports","at","hostCandidates","reverse","setProxy","assignedToProp","genericHost","controllerValueChanged","hostValueChanged","controllerUpdatedExports","isProxyExportsOnComponent","includes"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/node_modules/@arcgis/components-controllers/dist/chunk-PP2BAVRW.js"],"sourcesContent":["import {\n  getMemberType,\n  parsePropertyValue\n} from \"./chunk-XKVBN44N.js\";\n\n// src/types.ts\nvar controllerSymbol = Symbol.for(\"controller\");\n\n// package.json\nvar name = \"@arcgis/components-controllers\";\n\n// src/utils.ts\nimport { isEsriInternalEnv } from \"@arcgis/components-utils\";\nvar isController = (value) => typeof value === \"object\" && value !== null && (controllerSymbol in value || \"hostConnected\" in value || \"hostDisconnected\" in value || \"hostUpdate\" in value || \"hostUpdated\" in value);\nvar devOnlySetPersistentControllerData = process.env.NODE_ENV !== \"production\" && isEsriInternalEnv() ? (controller, data) => {\n  const manager = controller.component.manager;\n  const controllers = \"_controllers\" in manager ? manager._controllers : void 0;\n  if (controllers === void 0) {\n    return void 0;\n  }\n  const index = Array.from(controllers).indexOf(controller);\n  if (index === -1) {\n    return;\n  }\n  const devOnlyControllerData = Symbol.for(`${name}: devOnlyControllerData`);\n  const el = controller.component.el;\n  el[devOnlyControllerData] ?? (el[devOnlyControllerData] = {});\n  el[devOnlyControllerData][index] = data;\n} : void 0;\nvar devOnlyGetPersistentControllerData = process.env.NODE_ENV !== \"production\" && isEsriInternalEnv() ? (controller) => {\n  const manager = controller.component.manager;\n  const controllers = \"_controllers\" in manager ? manager._controllers : void 0;\n  if (controllers === void 0) {\n    return void 0;\n  }\n  const index = Array.from(controllers).indexOf(controller);\n  const devOnlyControllerData = Symbol.for(`${name}: devOnlyControllerData`);\n  const el = controller.component.el;\n  return el[devOnlyControllerData]?.[index];\n} : void 0;\n\n// src/ControllerInternals.ts\nimport { isEsriInternalEnv as isEsriInternalEnv2 } from \"@arcgis/components-utils\";\nvar ambientComponent;\nfunction setAmbientComponent(component) {\n  if (ambientComponent === component) {\n    return;\n  }\n  ambientComponent = component;\n  queueMicrotask(() => {\n    if (ambientComponent === component) {\n      ambientComponent = void 0;\n    }\n  });\n}\nfunction retrieveComponent(name2) {\n  if (process.env.NODE_ENV !== \"production\" && ambientComponent === void 0) {\n    throw new Error(\n      [\n        `Unable to find out which component ${name2 || \"this\"} controller `,\n        \"belongs to. Possible causes:\\n\",\n        \"- You might also have multiple versions of \",\n        \"@arcgis/components-controllers package installed\\n\",\n        ...isEsriInternalEnv2() ? [\n          \"- You tried to create controller outside the component. If so, \",\n          \"please wrap your controller definition in an arrow function (like\",\n          \"`const myController = ()=>makeController(...);`) and call that\",\n          \"function inside the component (`my = myController();`), or \",\n          \"define your controller using makeGenericController/GenericController \",\n          \"instead.\\n\",\n          \"- You tried to create a controller inside an async function. \",\n          \"This is allowed without calling controller.use(). Make sure you \",\n          \"use it like `await controller.use(useController())`.\"\n        ] : []\n      ].join(\"\")\n    );\n  }\n  return ambientComponent;\n}\nvar ambientControllers = [];\nfunction setParentController(controller) {\n  if (controller === void 0) {\n    ambientControllers = [];\n    return;\n  }\n  const index = ambientControllers.indexOf(controller);\n  ambientControllers = index === -1 ? [...ambientControllers, controller] : ambientControllers.slice(0, index + 1);\n  queueMicrotask(() => {\n    ambientControllers = [];\n  });\n}\nfunction retrieveParentControllers() {\n  return ambientControllers;\n}\nvar ambientChildController;\nfunction setAmbientChildController(controller) {\n  if (ambientChildController === controller) {\n    return;\n  }\n  ambientChildController = controller;\n  queueMicrotask(() => {\n    if (ambientChildController === controller) {\n      ambientChildController = void 0;\n    }\n  });\n}\nfunction retrieveAmbientChildController() {\n  const controller = ambientChildController;\n  ambientChildController = void 0;\n  return controller;\n}\nvar use = async (value, watchExports) => {\n  const controller = useRefSync(value);\n  if (controller === void 0) {\n    if (process.env.NODE_ENV !== \"production\" && isEsriInternalEnv2() && typeof watchExports === \"function\") {\n      throw new Error(\n        `Unable to resolve a controller from the provided value, so can't watch it's exports. The value you passed is not a controller and not a controller exports. If your controller exports a literal value, try making your controller export an object instead`\n      );\n    }\n    return value;\n  }\n  await controller.ready;\n  if (typeof watchExports === \"function\") {\n    if (process.env.NODE_ENV !== \"production\" && isEsriInternalEnv2() && controller.watchExports === void 0) {\n      throw new Error(`The controller must implement watchExports method to support watching exports`);\n    }\n    const unsubscribe = controller.watchExports(\n      (exports) => watchExports(exports, unsubscribe)\n    );\n  }\n  return controller.exports;\n};\nvar useRef = async (value) => {\n  const controller = useRefSync(value);\n  if (process.env.NODE_ENV !== \"production\" && isEsriInternalEnv2() && controller === void 0) {\n    throw new Error(\n      `Unable to resolve a controller from the provided value. The value you passed is not a controller and not a controller exports. If your controller exports a literal value, try making your controller export an object instead`\n    );\n  }\n  await controller.ready;\n  return controller;\n};\nvar useRefSync = (value) => {\n  const component = retrieveComponent();\n  const controller = component.manager.internals.resolveExports(value);\n  if (controller !== void 0) {\n    return controller;\n  }\n  if (isController(value)) {\n    return value;\n  }\n  const ambientChildController2 = retrieveAmbientChildController();\n  if (ambientChildController2 !== void 0) {\n    return ambientChildController2;\n  }\n  return void 0;\n};\nvar shouldBypass = {\n  setter: false,\n  getter: false,\n  readOnly: false\n};\nvar elementToInstance = /* @__PURE__ */ new WeakMap();\n\n// src/Controller.ts\nimport { Deferred, isEsriInternalEnv as isEsriInternalEnv3, safeAsyncCall, safeCall } from \"@arcgis/components-utils\";\nvar _a;\n_a = controllerSymbol;\nvar Controller = class {\n  constructor(component) {\n    this._callbacks = {\n      hostConnected: [],\n      hostDisconnected: [],\n      hostLoad: [],\n      hostLoaded: [],\n      hostUpdate: [],\n      hostUpdated: [],\n      hostDestroy: [],\n      hostLifecycle: []\n    };\n    this._ready = new Deferred();\n    this._lifecycleCleanups = [];\n    this.connectedCalled = false;\n    this._loadCalled = false;\n    this.loadedCalled = false;\n    this[_a] = true;\n    this.ready = this._ready.promise;\n    /*\n     * Setting default exports to \"this\" so that controllers that don't use\n     * exports/proxyExports(), could still be used as if they did\n     * (i.e with controller.use)\n     */\n    this._exports = makeProvisionalValue(this);\n    this._exportWatchers = /* @__PURE__ */ new Set();\n    const resolvedComponent = toControllerHost(component ?? retrieveComponent(new.target.name));\n    if (process.env.NODE_ENV !== \"production\") {\n      Object.defineProperty(this, \"component\", {\n        writable: false,\n        enumerable: false,\n        configurable: true,\n        value: resolvedComponent\n      });\n      if (\"hostDestroy\" in this) {\n        this.component.manager.ensureHasDestroy?.();\n      }\n    } else {\n      this.component = resolvedComponent;\n    }\n    this.component.addController(this);\n    const manager = this.component.manager;\n    const isInControllerManager = manager === void 0;\n    if (!isInControllerManager) {\n      setParentController(this);\n      queueMicrotask(() => this.catchUpLifecycle());\n    }\n  }\n  /**\n   * If controller is being added dynamically, after the component\n   * construction, then trigger connected and load right away\n   */\n  catchUpLifecycle() {\n    const { manager } = this.component;\n    const connectedWillStillHappen = !manager.connectedCalled;\n    if (!connectedWillStillHappen && !this.connectedCalled) {\n      this.triggerConnected();\n    }\n    const loadWillStillHappen = !manager._loadCalled;\n    if (loadWillStillHappen) {\n      return;\n    }\n    this.triggerLoad().then(() => {\n      const loadedWillStillHappen = !manager.loadedCalled;\n      if (loadedWillStillHappen) {\n        return;\n      }\n      this.triggerLoaded();\n    }).catch(console.error);\n  }\n  get exports() {\n    return this._exports;\n  }\n  /**\n   * Set controller's exports property (for usage with proxyExports()) and mark\n   * controller as ready (for usage in other controllers). Also, triggers\n   * re-render of the component\n   */\n  set exports(exports) {\n    const oldExports = this._exports;\n    if (oldExports !== exports) {\n      this._exports = exports;\n      this._exportWatchers.forEach(safeCall);\n      if (this.connectedCalled && this.assignedProperty !== false) {\n        this.component.requestUpdate(this.assignedProperty, oldExports);\n      }\n    }\n    this._ready.resolve(exports);\n  }\n  setProvisionalExports(exports, proxy = true) {\n    this._exports = proxy ? makeProvisionalValue(exports) : exports;\n    this._exportWatchers.forEach(safeCall);\n  }\n  watchExports(callback) {\n    const safeCallback = () => callback(this._exports);\n    this._exportWatchers.add(safeCallback);\n    return () => void this._exportWatchers.delete(safeCallback);\n  }\n  /**\n   * A flexible utility for making sure a controller is loaded before it's used,\n   * regardless of how or where a controller was defined:\n   *\n   * @example\n   * makeGenericController(async (component, controller) => {\n   *   // Await some controller from the component:\n   *   await controller.use(component.someController);\n   *   // Initialize new controllers\n   *   await controller.use(load(importCoreReactiveUtils));\n   *   await controller.use(new ViewModelController(component,newWidgetsHomeHomeViewModel));\n   *   await controller.use(someController(component));\n   * });\n   *\n   * @remarks\n   * If your controller is not async, and you are not creating it async, then\n   * you are not required to use controller.use - you can use it directly.\n   * Similarly, accessing controllers after componentWillLoad callback does not\n   * require awaiting them as they are guaranteed to be loaded by then.\n   */\n  get use() {\n    setAmbientComponent(this.component);\n    return use;\n  }\n  /**\n   * Just like controller.use, but returns the controller itself, rather than it's\n   * exports\n   *\n   * Use cases:\n   * - You have a controller and you want to make sure it's loaded before you\n   *   try to use it\n   * - Your controller is not using exports, so you wish to access some props on\n   *   it directly\n   * - You have a controller exports only, and you want to retrieve the\n   *   controller itself. This is useful if you wish to call .watchExports() or\n   *   some other method on the controller\n   */\n  get useRef() {\n    setAmbientComponent(this.component);\n    return useRef;\n  }\n  /**\n   * Like useRef, but doesn't wait for the controller to get ready\n   *\n   * @internal\n   */\n  get useRefSync() {\n    setAmbientComponent(this.component);\n    return useRefSync;\n  }\n  controllerRemoved() {\n    if (this.component.el.isConnected) {\n      this.triggerDisconnected();\n    }\n    this.triggerDestroy();\n  }\n  // Register a lifecycle callback\n  onConnected(callback) {\n    this._callbacks.hostConnected.push(callback);\n  }\n  onDisconnected(callback) {\n    this._callbacks.hostDisconnected.push(callback);\n  }\n  onLoad(callback) {\n    this._callbacks.hostLoad.push(callback);\n  }\n  onLoaded(callback) {\n    this._callbacks.hostLoaded.push(callback);\n  }\n  onUpdate(callback) {\n    this._callbacks.hostUpdate.push(callback);\n  }\n  onUpdated(callback) {\n    this._callbacks.hostUpdated.push(callback);\n  }\n  onDestroy(callback) {\n    if (process.env.NODE_ENV !== \"production\" && isEsriInternalEnv3()) {\n      this.component.manager.ensureHasDestroy?.();\n    }\n    this._callbacks.hostDestroy.push(callback);\n  }\n  onLifecycle(callback) {\n    this._callbacks.hostLifecycle.push(callback);\n    if (this.connectedCalled && this.component.el.isConnected) {\n      this._callLifecycle(callback);\n    }\n  }\n  // Call each lifecycle hook\n  /** @internal */\n  triggerConnected() {\n    const genericController = this;\n    if (genericController.hostConnected) {\n      safeCall(genericController.hostConnected, genericController);\n    }\n    this._callbacks.hostConnected.forEach(safeCall);\n    this.triggerLifecycle();\n    this.connectedCalled = true;\n  }\n  /** @internal */\n  triggerDisconnected() {\n    const genericController = this;\n    if (genericController.hostDisconnected) {\n      safeCall(genericController.hostDisconnected, genericController);\n    }\n    this._callbacks.hostDisconnected.forEach(safeCall);\n    this._lifecycleCleanups.forEach(safeCall);\n    this._lifecycleCleanups = [];\n  }\n  /** @internal */\n  async triggerLoad() {\n    if (this._loadCalled) {\n      return;\n    }\n    this._loadCalled = true;\n    const genericController = this;\n    if (genericController.hostLoad) {\n      await safeAsyncCall(genericController.hostLoad, genericController);\n    }\n    if (this._callbacks.hostLoad.length > 0) {\n      await Promise.allSettled(this._callbacks.hostLoad.map(safeAsyncCall));\n    }\n    this._ready.resolve(this._exports);\n  }\n  /** @internal */\n  triggerLoaded() {\n    if (this.loadedCalled) {\n      return;\n    }\n    const genericController = this;\n    if (genericController.hostLoaded) {\n      safeCall(genericController.hostLoaded, genericController);\n    }\n    this._callbacks.hostLoaded.forEach(safeCall);\n    this.loadedCalled = true;\n  }\n  /** @internal */\n  triggerUpdate(changes) {\n    const genericController = this;\n    if (genericController.hostUpdate) {\n      safeCall(genericController.hostUpdate, genericController, changes);\n    }\n    this._callbacks.hostUpdate.forEach(callUpdate, changes);\n  }\n  /** @internal */\n  triggerUpdated(changes) {\n    const genericController = this;\n    if (genericController.hostUpdated) {\n      safeCall(genericController.hostUpdated, genericController, changes);\n    }\n    this._callbacks.hostUpdated.forEach(callUpdate, changes);\n  }\n  /** @internal */\n  triggerDestroy() {\n    const genericController = this;\n    if (genericController.hostDestroy) {\n      safeCall(genericController.hostDestroy, genericController);\n    }\n    this._callbacks.hostDestroy.forEach(safeCall);\n  }\n  /** @internal */\n  triggerLifecycle() {\n    const genericController = this;\n    if (genericController.hostLifecycle) {\n      this._callLifecycle(() => genericController.hostLifecycle());\n    }\n    this._callbacks.hostLifecycle.forEach(this._callLifecycle, this);\n  }\n  _callLifecycle(callback) {\n    setAmbientComponent(this.component);\n    const cleanupRaw = safeCall(callback);\n    const cleanup = Array.isArray(cleanupRaw) ? cleanupRaw : [cleanupRaw];\n    cleanup.forEach((cleanup2) => {\n      if (typeof cleanup2 === \"function\") {\n        this._lifecycleCleanups.push(cleanup2);\n      } else if (typeof cleanup2 === \"object\" && typeof cleanup2.remove === \"function\") {\n        this._lifecycleCleanups.push(cleanup2.remove);\n      }\n    });\n  }\n};\nfunction callUpdate(callback) {\n  safeCall(callback, void 0, this);\n}\nvar GenericController = Controller;\nfunction makeProvisionalValue(base) {\n  if (typeof base !== \"object\" && typeof base !== \"function\" || base === null) {\n    return base;\n  }\n  const proxy = new Proxy(base, {\n    get(target, prop, receiver) {\n      if (cyclical.has(prop) && prop in target && target[prop] === proxy) {\n        return void 0;\n      }\n      if (prop in target || prop in Promise.prototype || typeof prop === \"symbol\") {\n        return typeof target === \"function\" ? target[prop] : Reflect.get(target, prop, receiver);\n      }\n      if (process.env.NODE_ENV !== \"production\" && isEsriInternalEnv3()) {\n        if (process.env.NODE_ENV === \"test\" && (prop.startsWith(\"$$\") || prop.startsWith(\"@@\") || prop === \"nodeType\" || prop === \"tagName\" || prop === \"toJSON\" || prop === \"hasAttribute\")) {\n          return;\n        }\n        console.error(\n          `Trying to access \"${prop.toString()}\" on the controller before it's loaded. ${accessBeforeLoad}`\n        );\n      }\n      return void 0;\n    },\n    set: (target, prop, newValue, receiver) => {\n      if (process.env.NODE_ENV !== \"production\" && isEsriInternalEnv3()) {\n        console.error(`Trying to set \"${prop.toString()}\" on the controller before it's loaded. ${accessBeforeLoad}`);\n      }\n      return Reflect.set(target, prop, newValue, receiver);\n    }\n  });\n  return proxy;\n}\nvar cyclical = /* @__PURE__ */ new Set([\"exports\", \"_exports\"]);\nvar accessBeforeLoad = process.env.NODE_ENV !== \"production\" && isEsriInternalEnv3() ? [\n  \"This might be the case if you are trying to access an async controller in \",\n  \"connectedCallback(). Or, if you are using it inside of \",\n  \"componentWillLoad()/another controller without controller.use. Example correct \",\n  \"usage:\\n\",\n  \"makeController(async (component, controller)=>{ await controller.use(someOtherController); });\"\n].join(\"\") : void 0;\nfunction toControllerHost(component) {\n  if (process.env.NODE_ENV !== \"production\" && isEsriInternalEnv3()) {\n    if (\"addController\" in component) {\n      return component;\n    } else {\n      throw new Error(\n        \"Component does not implement ControllerHost. This might be because you forgot to add 'manager: Controller<this> = useControllerManager(this);' in your component, or you tried to use some controller before that line\"\n      );\n    }\n  } else {\n    return component;\n  }\n}\n\n// src/trackPropertyKey.ts\nimport { safeCall as safeCall2 } from \"@arcgis/components-utils\";\nfunction trackPropertyKey(object, onResolved, defaultValue) {\n  const keys = Object.keys(object);\n  const keyCount = keys.length;\n  if (keyTrackMap === void 0) {\n    queueMicrotask(keyTrackResolve);\n  }\n  keyTrackMap ?? (keyTrackMap = /* @__PURE__ */ new Map());\n  let pendingTrackers = keyTrackMap.get(object);\n  if (pendingTrackers === void 0) {\n    pendingTrackers = { callbacks: [], keyCount };\n    keyTrackMap.set(object, pendingTrackers);\n  }\n  if (pendingTrackers.keyCount !== keyCount) {\n    pendingTrackers.callbacks.forEach((resolve) => resolve(keys));\n    pendingTrackers.callbacks = [];\n    pendingTrackers.keyCount = keyCount;\n  }\n  pendingTrackers.callbacks.push((keys2) => {\n    const callback = (key2) => safeCall2(onResolved, null, key2);\n    const key = keys2[keyCount];\n    if (key === void 0) {\n      callback(void 0);\n    } else if (object[key] === defaultValue) {\n      callback(key);\n    } else {\n      callback(void 0);\n    }\n  });\n  return defaultValue;\n}\nvar keyTrackMap = void 0;\nfunction keyTrackResolve() {\n  Array.from(keyTrackMap?.entries() ?? []).forEach(([object, { callbacks }]) => {\n    const keys = Object.keys(object);\n    callbacks.forEach((commit) => commit(keys));\n  });\n  keyTrackMap = void 0;\n}\n\n// src/useWatch.ts\nimport { isEsriInternalEnv as isEsriInternalEnv4, safeCall as safeCall3 } from \"@arcgis/components-utils\";\nfunction watch(component, property, callback) {\n  var _a2;\n  const genericProperty = property;\n  if (process.env.NODE_ENV !== \"production\" && isEsriInternalEnv4()) {\n    const type = getMemberType(component, genericProperty);\n    if (type === void 0) {\n      throw new Error(\n        component.manager.isLit ? `Trying to watch a non-@property, non-@state property \"${genericProperty}\". Either convert it into a @state() to be able to use watch() on it, or use the get/set syntax` : `Trying to watch a non-@Prop, non-@State property \"${genericProperty}\". Convert it into a @State() or @Prop property if you need to use watch() on it`\n      );\n    }\n  }\n  const internals = component.manager.internals;\n  (_a2 = internals.allWatchers)[genericProperty] ?? (_a2[genericProperty] = []);\n  const watchers = internals.allWatchers[genericProperty];\n  const genericCallback = callback;\n  const safeCallback = (newValue, oldValue, propertyName) => safeCall3(genericCallback, null, newValue, oldValue, propertyName);\n  watchers.push(safeCallback);\n  return () => {\n    const index = watchers.indexOf(safeCallback);\n    if (index !== -1) {\n      watchers.splice(index, 1);\n    }\n  };\n}\n\n// src/trackPropKey.ts\nimport { safeCall as safeCall4 } from \"@arcgis/components-utils\";\n\n// src/ComponentInternals.ts\nimport { isEsriInternalEnv as isEsriInternalEnv5 } from \"@arcgis/components-utils\";\nvar ComponentInternals = class {\n  constructor(component) {\n    /**\n     * When watchers are set, they are set into `allWatchers`. When watchers are\n     * read in the setter, they are read from `enabledWatchers`.\n     *\n     * In Stencil, on connectedCallback(), controller manager does\n     * `enabledWatchers=allWatchers`. Reasoning:\n     * - This disables watchers until connected callback (matches behavior of\n     *   Stencil's watchers)\n     * - This removes the need for a check in the setter for whether the watchers\n     *   were enabled already or not (as getters/setters are hot path, and should\n     *   be streamlined)\n     *\n     * In Lit, we set enabledWatchers to allWatchers in the constructor.\n     * Reasoning:\n     * - While in Stencil all user provided properties are either set before the\n     *   component constructor (this is possible since Stencil's props store is\n     *   externalized) or after connectedCallback, in Lit the properties may be\n     *   set by attributeChangedCallback before connectedCallback. Thus, we need\n     *   to enable watchers even before connectedCallback.\n     * - This means, that a watcher set for some prop before your component got\n     *   a chance to set the default value will trigger the watcher when the\n     *   default value is set - but, that is inline with Lit's willUpdate behavior\n     *   of triggering for default values AND, the only way to set a watcher\n     *   before default value is if you called watcher inside a controller. For\n     *   now, there are no controllers written outside of arcgis-map-components\n     *   package, so I was able to verify that this change would have no\n     *   negative impact.\n     *\n     * In either way, I plan to remove watchers from controllers once Stencil\n     * support is removed.\n     */\n    this.enabledWatchers = {};\n    this.allWatchers = {};\n    /**\n     * \"readOnly\" is not enabled initially since we need to allow to set property\n     * default values in the constructor.\n     * For Stencil, readonly is enabled by the `readonly()` controller.\n     * For Lit, we have the following logic:\n     */\n    this.enableReadonly = () => {\n      this.enableReadonly = void 0;\n      if (!this.component.manager.isLit) {\n        return;\n      }\n      const internals = this.component.manager.internals;\n      Object.entries(internals.members).forEach(([name2, [type]]) => {\n        var _a2;\n        const isReadOnly = type & 2048 /* ReadOnly */;\n        if (isReadOnly) {\n          (_a2 = internals.setters)[name2] ?? (_a2[name2] = []);\n          internals.setters[name2].push(internals.readonlySetter);\n        }\n      });\n    };\n    this.trackedValue = nothing;\n    this.keyTrackers = [];\n    this.getters = {};\n    this.setters = {};\n    this.accessorGetter = {};\n    this.accessorSetter = {};\n    this._exports = /* @__PURE__ */ new WeakMap();\n    this.readonlySetter = (newValue, _oldValue, property) => {\n      if (shouldBypass.readOnly) {\n        return newValue;\n      }\n      throw new Error(\n        `Cannot assign to read-only property \"${property}\" of ${this.component.el.tagName.toLowerCase()}. Trying to assign \"${String(\n          newValue\n        )}\"`\n      );\n    };\n    if (process.env.NODE_ENV !== \"production\") {\n      Object.defineProperty(this, \"component\", {\n        writable: false,\n        enumerable: false,\n        configurable: true,\n        value: component\n      });\n    } else {\n      this.component = component;\n    }\n  }\n  firePropTrackers(key, value) {\n    const trackers = this.keyTrackers;\n    this.trackedValue = nothing;\n    this.keyTrackers = [];\n    trackers.forEach((tracker) => tracker(key, value));\n  }\n  // REFACTOR: once Stencil is no longer supported, simplify this with Lit's getPropertyDescriptor(), or https://github.com/shoelace-style/shoelace/issues/1990\n  /**\n   * Configure a getter or setter for a given \\@Prop/\\@State\n   *\n   * Since props are defined on the prototype, they are shared between all\n   * instances of a component. Thus, instead of passing a reference to the\n   * getter/setter function, you should update the\n   * ComponentInternals.getters/setters properties, and then call getSetProxy\n   * to apply the changes to the prototype\n   */\n  getSetProxy(property) {\n    const component = this.component;\n    const classPrototype = component.constructor.prototype;\n    this._getSetProxy(classPrototype, property, \"class\");\n    if (component.manager.isLit) {\n      return;\n    }\n    const htmlPrototype = component.el.constructor.prototype;\n    if (classPrototype !== htmlPrototype) {\n      this._getSetProxy(htmlPrototype, property, \"html\");\n    }\n  }\n  _getSetProxy(prototype, name2, type) {\n    const component = this.component;\n    const propType = getMemberType(component, name2);\n    let descriptor;\n    do {\n      descriptor = Object.getOwnPropertyDescriptor(prototype, name2);\n    } while (!descriptor && (prototype = Object.getPrototypeOf(prototype)));\n    if (process.env.NODE_ENV !== \"production\" && isEsriInternalEnv5()) {\n      const tolerateNotFound = type === \"html\";\n      if (descriptor?.set === void 0 || descriptor.get === void 0) {\n        if (descriptor !== void 0 && \"value\" in descriptor) {\n          throw new Error(\n            `getSet() should only be used on @Prop/@property/@State/@state properties. For internal component properties, use regular get/set syntax. Tried to use it on \"${name2}\" in ${component.el.tagName}`\n          );\n        } else if (tolerateNotFound) {\n          return;\n        } else {\n          throw new Error(`Unable to find \"${name2}\" property on the ${component.el.tagName} component`);\n        }\n      }\n      if (propType === void 0) {\n        throw new Error(\"Unable to retrieve prop type\");\n      }\n    } else if (!descriptor) {\n      return void 0;\n    }\n    const originalGet = descriptor.get;\n    const originalSet = descriptor.set;\n    const isGetterAlreadyOverwritten = customAccessor in originalGet;\n    const isSetterAlreadyOverwritten = customAccessor in originalSet;\n    if (isGetterAlreadyOverwritten && isSetterAlreadyOverwritten) {\n      return;\n    }\n    const shouldOverwriteGet = !isGetterAlreadyOverwritten;\n    const shouldOverwriteSet = !isSetterAlreadyOverwritten;\n    const finalGetter = shouldOverwriteGet ? function getter() {\n      let value = originalGet.call(this);\n      const component2 = elementToInstance.get(this);\n      if (shouldBypass.getter || component2 === void 0) {\n        return value;\n      }\n      const internals = component2.manager.internals;\n      value = internals.accessorGetter[name2](value, name2);\n      const getters = internals.getters[name2] ?? emptyArray;\n      for (let i = 0; i < getters.length; i++) {\n        value = getters[i](value, name2);\n      }\n      return value;\n    } : originalGet;\n    const finalSetter = shouldOverwriteSet ? function setter(rawNewValue) {\n      const oldValue = originalGet.call(this);\n      const component2 = elementToInstance.get(this);\n      if (component2 === void 0) {\n        originalSet.call(this, rawNewValue);\n        return;\n      }\n      let newValue = component2.manager.isLit ? (\n        /*\n         * Cast `null` to `undefined`.\n         * See https://devtopia.esri.com/WebGIS/arcgis-web-components/discussions/1299\n         */\n        rawNewValue ?? void 0\n      ) : parsePropertyValue(rawNewValue, propType);\n      const internals = component2.manager.internals;\n      if (newValue === oldValue) {\n        originalSet.call(this, newValue);\n      } else {\n        const setters = shouldBypass.setter ? emptyArray : internals.setters[name2] ?? emptyArray;\n        for (let i = 0; i < setters.length; i++) {\n          newValue = setters[i](newValue, oldValue, name2);\n          if (newValue === oldValue) {\n            break;\n          }\n        }\n        newValue = internals.accessorSetter[name2](newValue, oldValue, name2);\n        originalSet.call(this, newValue);\n        if (newValue !== oldValue) {\n          internals.enabledWatchers[name2]?.forEach((watcher) => watcher(newValue, oldValue, name2));\n        }\n      }\n      if (internals.keyTrackers.length > 0) {\n        internals?.firePropTrackers(name2, rawNewValue);\n      }\n    } : originalSet;\n    if (shouldOverwriteGet) {\n      finalGetter[customAccessor] = true;\n    }\n    if (shouldOverwriteSet) {\n      finalSetter[customAccessor] = true;\n    }\n    Object.defineProperty(prototype, name2, {\n      ...descriptor,\n      get: finalGetter,\n      set: finalSetter\n    });\n  }\n  /**\n   * Associate an exports object with a controller for reverse lookup in\n   * controller.use\n   */\n  markExports(controller, exports) {\n    if (typeof exports === \"object\" && exports !== null || typeof exports === \"function\") {\n      this._exports.set(exports, controller);\n    }\n  }\n  resolveExports(exports) {\n    if (typeof exports === \"object\" && exports !== null || typeof exports === \"function\") {\n      return this._exports.get(exports);\n    } else {\n      return void 0;\n    }\n  }\n};\nvar emptyArray = [];\nvar customAccessor = Symbol();\nvar nothing = process.env.NODE_ENV !== \"production\" ? Symbol.for(\n  // Use Symbol.for in dev mode to make it easier to maintain state when doing HMR.\n  `${name}: nothing`\n) : (\n  // eslint-disable-next-line symbol-description\n  Symbol()\n);\n\n// src/trackPropKey.ts\nfunction trackPropKey(component, onResolved, defaultValue) {\n  const internals = component.manager.internals;\n  if (internals.trackedValue !== nothing && internals.trackedValue !== defaultValue) {\n    internals.firePropTrackers(void 0, void 0);\n  }\n  if (internals.keyTrackers.length === 0) {\n    queueMicrotask(() => internals.firePropTrackers(void 0, void 0));\n  }\n  internals.trackedValue = defaultValue;\n  internals.keyTrackers.push((key, value) => safeCall4(onResolved, void 0, defaultValue === value ? key : void 0));\n  return defaultValue;\n}\n\n// src/trackKey.ts\nfunction trackKey(hostsCandidates = [\n  retrieveComponent(),\n  ...retrieveParentControllers()\n], onResolved, defaultValue) {\n  const candidateHosts = Array.isArray(hostsCandidates) ? hostsCandidates : [hostsCandidates];\n  let leftToResolve = candidateHosts.length + 1;\n  const resolved = (resolution) => {\n    leftToResolve -= 1;\n    if (resolution !== void 0) {\n      leftToResolve = Math.min(leftToResolve, 0);\n    }\n    if (leftToResolve === 0) {\n      onResolved(resolution);\n    }\n  };\n  candidateHosts.forEach(\n    (host) => trackPropertyKey(\n      host,\n      (key) => resolved(\n        key === void 0 ? void 0 : {\n          key,\n          host,\n          isReactive: false\n        }\n      ),\n      defaultValue\n    )\n  );\n  const component = candidateHosts.find(\n    (host) => \"manager\" in host && typeof host.manager === \"object\" && host.manager.component === host\n  );\n  if (component) {\n    trackPropKey(\n      component,\n      (key) => resolved(\n        key === void 0 ? void 0 : {\n          key,\n          host: component,\n          isReactive: true\n        }\n      ),\n      defaultValue\n    );\n  }\n  return defaultValue;\n}\n\n// src/getSet.ts\nimport { isEsriInternalEnv as isEsriInternalEnv6 } from \"@arcgis/components-utils\";\nfunction getSet(defaultValue, getSet2) {\n  const component = retrieveComponent();\n  return trackPropKey(\n    component,\n    (rawName) => {\n      if (process.env.NODE_ENV !== \"production\" && isEsriInternalEnv6() && rawName === void 0) {\n        throw new Error(\n          \"Unable to resolve get/set's prop name. Make sure you are using it like @Prop() someProp = getSet(defaultValue,{get,set})\"\n        );\n      }\n      const name2 = rawName;\n      const manager = component.manager;\n      const genericComponent = component;\n      const value = genericComponent[name2];\n      const isStencilHotReload = process.env.NODE_ENV !== \"production\" && isEsriInternalEnv6() && !manager.isLit && devOnlyGetPersistentControllerData?.(manager) === true;\n      if (value != null && value !== defaultValue && typeof getSet2.set === \"function\" && !isStencilHotReload) {\n        const newValue = getSet2.set(value, defaultValue, name2);\n        if (newValue !== value) {\n          if (manager.isLit) {\n            genericComponent[name2] = newValue;\n          } else {\n            let firstConnected = true;\n            manager.onConnected(() => {\n              if (!firstConnected) {\n                return;\n              }\n              firstConnected = true;\n              bypassSetter(() => {\n                genericComponent[name2] = newValue;\n              });\n            });\n          }\n        }\n      }\n      genericGetSet(component, name2, getSet2);\n    },\n    defaultValue\n  );\n}\nvar dynamicGetSet = (component, property, getSet2) => genericGetSet(component, property, getSet2);\nfunction bypassSetter(callback) {\n  shouldBypass.setter = true;\n  try {\n    return callback();\n  } finally {\n    shouldBypass.setter = false;\n  }\n}\nfunction bypassGetter(callback) {\n  shouldBypass.getter = true;\n  try {\n    return callback();\n  } finally {\n    shouldBypass.getter = false;\n  }\n}\nfunction genericGetSet(component, property, getSet2) {\n  var _a2, _b;\n  const genericGetSet2 = getSet2;\n  const internals = component.manager.internals;\n  const get = typeof genericGetSet2.get === \"function\" ? genericGetSet2.get : void 0;\n  if (get) {\n    (_a2 = internals.getters)[property] ?? (_a2[property] = []);\n    internals.getters[property].unshift(get);\n  }\n  const set = genericGetSet2.set === \"ignore\" ? ignoreSet : genericGetSet2.set;\n  if (set) {\n    (_b = internals.setters)[property] ?? (_b[property] = []);\n    internals.setters[property].unshift(\n      set\n    );\n  }\n}\nvar ignoreSet = (_, value) => value;\n\n// src/readonly.ts\nfunction readonly(value) {\n  const component = retrieveComponent();\n  return getSet(value, { set: component.manager.internals.readonlySetter });\n}\nfunction bypassReadOnly(callback) {\n  shouldBypass.readOnly = true;\n  try {\n    return callback();\n  } finally {\n    shouldBypass.readOnly = false;\n  }\n}\n\n// src/proxyExports.ts\nvar proxyExports = (Class) => (...args) => {\n  const ambientControllers2 = retrieveParentControllers();\n  const instance = new Class(...args);\n  const initialExports = instance.exports;\n  setParentController(ambientControllers2.at(-1));\n  const internals = instance.component.manager.internals;\n  internals.markExports(instance, initialExports);\n  instance.watchExports((exports) => internals.markExports(instance, exports));\n  setAmbientChildController(instance);\n  const hostCandidates = [instance.component, ...ambientControllers2].reverse();\n  return trackKey(\n    hostCandidates,\n    (resolution) => resolution === void 0 ? void 0 : setProxy(instance, resolution, initialExports),\n    initialExports\n  );\n};\nfunction setProxy(controller, { host, key, isReactive: assignedToProp }, initialExports) {\n  const genericHost = host;\n  const controllerValueChanged = genericHost[key] !== controller.exports;\n  const hostValueChanged = genericHost[key] !== initialExports;\n  const controllerUpdatedExports = initialExports !== controller.exports;\n  if (controllerValueChanged && !hostValueChanged && controllerUpdatedExports) {\n    genericHost[key] = controller.exports;\n  }\n  const isProxyExportsOnComponent = host === controller.component;\n  if (isProxyExportsOnComponent) {\n    if (assignedToProp) {\n      const internals = controller.component.manager.internals;\n      if (hostValueChanged) {\n        internals.markExports(controller, genericHost[key]);\n      }\n      watch(controller.component, key, (value) => {\n        if (value !== controller.exports) {\n          internals.markExports(controller, value);\n        }\n      });\n    }\n    controller.assignedProperty = assignedToProp ? void 0 : key;\n  }\n  controller.watchExports(() => {\n    if (genericHost[key] === controller.exports) {\n      return;\n    }\n    const manager = controller.component.manager;\n    const isReadOnly = manager.internals.setters[key]?.includes(manager.internals.readonlySetter);\n    if (isReadOnly) {\n      bypassReadOnly(() => {\n        genericHost[key] = controller.exports;\n      });\n    } else {\n      genericHost[key] = controller.exports;\n    }\n  });\n}\n\nexport {\n  controllerSymbol,\n  isController,\n  devOnlySetPersistentControllerData,\n  devOnlyGetPersistentControllerData,\n  setAmbientComponent,\n  retrieveComponent,\n  setParentController,\n  retrieveParentControllers,\n  elementToInstance,\n  Controller,\n  GenericController,\n  trackPropertyKey,\n  keyTrackResolve,\n  ComponentInternals,\n  watch,\n  trackPropKey,\n  trackKey,\n  getSet,\n  dynamicGetSet,\n  bypassSetter,\n  bypassGetter,\n  readonly,\n  bypassReadOnly,\n  proxyExports\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}