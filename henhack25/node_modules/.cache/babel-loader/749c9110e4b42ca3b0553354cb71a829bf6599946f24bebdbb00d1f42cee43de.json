{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport { quantizeX as t, quantizeY as e, quantizeOptimizedGeometry as r } from \"../../../../../layers/graphics/featureConversionUtils.js\";\nimport i from \"../../../../../layers/graphics/OptimizedGeometry.js\";\nimport { AAggregateCell as s } from \"./AAggregateCell.js\";\nimport { AccumulatedStatistics as o } from \"./AccumulatedStatistics.js\";\nclass l extends s {\n  static createId(t, e) {\n    return `${t}.${e}`;\n  }\n  static create(t, e, r, i) {\n    return new l(t, e, o.create(r), i);\n  }\n  constructor(t, e, r, i) {\n    super(r), this.gridX = t, this.gridY = e, this._worldUnitsPerCell = i, this._count = 0, this._xWorldTotal = 0, this._yWorldTotal = 0, this._objectIds = new Set();\n  }\n  get id() {\n    return l.createId(this.gridX, this.gridY);\n  }\n  get containedObjectIds() {\n    return this._objectIds;\n  }\n  get count() {\n    return this._count;\n  }\n  get firstObjectId() {\n    return this._objectIds.values().next().value;\n  }\n  get centroidXWorld() {\n    return this._xWorldTotal / this._count;\n  }\n  get centroidYWorld() {\n    return this._yWorldTotal / this._count;\n  }\n  clone() {\n    const t = new l(this.gridX, this.gridY, this._statistics.clone(), this._worldUnitsPerCell);\n    return t._count = this._count, t._xWorldTotal = this._xWorldTotal, t._yWorldTotal = this._yWorldTotal, t._firstFeatureAttributes = this._firstFeatureAttributes, t._objectIds = new Set(this._objectIds), t;\n  }\n  insert(t, e, r, i) {\n    0 === this._count ? this._firstFeatureAttributes = t.readAttributes() : this._firstFeatureAttributes = null, this._count += 1, this._xWorldTotal += r, this._yWorldTotal += i, this._statistics.insert(t, e), this._objectIds.add(t.getObjectId());\n  }\n  merge(t) {\n    if (0 !== t._count) {\n      this._count += t._count, this._firstFeatureAttributes = t._firstFeatureAttributes, this._xWorldTotal += t._xWorldTotal, this._yWorldTotal += t._yWorldTotal, this._statistics.merge(t._statistics);\n      for (const e of t._objectIds.values()) this._objectIds.add(e);\n    }\n  }\n  getCentroidX(e) {\n    return null == e ? this.centroidXWorld : t(e, this.centroidXWorld);\n  }\n  getCentroidY(t) {\n    return null == t ? this.centroidYWorld : e(t, this.centroidYWorld);\n  }\n  getGeometry(t, e) {\n    const s = this.gridX * this._worldUnitsPerCell,\n      o = this.gridY * this._worldUnitsPerCell,\n      l = new i([4], [s, o, s + this._worldUnitsPerCell, o, s + this._worldUnitsPerCell, o + this._worldUnitsPerCell, s, o + this._worldUnitsPerCell]);\n    if (null != e) {\n      const t = new i();\n      return r(t, l, !1, !1, \"esriGeometryPolygon\", e);\n    }\n    return l;\n  }\n  getCentroid(t) {\n    const e = new i([], [this.centroidXWorld, this.centroidYWorld]);\n    if (null != t) {\n      const s = new i();\n      return r(s, e, !1, !1, \"esriGeometryPoint\", t);\n    }\n    return e;\n  }\n  getGeometricCentroid(t, e) {\n    const s = this.gridX * this._worldUnitsPerCell + .5 * this._worldUnitsPerCell,\n      o = this.gridY * this._worldUnitsPerCell + .5 * this._worldUnitsPerCell,\n      l = new i([], [s, o]);\n    if (null != e) {\n      const t = new i();\n      return r(t, l, !1, !1, \"esriGeometryPoint\", e);\n    }\n    return l;\n  }\n  getAttributes() {\n    const t = {\n      aggregateId: this.id\n    };\n    for (const e of this._statistics.values()) t[e.field.name] = e.value;\n    return null != this._firstFeatureAttributes ? {\n      ...t,\n      ...this._firstFeatureAttributes\n    } : t;\n  }\n}\nexport { l as GridCell };","map":{"version":3,"names":["quantizeX","t","quantizeY","e","quantizeOptimizedGeometry","r","i","AAggregateCell","s","AccumulatedStatistics","o","l","createId","create","constructor","gridX","gridY","_worldUnitsPerCell","_count","_xWorldTotal","_yWorldTotal","_objectIds","Set","id","containedObjectIds","count","firstObjectId","values","next","value","centroidXWorld","centroidYWorld","clone","_statistics","_firstFeatureAttributes","insert","readAttributes","add","getObjectId","merge","getCentroidX","getCentroidY","getGeometry","getCentroid","getGeometricCentroid","getAttributes","aggregateId","field","name","GridCell"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/node_modules/@arcgis/core/views/2d/layers/features/aggregation/GridCell.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{quantizeX as t,quantizeY as e,quantizeOptimizedGeometry as r}from\"../../../../../layers/graphics/featureConversionUtils.js\";import i from\"../../../../../layers/graphics/OptimizedGeometry.js\";import{AAggregateCell as s}from\"./AAggregateCell.js\";import{AccumulatedStatistics as o}from\"./AccumulatedStatistics.js\";class l extends s{static createId(t,e){return`${t}.${e}`}static create(t,e,r,i){return new l(t,e,o.create(r),i)}constructor(t,e,r,i){super(r),this.gridX=t,this.gridY=e,this._worldUnitsPerCell=i,this._count=0,this._xWorldTotal=0,this._yWorldTotal=0,this._objectIds=new Set}get id(){return l.createId(this.gridX,this.gridY)}get containedObjectIds(){return this._objectIds}get count(){return this._count}get firstObjectId(){return this._objectIds.values().next().value}get centroidXWorld(){return this._xWorldTotal/this._count}get centroidYWorld(){return this._yWorldTotal/this._count}clone(){const t=new l(this.gridX,this.gridY,this._statistics.clone(),this._worldUnitsPerCell);return t._count=this._count,t._xWorldTotal=this._xWorldTotal,t._yWorldTotal=this._yWorldTotal,t._firstFeatureAttributes=this._firstFeatureAttributes,t._objectIds=new Set(this._objectIds),t}insert(t,e,r,i){0===this._count?this._firstFeatureAttributes=t.readAttributes():this._firstFeatureAttributes=null,this._count+=1,this._xWorldTotal+=r,this._yWorldTotal+=i,this._statistics.insert(t,e),this._objectIds.add(t.getObjectId())}merge(t){if(0!==t._count){this._count+=t._count,this._firstFeatureAttributes=t._firstFeatureAttributes,this._xWorldTotal+=t._xWorldTotal,this._yWorldTotal+=t._yWorldTotal,this._statistics.merge(t._statistics);for(const e of t._objectIds.values())this._objectIds.add(e)}}getCentroidX(e){return null==e?this.centroidXWorld:t(e,this.centroidXWorld)}getCentroidY(t){return null==t?this.centroidYWorld:e(t,this.centroidYWorld)}getGeometry(t,e){const s=this.gridX*this._worldUnitsPerCell,o=this.gridY*this._worldUnitsPerCell,l=new i([4],[s,o,s+this._worldUnitsPerCell,o,s+this._worldUnitsPerCell,o+this._worldUnitsPerCell,s,o+this._worldUnitsPerCell]);if(null!=e){const t=new i;return r(t,l,!1,!1,\"esriGeometryPolygon\",e)}return l}getCentroid(t){const e=new i([],[this.centroidXWorld,this.centroidYWorld]);if(null!=t){const s=new i;return r(s,e,!1,!1,\"esriGeometryPoint\",t)}return e}getGeometricCentroid(t,e){const s=this.gridX*this._worldUnitsPerCell+.5*this._worldUnitsPerCell,o=this.gridY*this._worldUnitsPerCell+.5*this._worldUnitsPerCell,l=new i([],[s,o]);if(null!=e){const t=new i;return r(t,l,!1,!1,\"esriGeometryPoint\",e)}return l}getAttributes(){const t={aggregateId:this.id};for(const e of this._statistics.values())t[e.field.name]=e.value;return null!=this._firstFeatureAttributes?{...t,...this._firstFeatureAttributes}:t}}export{l as GridCell};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}