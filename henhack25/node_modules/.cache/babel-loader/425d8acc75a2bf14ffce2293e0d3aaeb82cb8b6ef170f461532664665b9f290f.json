{"ast":null,"code":"/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global WritableStream */\n// deno-lint-ignore-file no-this-alias\n\nimport { initStream, Reader, TextReader, TextWriter, Data64URIReader, Data64URIWriter, Uint8ArrayReader, Uint8ArrayWriter, BlobReader, BlobWriter, HttpReader } from \"./io.js\";\nimport { ZipReader, ERR_INVALID_PASSWORD } from \"./zip-reader.js\";\nimport { ZipWriter } from \"./zip-writer.js\";\nimport { Entry } from \"./zip-entry.js\";\nimport { UNDEFINED_VALUE } from \"./constants.js\";\nclass ZipEntry {\n  constructor(fs, name, params, parent) {\n    const zipEntry = this;\n    if (fs.root && parent && parent.getChildByName(name)) {\n      throw new Error(\"Entry filename already exists\");\n    }\n    if (!params) {\n      params = {};\n    }\n    Object.assign(zipEntry, {\n      fs,\n      name,\n      data: params.data,\n      options: params.options,\n      id: fs.entries.length,\n      parent,\n      children: [],\n      uncompressedSize: params.uncompressedSize || 0,\n      passThrough: params.passThrough\n    });\n    fs.entries.push(zipEntry);\n    if (parent) {\n      zipEntry.parent.children.push(zipEntry);\n    }\n  }\n  moveTo(target) {\n    // deprecated\n    const zipEntry = this;\n    zipEntry.fs.move(zipEntry, target);\n  }\n  getFullname() {\n    return this.getRelativeName();\n  }\n  getRelativeName() {\n    let ancestor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.fs.root;\n    const zipEntry = this;\n    let relativeName = zipEntry.name;\n    let entry = zipEntry.parent;\n    while (entry && entry != ancestor) {\n      relativeName = (entry.name ? entry.name + \"/\" : \"\") + relativeName;\n      entry = entry.parent;\n    }\n    return relativeName;\n  }\n  isDescendantOf(ancestor) {\n    let entry = this.parent;\n    while (entry && entry.id != ancestor.id) {\n      entry = entry.parent;\n    }\n    return Boolean(entry);\n  }\n  rename(name) {\n    const parent = this.parent;\n    if (parent && parent.getChildByName(name)) {\n      throw new Error(\"Entry filename already exists\");\n    } else {\n      this.name = name;\n    }\n  }\n}\nclass ZipFileEntry extends ZipEntry {\n  constructor(fs, name, params, parent) {\n    super(fs, name, params, parent);\n    const zipEntry = this;\n    zipEntry.Reader = params.Reader;\n    zipEntry.Writer = params.Writer;\n    if (params.getData) {\n      zipEntry.getData = params.getData;\n    }\n  }\n  clone() {\n    return new ZipFileEntry(this.fs, this.name, this);\n  }\n  async getData(writer) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const zipEntry = this;\n    if (!writer || writer.constructor == zipEntry.Writer && zipEntry.data) {\n      return zipEntry.data;\n    } else {\n      const reader = zipEntry.reader = new zipEntry.Reader(zipEntry.data, options);\n      const uncompressedSize = zipEntry.data ? zipEntry.data.uncompressedSize : reader.size;\n      await Promise.all([initStream(reader), initStream(writer, uncompressedSize)]);\n      const readable = reader.readable;\n      readable.size = zipEntry.uncompressedSize = reader.size;\n      await readable.pipeTo(writer.writable);\n      return writer.getData ? writer.getData() : writer.writable;\n    }\n  }\n  isPasswordProtected() {\n    return this.data.encrypted;\n  }\n  async checkPassword(password) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const zipEntry = this;\n    if (zipEntry.isPasswordProtected()) {\n      options.password = password;\n      options.checkPasswordOnly = true;\n      try {\n        await zipEntry.data.getData(null, options);\n        return true;\n      } catch (error) {\n        if (error.message == ERR_INVALID_PASSWORD) {\n          return false;\n        } else {\n          throw error;\n        }\n      }\n    } else {\n      return true;\n    }\n  }\n  getText(encoding, options) {\n    return this.getData(new TextWriter(encoding), options);\n  }\n  getBlob(mimeType, options) {\n    return this.getData(new BlobWriter(mimeType), options);\n  }\n  getData64URI(mimeType, options) {\n    return this.getData(new Data64URIWriter(mimeType), options);\n  }\n  getUint8Array(options) {\n    return this.getData(new Uint8ArrayWriter(), options);\n  }\n  getWritable() {\n    let writable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new WritableStream();\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n    return this.getData({\n      writable\n    }, options);\n  }\n  replaceBlob(blob) {\n    Object.assign(this, {\n      data: blob,\n      Reader: BlobReader,\n      Writer: BlobWriter,\n      reader: null\n    });\n  }\n  replaceText(text) {\n    Object.assign(this, {\n      data: text,\n      Reader: TextReader,\n      Writer: TextWriter,\n      reader: null\n    });\n  }\n  replaceData64URI(dataURI) {\n    Object.assign(this, {\n      data: dataURI,\n      Reader: Data64URIReader,\n      Writer: Data64URIWriter,\n      reader: null\n    });\n  }\n  replaceUint8Array(array) {\n    Object.assign(this, {\n      data: array,\n      Reader: Uint8ArrayReader,\n      Writer: Uint8ArrayWriter,\n      reader: null\n    });\n  }\n  replaceReadable(readable) {\n    Object.assign(this, {\n      data: null,\n      Reader: function () {\n        return {\n          readable\n        };\n      },\n      Writer: null,\n      reader: null\n    });\n  }\n}\nclass ZipDirectoryEntry extends ZipEntry {\n  constructor(fs, name, params, parent) {\n    super(fs, name, params, parent);\n    this.directory = true;\n  }\n  clone(deepClone) {\n    const zipEntry = this;\n    const clonedEntry = new ZipDirectoryEntry(zipEntry.fs, zipEntry.name);\n    if (deepClone) {\n      clonedEntry.children = zipEntry.children.map(child => {\n        const childClone = child.clone(deepClone);\n        childClone.parent = clonedEntry;\n        return childClone;\n      });\n    }\n    return clonedEntry;\n  }\n  addDirectory(name, options) {\n    return addChild(this, name, {\n      options\n    }, true);\n  }\n  addText(name, text) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return addChild(this, name, {\n      data: text,\n      Reader: TextReader,\n      Writer: TextWriter,\n      options,\n      uncompressedSize: text.length\n    });\n  }\n  addBlob(name, blob) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return addChild(this, name, {\n      data: blob,\n      Reader: BlobReader,\n      Writer: BlobWriter,\n      options,\n      uncompressedSize: blob.size\n    });\n  }\n  addData64URI(name, dataURI) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let dataEnd = dataURI.length;\n    while (dataURI.charAt(dataEnd - 1) == \"=\") {\n      dataEnd--;\n    }\n    const dataStart = dataURI.indexOf(\",\") + 1;\n    return addChild(this, name, {\n      data: dataURI,\n      Reader: Data64URIReader,\n      Writer: Data64URIWriter,\n      options,\n      uncompressedSize: Math.floor((dataEnd - dataStart) * 0.75)\n    });\n  }\n  addUint8Array(name, array) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return addChild(this, name, {\n      data: array,\n      Reader: Uint8ArrayReader,\n      Writer: Uint8ArrayWriter,\n      options,\n      uncompressedSize: array.length\n    });\n  }\n  addHttpContent(name, url) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return addChild(this, name, {\n      data: url,\n      Reader: class extends HttpReader {\n        constructor(url) {\n          super(url, options);\n        }\n      },\n      options\n    });\n  }\n  addReadable(name, readable) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return addChild(this, name, {\n      Reader: function () {\n        return {\n          readable\n        };\n      },\n      options\n    });\n  }\n  addFileSystemEntry(fileSystemEntry) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return addFileSystemHandle(this, fileSystemEntry, options);\n  }\n  addFileSystemHandle(handle) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return addFileSystemHandle(this, handle, options);\n  }\n  addFile(file) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!options.lastModDate) {\n      options.lastModDate = new Date(file.lastModified);\n    }\n    return addChild(this, file.name, {\n      data: file,\n      Reader: function () {\n        const readable = file.stream();\n        const size = file.size;\n        return {\n          readable,\n          size\n        };\n      },\n      options,\n      uncompressedSize: file.size\n    });\n  }\n  addData(name, params) {\n    return addChild(this, name, params);\n  }\n  importBlob(blob, options) {\n    return this.importZip(new BlobReader(blob), options);\n  }\n  importData64URI(dataURI, options) {\n    return this.importZip(new Data64URIReader(dataURI), options);\n  }\n  importUint8Array(array, options) {\n    return this.importZip(new Uint8ArrayReader(array), options);\n  }\n  importHttpContent(url, options) {\n    return this.importZip(new HttpReader(url, options), options);\n  }\n  importReadable(readable, options) {\n    return this.importZip({\n      readable\n    }, options);\n  }\n  exportBlob() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.exportZip(new BlobWriter(options.mimeType || \"application/zip\"), options);\n  }\n  exportData64URI() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.exportZip(new Data64URIWriter(options.mimeType || \"application/zip\"), options);\n  }\n  exportUint8Array() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.exportZip(new Uint8ArrayWriter(), options);\n  }\n  async exportWritable() {\n    let writable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new WritableStream();\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    await this.exportZip({\n      writable\n    }, options);\n    return writable;\n  }\n  async importZip(reader) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    await initStream(reader);\n    const zipReader = new ZipReader(reader, options);\n    const importedEntries = [];\n    const entries = await zipReader.getEntries();\n    for (const entry of entries) {\n      let parent = this;\n      try {\n        const path = entry.filename.split(\"/\");\n        const name = path.pop();\n        path.forEach((pathPart, pathIndex) => {\n          const previousParent = parent;\n          parent = parent.getChildByName(pathPart);\n          if (!parent) {\n            parent = new ZipDirectoryEntry(this.fs, pathPart, {\n              data: pathIndex == path.length - 1 ? entry : null\n            }, previousParent);\n            importedEntries.push(parent);\n          }\n        });\n        if (!entry.directory) {\n          importedEntries.push(addChild(parent, name, {\n            data: entry,\n            Reader: getZipBlobReader(Object.assign({}, options)),\n            uncompressedSize: entry.uncompressedSize,\n            passThrough: options.passThrough\n          }));\n        }\n      } catch (error) {\n        try {\n          error.cause = {\n            entry\n          };\n          // eslint-disable-next-line no-unused-vars\n        } catch (_) {\n          // ignored\n        }\n        throw error;\n      }\n    }\n    return importedEntries;\n  }\n  async exportZip(writer, options) {\n    const zipEntry = this;\n    if (options.bufferedWrite === UNDEFINED_VALUE) {\n      options.bufferedWrite = true;\n    }\n    await Promise.all([initReaders(zipEntry, options.readerOptions), initStream(writer)]);\n    const zipWriter = new ZipWriter(writer, options);\n    await exportZip(zipWriter, zipEntry, getTotalSize([zipEntry], \"uncompressedSize\"), options);\n    await zipWriter.close();\n    return writer.getData ? writer.getData() : writer.writable;\n  }\n  getChildByName(name) {\n    const children = this.children;\n    for (let childIndex = 0; childIndex < children.length; childIndex++) {\n      const child = children[childIndex];\n      if (child.name == name) {\n        return child;\n      }\n    }\n  }\n  isPasswordProtected() {\n    const children = this.children;\n    for (let childIndex = 0; childIndex < children.length; childIndex++) {\n      const child = children[childIndex];\n      if (child.isPasswordProtected()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  async checkPassword(password) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const children = this.children;\n    const result = await Promise.all(children.map(child => child.checkPassword(password, options)));\n    return !result.includes(false);\n  }\n}\nclass FS {\n  constructor() {\n    resetFS(this);\n  }\n  get children() {\n    return this.root.children;\n  }\n  remove(entry) {\n    detach(entry);\n    this.entries[entry.id] = null;\n  }\n  move(entry, destination) {\n    if (entry == this.root) {\n      throw new Error(\"Root directory cannot be moved\");\n    } else {\n      if (destination.directory) {\n        if (!destination.isDescendantOf(entry)) {\n          if (entry != destination) {\n            if (destination.getChildByName(entry.name)) {\n              throw new Error(\"Entry filename already exists\");\n            }\n            detach(entry);\n            entry.parent = destination;\n            destination.children.push(entry);\n          }\n        } else {\n          throw new Error(\"Entry is a ancestor of target entry\");\n        }\n      } else {\n        throw new Error(\"Target entry is not a directory\");\n      }\n    }\n  }\n  find(fullname) {\n    const path = fullname.split(\"/\");\n    let node = this.root;\n    for (let index = 0; node && index < path.length; index++) {\n      node = node.getChildByName(path[index]);\n    }\n    return node;\n  }\n  getById(id) {\n    return this.entries[id];\n  }\n  getChildByName(name) {\n    return this.root.getChildByName(name);\n  }\n  addDirectory(name, options) {\n    return this.root.addDirectory(name, options);\n  }\n  addText(name, text, options) {\n    return this.root.addText(name, text, options);\n  }\n  addBlob(name, blob, options) {\n    return this.root.addBlob(name, blob, options);\n  }\n  addData64URI(name, dataURI, options) {\n    return this.root.addData64URI(name, dataURI, options);\n  }\n  addUint8Array(name, array, options) {\n    return this.root.addUint8Array(name, array, options);\n  }\n  addHttpContent(name, url, options) {\n    return this.root.addHttpContent(name, url, options);\n  }\n  addReadable(name, readable, options) {\n    return this.root.addReadable(name, readable, options);\n  }\n  addFileSystemEntry(fileSystemEntry, options) {\n    return this.root.addFileSystemEntry(fileSystemEntry, options);\n  }\n  addFileSystemHandle(handle, options) {\n    return this.root.addFileSystemHandle(handle, options);\n  }\n  addFile(file, options) {\n    return this.root.addFile(file, options);\n  }\n  addData(name, params) {\n    return this.root.addData(name, params);\n  }\n  importBlob(blob, options) {\n    resetFS(this);\n    return this.root.importBlob(blob, options);\n  }\n  importData64URI(dataURI, options) {\n    resetFS(this);\n    return this.root.importData64URI(dataURI, options);\n  }\n  importUint8Array(array, options) {\n    resetFS(this);\n    return this.root.importUint8Array(array, options);\n  }\n  importHttpContent(url, options) {\n    resetFS(this);\n    return this.root.importHttpContent(url, options);\n  }\n  importReadable(readable, options) {\n    resetFS(this);\n    return this.root.importReadable(readable, options);\n  }\n  importZip(reader, options) {\n    return this.root.importZip(reader, options);\n  }\n  exportBlob(options) {\n    return this.root.exportBlob(options);\n  }\n  exportData64URI(options) {\n    return this.root.exportData64URI(options);\n  }\n  exportUint8Array(options) {\n    return this.root.exportUint8Array(options);\n  }\n  exportWritable(writable, options) {\n    return this.root.exportWritable(writable, options);\n  }\n  isPasswordProtected() {\n    return this.root.isPasswordProtected();\n  }\n  checkPassword(password, options) {\n    return this.root.checkPassword(password, options);\n  }\n}\nconst fs = {\n  FS,\n  ZipDirectoryEntry,\n  ZipFileEntry\n};\nexport { fs };\nfunction getTotalSize(entries, propertyName) {\n  let size = 0;\n  entries.forEach(process);\n  return size;\n  function process(entry) {\n    size += entry[propertyName];\n    if (entry.children) {\n      entry.children.forEach(process);\n    }\n  }\n}\nfunction getZipBlobReader(options) {\n  return class extends Reader {\n    constructor(entry) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      super();\n      this.entry = entry;\n      this.options = options;\n    }\n    async init() {\n      const zipBlobReader = this;\n      zipBlobReader.size = zipBlobReader.entry.uncompressedSize;\n      const data = await zipBlobReader.entry.getData(new BlobWriter(), Object.assign({}, zipBlobReader.options, options));\n      zipBlobReader.data = data;\n      zipBlobReader.blobReader = new BlobReader(data);\n      super.init();\n    }\n    readUint8Array(index, length) {\n      return this.blobReader.readUint8Array(index, length);\n    }\n  };\n}\nasync function initReaders(entry, options) {\n  if (entry.children.length) {\n    await Promise.all(entry.children.map(async child => {\n      if (child.directory) {\n        await initReaders(child, options);\n      } else {\n        const reader = child.reader = new child.Reader(child.data, options);\n        try {\n          await initStream(reader);\n        } catch (error) {\n          try {\n            error.entryId = child.id;\n            error.cause = {\n              entry: child\n            };\n            // eslint-disable-next-line no-unused-vars\n          } catch (_) {\n            // ignored\n          }\n          throw error;\n        }\n        child.uncompressedSize = reader.size;\n      }\n    }));\n  }\n}\nfunction detach(entry) {\n  if (entry.parent) {\n    const children = entry.parent.children;\n    children.forEach((child, index) => {\n      if (child.id == entry.id) {\n        children.splice(index, 1);\n      }\n    });\n  }\n}\nasync function exportZip(zipWriter, entry, totalSize, options) {\n  const selectedEntry = entry;\n  const entryOffsets = new Map();\n  await process(zipWriter, entry);\n  async function process(zipWriter, entry) {\n    await exportChild();\n    async function exportChild() {\n      if (options.bufferedWrite) {\n        await Promise.allSettled(entry.children.map(processChild));\n      } else {\n        for (const child of entry.children) {\n          await processChild(child);\n        }\n      }\n    }\n    async function processChild(child) {\n      const name = options.relativePath ? child.getRelativeName(selectedEntry) : child.getFullname();\n      const childOptions = child.options || {};\n      let zipEntryOptions = {};\n      if (child.data instanceof Entry) {\n        const {\n          externalFileAttributes,\n          versionMadeBy,\n          comment,\n          lastModDate,\n          creationDate,\n          lastAccessDate,\n          uncompressedSize,\n          encrypted,\n          zipCrypto,\n          signature,\n          compressionMethod,\n          extraFieldAES\n        } = child.data;\n        zipEntryOptions = {\n          externalFileAttributes,\n          versionMadeBy,\n          comment,\n          lastModDate,\n          creationDate,\n          lastAccessDate\n        };\n        if (child.passThrough) {\n          let level, encryptionStrength;\n          if (compressionMethod === 0) {\n            level = 0;\n          }\n          if (extraFieldAES) {\n            encryptionStrength = extraFieldAES.strength;\n          }\n          zipEntryOptions = Object.assign(zipEntryOptions, {\n            passThrough: true,\n            encrypted,\n            zipCrypto,\n            signature,\n            uncompressedSize,\n            level,\n            encryptionStrength,\n            compressionMethod\n          });\n        }\n      }\n      await zipWriter.add(name, child.reader, Object.assign({\n        directory: child.directory\n      }, Object.assign({}, options, zipEntryOptions, childOptions, {\n        onprogress: async indexProgress => {\n          if (options.onprogress) {\n            entryOffsets.set(name, indexProgress);\n            try {\n              await options.onprogress(Array.from(entryOffsets.values()).reduce((previousValue, currentValue) => previousValue + currentValue), totalSize);\n              // eslint-disable-next-line no-unused-vars\n            } catch (_) {\n              // ignored\n            }\n          }\n        }\n      })));\n      await process(zipWriter, child);\n    }\n  }\n}\nfunction addFileSystemHandle(zipEntry, handle, options) {\n  return addFile(zipEntry, handle, []);\n  async function addFile(parentEntry, handle, addedEntries) {\n    if (handle) {\n      try {\n        if (handle.isFile || handle.isDirectory) {\n          handle = await transformToFileSystemhandle(handle);\n        }\n        if (handle.kind == \"file\") {\n          const file = await handle.getFile();\n          addedEntries.push(parentEntry.addData(file.name, {\n            Reader: function () {\n              const readable = file.stream();\n              const size = file.size;\n              return {\n                readable,\n                size\n              };\n            },\n            options: Object.assign({}, {\n              lastModDate: new Date(file.lastModified)\n            }, options),\n            uncompressedSize: file.size\n          }));\n        } else if (handle.kind == \"directory\") {\n          const directoryEntry = parentEntry.addDirectory(handle.name);\n          addedEntries.push(directoryEntry);\n          for await (const childHandle of handle.values()) {\n            await addFile(directoryEntry, childHandle, addedEntries);\n          }\n        }\n      } catch (error) {\n        const message = error.message + (handle ? \" (\" + handle.name + \")\" : \"\");\n        throw new Error(message);\n      }\n    }\n    return addedEntries;\n  }\n}\nasync function transformToFileSystemhandle(entry) {\n  const handle = {\n    name: entry.name\n  };\n  if (entry.isFile) {\n    handle.kind = \"file\";\n    handle.getFile = () => new Promise((resolve, reject) => entry.file(resolve, reject));\n  }\n  if (entry.isDirectory) {\n    handle.kind = \"directory\";\n    const handles = await transformToFileSystemhandles(entry);\n    handle.values = () => handles;\n  }\n  return handle;\n}\nasync function transformToFileSystemhandles(entry) {\n  const entries = [];\n  function readEntries(directoryReader, resolve, reject) {\n    directoryReader.readEntries(async entriesPart => {\n      if (!entriesPart.length) {\n        resolve(entries);\n      } else {\n        for (const entry of entriesPart) {\n          entries.push(await transformToFileSystemhandle(entry));\n        }\n        readEntries(directoryReader, resolve, reject);\n      }\n    }, reject);\n  }\n  await new Promise((resolve, reject) => readEntries(entry.createReader(), resolve, reject));\n  return {\n    [Symbol.iterator]() {\n      let entryIndex = 0;\n      return {\n        next() {\n          const result = {\n            value: entries[entryIndex],\n            done: entryIndex === entries.length\n          };\n          entryIndex++;\n          return result;\n        }\n      };\n    }\n  };\n}\nfunction resetFS(fs) {\n  fs.entries = [];\n  fs.root = new ZipDirectoryEntry(fs);\n}\nfunction addChild(parent, name, params, directory) {\n  if (parent.directory) {\n    return directory ? new ZipDirectoryEntry(parent.fs, name, params, parent) : new ZipFileEntry(parent.fs, name, params, parent);\n  } else {\n    throw new Error(\"Parent entry is not a directory\");\n  }\n}","map":{"version":3,"names":["initStream","Reader","TextReader","TextWriter","Data64URIReader","Data64URIWriter","Uint8ArrayReader","Uint8ArrayWriter","BlobReader","BlobWriter","HttpReader","ZipReader","ERR_INVALID_PASSWORD","ZipWriter","Entry","UNDEFINED_VALUE","ZipEntry","constructor","fs","name","params","parent","zipEntry","root","getChildByName","Error","Object","assign","data","options","id","entries","length","children","uncompressedSize","passThrough","push","moveTo","target","move","getFullname","getRelativeName","ancestor","arguments","undefined","relativeName","entry","isDescendantOf","Boolean","rename","ZipFileEntry","Writer","getData","clone","writer","reader","size","Promise","all","readable","pipeTo","writable","isPasswordProtected","encrypted","checkPassword","password","checkPasswordOnly","error","message","getText","encoding","getBlob","mimeType","getData64URI","getUint8Array","getWritable","WritableStream","replaceBlob","blob","replaceText","text","replaceData64URI","dataURI","replaceUint8Array","array","replaceReadable","ZipDirectoryEntry","directory","deepClone","clonedEntry","map","child","childClone","addDirectory","addChild","addText","addBlob","addData64URI","dataEnd","charAt","dataStart","indexOf","Math","floor","addUint8Array","addHttpContent","url","addReadable","addFileSystemEntry","fileSystemEntry","addFileSystemHandle","handle","addFile","file","lastModDate","Date","lastModified","stream","addData","importBlob","importZip","importData64URI","importUint8Array","importHttpContent","importReadable","exportBlob","exportZip","exportData64URI","exportUint8Array","exportWritable","zipReader","importedEntries","getEntries","path","filename","split","pop","forEach","pathPart","pathIndex","previousParent","getZipBlobReader","cause","_","bufferedWrite","initReaders","readerOptions","zipWriter","getTotalSize","close","childIndex","result","includes","FS","resetFS","remove","detach","destination","find","fullname","node","index","getById","propertyName","process","init","zipBlobReader","blobReader","readUint8Array","entryId","splice","totalSize","selectedEntry","entryOffsets","Map","exportChild","allSettled","processChild","relativePath","childOptions","zipEntryOptions","externalFileAttributes","versionMadeBy","comment","creationDate","lastAccessDate","zipCrypto","signature","compressionMethod","extraFieldAES","level","encryptionStrength","strength","add","onprogress","indexProgress","set","Array","from","values","reduce","previousValue","currentValue","parentEntry","addedEntries","isFile","isDirectory","transformToFileSystemhandle","kind","getFile","directoryEntry","childHandle","resolve","reject","handles","transformToFileSystemhandles","readEntries","directoryReader","entriesPart","createReader","Symbol","iterator","entryIndex","next","value","done"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/node_modules/@zip.js/zip.js/lib/core/zip-fs-core.js"],"sourcesContent":["/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global WritableStream */\n// deno-lint-ignore-file no-this-alias\n\nimport {\n\tinitStream,\n\tReader,\n\tTextReader,\n\tTextWriter,\n\tData64URIReader,\n\tData64URIWriter,\n\tUint8ArrayReader,\n\tUint8ArrayWriter,\n\tBlobReader,\n\tBlobWriter,\n\tHttpReader\n} from \"./io.js\";\nimport {\n\tZipReader,\n\tERR_INVALID_PASSWORD\n} from \"./zip-reader.js\";\nimport {\n\tZipWriter\n} from \"./zip-writer.js\";\nimport {\n\tEntry\n} from \"./zip-entry.js\";\nimport { UNDEFINED_VALUE } from \"./constants.js\";\n\nclass ZipEntry {\n\n\tconstructor(fs, name, params, parent) {\n\t\tconst zipEntry = this;\n\t\tif (fs.root && parent && parent.getChildByName(name)) {\n\t\t\tthrow new Error(\"Entry filename already exists\");\n\t\t}\n\t\tif (!params) {\n\t\t\tparams = {};\n\t\t}\n\t\tObject.assign(zipEntry, {\n\t\t\tfs,\n\t\t\tname,\n\t\t\tdata: params.data,\n\t\t\toptions: params.options,\n\t\t\tid: fs.entries.length,\n\t\t\tparent,\n\t\t\tchildren: [],\n\t\t\tuncompressedSize: params.uncompressedSize || 0,\n\t\t\tpassThrough: params.passThrough\n\t\t});\n\t\tfs.entries.push(zipEntry);\n\t\tif (parent) {\n\t\t\tzipEntry.parent.children.push(zipEntry);\n\t\t}\n\t}\n\n\tmoveTo(target) {\n\t\t// deprecated\n\t\tconst zipEntry = this;\n\t\tzipEntry.fs.move(zipEntry, target);\n\t}\n\n\tgetFullname() {\n\t\treturn this.getRelativeName();\n\t}\n\n\tgetRelativeName(ancestor = this.fs.root) {\n\t\tconst zipEntry = this;\n\t\tlet relativeName = zipEntry.name;\n\t\tlet entry = zipEntry.parent;\n\t\twhile (entry && entry != ancestor) {\n\t\t\trelativeName = (entry.name ? entry.name + \"/\" : \"\") + relativeName;\n\t\t\tentry = entry.parent;\n\t\t}\n\t\treturn relativeName;\n\t}\n\n\tisDescendantOf(ancestor) {\n\t\tlet entry = this.parent;\n\t\twhile (entry && entry.id != ancestor.id) {\n\t\t\tentry = entry.parent;\n\t\t}\n\t\treturn Boolean(entry);\n\t}\n\n\trename(name) {\n\t\tconst parent = this.parent;\n\t\tif (parent && parent.getChildByName(name)) {\n\t\t\tthrow new Error(\"Entry filename already exists\");\n\t\t} else {\n\t\t\tthis.name = name;\n\t\t}\n\t}\n}\n\nclass ZipFileEntry extends ZipEntry {\n\n\tconstructor(fs, name, params, parent) {\n\t\tsuper(fs, name, params, parent);\n\t\tconst zipEntry = this;\n\t\tzipEntry.Reader = params.Reader;\n\t\tzipEntry.Writer = params.Writer;\n\t\tif (params.getData) {\n\t\t\tzipEntry.getData = params.getData;\n\t\t}\n\t}\n\n\tclone() {\n\t\treturn new ZipFileEntry(this.fs, this.name, this);\n\t}\n\n\tasync getData(writer, options = {}) {\n\t\tconst zipEntry = this;\n\t\tif (!writer || (writer.constructor == zipEntry.Writer && zipEntry.data)) {\n\t\t\treturn zipEntry.data;\n\t\t} else {\n\t\t\tconst reader = zipEntry.reader = new zipEntry.Reader(zipEntry.data, options);\n\t\t\tconst uncompressedSize = zipEntry.data ? zipEntry.data.uncompressedSize : reader.size;\n\t\t\tawait Promise.all([initStream(reader), initStream(writer, uncompressedSize)]);\n\t\t\tconst readable = reader.readable;\n\t\t\treadable.size = zipEntry.uncompressedSize = reader.size;\n\t\t\tawait readable.pipeTo(writer.writable);\n\t\t\treturn writer.getData ? writer.getData() : writer.writable;\n\t\t}\n\t}\n\n\tisPasswordProtected() {\n\t\treturn this.data.encrypted;\n\t}\n\n\tasync checkPassword(password, options = {}) {\n\t\tconst zipEntry = this;\n\t\tif (zipEntry.isPasswordProtected()) {\n\t\t\toptions.password = password;\n\t\t\toptions.checkPasswordOnly = true;\n\t\t\ttry {\n\t\t\t\tawait zipEntry.data.getData(null, options);\n\t\t\t\treturn true;\n\t\t\t} catch (error) {\n\t\t\t\tif (error.message == ERR_INVALID_PASSWORD) {\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tgetText(encoding, options) {\n\t\treturn this.getData(new TextWriter(encoding), options);\n\t}\n\n\tgetBlob(mimeType, options) {\n\t\treturn this.getData(new BlobWriter(mimeType), options);\n\t}\n\n\tgetData64URI(mimeType, options) {\n\t\treturn this.getData(new Data64URIWriter(mimeType), options);\n\t}\n\n\tgetUint8Array(options) {\n\t\treturn this.getData(new Uint8ArrayWriter(), options);\n\t}\n\n\tgetWritable(writable = new WritableStream(), options) {\n\t\treturn this.getData({ writable }, options);\n\t}\n\n\treplaceBlob(blob) {\n\t\tObject.assign(this, {\n\t\t\tdata: blob,\n\t\t\tReader: BlobReader,\n\t\t\tWriter: BlobWriter,\n\t\t\treader: null\n\t\t});\n\t}\n\n\treplaceText(text) {\n\t\tObject.assign(this, {\n\t\t\tdata: text,\n\t\t\tReader: TextReader,\n\t\t\tWriter: TextWriter,\n\t\t\treader: null\n\t\t});\n\t}\n\n\treplaceData64URI(dataURI) {\n\t\tObject.assign(this, {\n\t\t\tdata: dataURI,\n\t\t\tReader: Data64URIReader,\n\t\t\tWriter: Data64URIWriter,\n\t\t\treader: null\n\t\t});\n\t}\n\n\treplaceUint8Array(array) {\n\t\tObject.assign(this, {\n\t\t\tdata: array,\n\t\t\tReader: Uint8ArrayReader,\n\t\t\tWriter: Uint8ArrayWriter,\n\t\t\treader: null\n\t\t});\n\t}\n\n\treplaceReadable(readable) {\n\t\tObject.assign(this, {\n\t\t\tdata: null,\n\t\t\tReader: function () { return { readable }; },\n\t\t\tWriter: null,\n\t\t\treader: null\n\t\t});\n\t}\n}\n\nclass ZipDirectoryEntry extends ZipEntry {\n\n\tconstructor(fs, name, params, parent) {\n\t\tsuper(fs, name, params, parent);\n\t\tthis.directory = true;\n\t}\n\n\tclone(deepClone) {\n\t\tconst zipEntry = this;\n\t\tconst clonedEntry = new ZipDirectoryEntry(zipEntry.fs, zipEntry.name);\n\t\tif (deepClone) {\n\t\t\tclonedEntry.children = zipEntry.children.map(child => {\n\t\t\t\tconst childClone = child.clone(deepClone);\n\t\t\t\tchildClone.parent = clonedEntry;\n\t\t\t\treturn childClone;\n\t\t\t});\n\t\t}\n\t\treturn clonedEntry;\n\t}\n\n\taddDirectory(name, options) {\n\t\treturn addChild(this, name, { options }, true);\n\t}\n\n\taddText(name, text, options = {}) {\n\t\treturn addChild(this, name, {\n\t\t\tdata: text,\n\t\t\tReader: TextReader,\n\t\t\tWriter: TextWriter,\n\t\t\toptions,\n\t\t\tuncompressedSize: text.length\n\t\t});\n\t}\n\n\taddBlob(name, blob, options = {}) {\n\t\treturn addChild(this, name, {\n\t\t\tdata: blob,\n\t\t\tReader: BlobReader,\n\t\t\tWriter: BlobWriter,\n\t\t\toptions,\n\t\t\tuncompressedSize: blob.size\n\t\t});\n\t}\n\n\taddData64URI(name, dataURI, options = {}) {\n\t\tlet dataEnd = dataURI.length;\n\t\twhile (dataURI.charAt(dataEnd - 1) == \"=\") {\n\t\t\tdataEnd--;\n\t\t}\n\t\tconst dataStart = dataURI.indexOf(\",\") + 1;\n\t\treturn addChild(this, name, {\n\t\t\tdata: dataURI,\n\t\t\tReader: Data64URIReader,\n\t\t\tWriter: Data64URIWriter,\n\t\t\toptions,\n\t\t\tuncompressedSize: Math.floor((dataEnd - dataStart) * 0.75)\n\t\t});\n\t}\n\n\taddUint8Array(name, array, options = {}) {\n\t\treturn addChild(this, name, {\n\t\t\tdata: array,\n\t\t\tReader: Uint8ArrayReader,\n\t\t\tWriter: Uint8ArrayWriter,\n\t\t\toptions,\n\t\t\tuncompressedSize: array.length\n\t\t});\n\t}\n\n\taddHttpContent(name, url, options = {}) {\n\t\treturn addChild(this, name, {\n\t\t\tdata: url,\n\t\t\tReader: class extends HttpReader {\n\t\t\t\tconstructor(url) {\n\t\t\t\t\tsuper(url, options);\n\t\t\t\t}\n\t\t\t},\n\t\t\toptions\n\t\t});\n\t}\n\n\taddReadable(name, readable, options = {}) {\n\t\treturn addChild(this, name, {\n\t\t\tReader: function () { return { readable }; },\n\t\t\toptions\n\t\t});\n\t}\n\n\taddFileSystemEntry(fileSystemEntry, options = {}) {\n\t\treturn addFileSystemHandle(this, fileSystemEntry, options);\n\t}\n\n\taddFileSystemHandle(handle, options = {}) {\n\t\treturn addFileSystemHandle(this, handle, options);\n\t}\n\n\taddFile(file, options = {}) {\n\t\tif (!options.lastModDate) {\n\t\t\toptions.lastModDate = new Date(file.lastModified);\n\t\t}\n\t\treturn addChild(this, file.name, {\n\t\t\tdata: file,\n\t\t\tReader: function () {\n\t\t\t\tconst readable = file.stream();\n\t\t\t\tconst size = file.size;\n\t\t\t\treturn { readable, size };\n\t\t\t},\n\t\t\toptions,\n\t\t\tuncompressedSize: file.size\n\t\t});\n\t}\n\n\taddData(name, params) {\n\t\treturn addChild(this, name, params);\n\t}\n\n\timportBlob(blob, options) {\n\t\treturn this.importZip(new BlobReader(blob), options);\n\t}\n\n\timportData64URI(dataURI, options) {\n\t\treturn this.importZip(new Data64URIReader(dataURI), options);\n\t}\n\n\timportUint8Array(array, options) {\n\t\treturn this.importZip(new Uint8ArrayReader(array), options);\n\t}\n\n\timportHttpContent(url, options) {\n\t\treturn this.importZip(new HttpReader(url, options), options);\n\t}\n\n\timportReadable(readable, options) {\n\t\treturn this.importZip({ readable }, options);\n\t}\n\n\texportBlob(options = {}) {\n\t\treturn this.exportZip(new BlobWriter(options.mimeType || \"application/zip\"), options);\n\t}\n\n\texportData64URI(options = {}) {\n\t\treturn this.exportZip(new Data64URIWriter(options.mimeType || \"application/zip\"), options);\n\t}\n\n\texportUint8Array(options = {}) {\n\t\treturn this.exportZip(new Uint8ArrayWriter(), options);\n\t}\n\n\tasync exportWritable(writable = new WritableStream(), options = {}) {\n\t\tawait this.exportZip({ writable }, options);\n\t\treturn writable;\n\t}\n\n\tasync importZip(reader, options = {}) {\n\t\tawait initStream(reader);\n\t\tconst zipReader = new ZipReader(reader, options);\n\t\tconst importedEntries = [];\n\t\tconst entries = await zipReader.getEntries();\n\t\tfor (const entry of entries) {\n\t\t\tlet parent = this;\n\t\t\ttry {\n\t\t\t\tconst path = entry.filename.split(\"/\");\n\t\t\t\tconst name = path.pop();\n\t\t\t\tpath.forEach((pathPart, pathIndex) => {\n\t\t\t\t\tconst previousParent = parent;\n\t\t\t\t\tparent = parent.getChildByName(pathPart);\n\t\t\t\t\tif (!parent) {\n\t\t\t\t\t\tparent = new ZipDirectoryEntry(this.fs, pathPart, { data: pathIndex == path.length - 1 ? entry : null }, previousParent);\n\t\t\t\t\t\timportedEntries.push(parent);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (!entry.directory) {\n\t\t\t\t\timportedEntries.push(addChild(parent, name, {\n\t\t\t\t\t\tdata: entry,\n\t\t\t\t\t\tReader: getZipBlobReader(Object.assign({}, options)),\n\t\t\t\t\t\tuncompressedSize: entry.uncompressedSize,\n\t\t\t\t\t\tpassThrough: options.passThrough\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\ttry {\n\t\t\t\t\terror.cause = {\n\t\t\t\t\t\tentry\n\t\t\t\t\t};\n\t\t\t\t\t// eslint-disable-next-line no-unused-vars\n\t\t\t\t} catch (_) {\n\t\t\t\t\t// ignored\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\treturn importedEntries;\n\t}\n\n\tasync exportZip(writer, options) {\n\t\tconst zipEntry = this;\n\t\tif (options.bufferedWrite === UNDEFINED_VALUE) {\n\t\t\toptions.bufferedWrite = true;\n\t\t}\n\t\tawait Promise.all([initReaders(zipEntry, options.readerOptions), initStream(writer)]);\n\t\tconst zipWriter = new ZipWriter(writer, options);\n\t\tawait exportZip(zipWriter, zipEntry, getTotalSize([zipEntry], \"uncompressedSize\"), options);\n\t\tawait zipWriter.close();\n\t\treturn writer.getData ? writer.getData() : writer.writable;\n\t}\n\n\tgetChildByName(name) {\n\t\tconst children = this.children;\n\t\tfor (let childIndex = 0; childIndex < children.length; childIndex++) {\n\t\t\tconst child = children[childIndex];\n\t\t\tif (child.name == name) {\n\t\t\t\treturn child;\n\t\t\t}\n\t\t}\n\t}\n\n\tisPasswordProtected() {\n\t\tconst children = this.children;\n\t\tfor (let childIndex = 0; childIndex < children.length; childIndex++) {\n\t\t\tconst child = children[childIndex];\n\t\t\tif (child.isPasswordProtected()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tasync checkPassword(password, options = {}) {\n\t\tconst children = this.children;\n\t\tconst result = await Promise.all(children.map(child => child.checkPassword(password, options)));\n\t\treturn !result.includes(false);\n\t}\n}\n\n\nclass FS {\n\n\tconstructor() {\n\t\tresetFS(this);\n\t}\n\n\tget children() {\n\t\treturn this.root.children;\n\t}\n\n\tremove(entry) {\n\t\tdetach(entry);\n\t\tthis.entries[entry.id] = null;\n\t}\n\n\tmove(entry, destination) {\n\t\tif (entry == this.root) {\n\t\t\tthrow new Error(\"Root directory cannot be moved\");\n\t\t} else {\n\t\t\tif (destination.directory) {\n\t\t\t\tif (!destination.isDescendantOf(entry)) {\n\t\t\t\t\tif (entry != destination) {\n\t\t\t\t\t\tif (destination.getChildByName(entry.name)) {\n\t\t\t\t\t\t\tthrow new Error(\"Entry filename already exists\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdetach(entry);\n\t\t\t\t\t\tentry.parent = destination;\n\t\t\t\t\t\tdestination.children.push(entry);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\"Entry is a ancestor of target entry\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Target entry is not a directory\");\n\t\t\t}\n\t\t}\n\t}\n\n\tfind(fullname) {\n\t\tconst path = fullname.split(\"/\");\n\t\tlet node = this.root;\n\t\tfor (let index = 0; node && index < path.length; index++) {\n\t\t\tnode = node.getChildByName(path[index]);\n\t\t}\n\t\treturn node;\n\t}\n\n\tgetById(id) {\n\t\treturn this.entries[id];\n\t}\n\n\tgetChildByName(name) {\n\t\treturn this.root.getChildByName(name);\n\t}\n\n\taddDirectory(name, options) {\n\t\treturn this.root.addDirectory(name, options);\n\t}\n\n\taddText(name, text, options) {\n\t\treturn this.root.addText(name, text, options);\n\t}\n\n\taddBlob(name, blob, options) {\n\t\treturn this.root.addBlob(name, blob, options);\n\t}\n\n\taddData64URI(name, dataURI, options) {\n\t\treturn this.root.addData64URI(name, dataURI, options);\n\t}\n\n\taddUint8Array(name, array, options) {\n\t\treturn this.root.addUint8Array(name, array, options);\n\t}\n\n\taddHttpContent(name, url, options) {\n\t\treturn this.root.addHttpContent(name, url, options);\n\t}\n\n\taddReadable(name, readable, options) {\n\t\treturn this.root.addReadable(name, readable, options);\n\t}\n\n\taddFileSystemEntry(fileSystemEntry, options) {\n\t\treturn this.root.addFileSystemEntry(fileSystemEntry, options);\n\t}\n\n\taddFileSystemHandle(handle, options) {\n\t\treturn this.root.addFileSystemHandle(handle, options);\n\t}\n\n\taddFile(file, options) {\n\t\treturn this.root.addFile(file, options);\n\t}\n\n\taddData(name, params) {\n\t\treturn this.root.addData(name, params);\n\t}\n\n\timportBlob(blob, options) {\n\t\tresetFS(this);\n\t\treturn this.root.importBlob(blob, options);\n\t}\n\n\timportData64URI(dataURI, options) {\n\t\tresetFS(this);\n\t\treturn this.root.importData64URI(dataURI, options);\n\t}\n\n\timportUint8Array(array, options) {\n\t\tresetFS(this);\n\t\treturn this.root.importUint8Array(array, options);\n\t}\n\n\timportHttpContent(url, options) {\n\t\tresetFS(this);\n\t\treturn this.root.importHttpContent(url, options);\n\t}\n\n\timportReadable(readable, options) {\n\t\tresetFS(this);\n\t\treturn this.root.importReadable(readable, options);\n\t}\n\n\timportZip(reader, options) {\n\t\treturn this.root.importZip(reader, options);\n\t}\n\n\texportBlob(options) {\n\t\treturn this.root.exportBlob(options);\n\t}\n\n\texportData64URI(options) {\n\t\treturn this.root.exportData64URI(options);\n\t}\n\n\texportUint8Array(options) {\n\t\treturn this.root.exportUint8Array(options);\n\t}\n\n\texportWritable(writable, options) {\n\t\treturn this.root.exportWritable(writable, options);\n\t}\n\n\tisPasswordProtected() {\n\t\treturn this.root.isPasswordProtected();\n\t}\n\n\tcheckPassword(password, options) {\n\t\treturn this.root.checkPassword(password, options);\n\t}\n}\n\nconst fs = { FS, ZipDirectoryEntry, ZipFileEntry };\nexport { fs };\n\nfunction getTotalSize(entries, propertyName) {\n\tlet size = 0;\n\tentries.forEach(process);\n\treturn size;\n\n\tfunction process(entry) {\n\t\tsize += entry[propertyName];\n\t\tif (entry.children) {\n\t\t\tentry.children.forEach(process);\n\t\t}\n\t}\n}\n\nfunction getZipBlobReader(options) {\n\treturn class extends Reader {\n\n\t\tconstructor(entry, options = {}) {\n\t\t\tsuper();\n\t\t\tthis.entry = entry;\n\t\t\tthis.options = options;\n\t\t}\n\n\t\tasync init() {\n\t\t\tconst zipBlobReader = this;\n\t\t\tzipBlobReader.size = zipBlobReader.entry.uncompressedSize;\n\t\t\tconst data = await zipBlobReader.entry.getData(new BlobWriter(), Object.assign({}, zipBlobReader.options, options));\n\t\t\tzipBlobReader.data = data;\n\t\t\tzipBlobReader.blobReader = new BlobReader(data);\n\t\t\tsuper.init();\n\t\t}\n\n\t\treadUint8Array(index, length) {\n\t\t\treturn this.blobReader.readUint8Array(index, length);\n\t\t}\n\t};\n}\n\nasync function initReaders(entry, options) {\n\tif (entry.children.length) {\n\t\tawait Promise.all(entry.children.map(async child => {\n\t\t\tif (child.directory) {\n\t\t\t\tawait initReaders(child, options);\n\t\t\t} else {\n\t\t\t\tconst reader = child.reader = new child.Reader(child.data, options);\n\t\t\t\ttry {\n\t\t\t\t\tawait initStream(reader);\n\t\t\t\t} catch (error) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\terror.entryId = child.id;\n\t\t\t\t\t\terror.cause = {\n\t\t\t\t\t\t\tentry: child\n\t\t\t\t\t\t};\n\t\t\t\t\t\t// eslint-disable-next-line no-unused-vars\n\t\t\t\t\t} catch (_) {\n\t\t\t\t\t\t// ignored\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t\tchild.uncompressedSize = reader.size;\n\t\t\t}\n\t\t}));\n\t}\n}\n\nfunction detach(entry) {\n\tif (entry.parent) {\n\t\tconst children = entry.parent.children;\n\t\tchildren.forEach((child, index) => {\n\t\t\tif (child.id == entry.id) {\n\t\t\t\tchildren.splice(index, 1);\n\t\t\t}\n\t\t});\n\t}\n}\n\nasync function exportZip(zipWriter, entry, totalSize, options) {\n\tconst selectedEntry = entry;\n\tconst entryOffsets = new Map();\n\tawait process(zipWriter, entry);\n\n\tasync function process(zipWriter, entry) {\n\t\tawait exportChild();\n\n\t\tasync function exportChild() {\n\t\t\tif (options.bufferedWrite) {\n\t\t\t\tawait Promise.allSettled(entry.children.map(processChild));\n\t\t\t} else {\n\t\t\t\tfor (const child of entry.children) {\n\t\t\t\t\tawait processChild(child);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tasync function processChild(child) {\n\t\t\tconst name = options.relativePath ? child.getRelativeName(selectedEntry) : child.getFullname();\n\t\t\tconst childOptions = child.options || {};\n\t\t\tlet zipEntryOptions = {};\n\t\t\tif (child.data instanceof Entry) {\n\t\t\t\tconst {\n\t\t\t\t\texternalFileAttributes,\n\t\t\t\t\tversionMadeBy,\n\t\t\t\t\tcomment,\n\t\t\t\t\tlastModDate,\n\t\t\t\t\tcreationDate,\n\t\t\t\t\tlastAccessDate,\n\t\t\t\t\tuncompressedSize,\n\t\t\t\t\tencrypted,\n\t\t\t\t\tzipCrypto,\n\t\t\t\t\tsignature,\n\t\t\t\t\tcompressionMethod,\n\t\t\t\t\textraFieldAES\n\t\t\t\t} = child.data;\n\t\t\t\tzipEntryOptions = {\n\t\t\t\t\texternalFileAttributes,\n\t\t\t\t\tversionMadeBy,\n\t\t\t\t\tcomment,\n\t\t\t\t\tlastModDate,\n\t\t\t\t\tcreationDate,\n\t\t\t\t\tlastAccessDate\n\t\t\t\t};\n\t\t\t\tif (child.passThrough) {\n\t\t\t\t\tlet level, encryptionStrength;\n\t\t\t\t\tif (compressionMethod === 0) {\n\t\t\t\t\t\tlevel = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (extraFieldAES) {\n\t\t\t\t\t\tencryptionStrength = extraFieldAES.strength;\n\t\t\t\t\t}\n\t\t\t\t\tzipEntryOptions = Object.assign(zipEntryOptions, {\n\t\t\t\t\t\tpassThrough: true,\n\t\t\t\t\t\tencrypted,\n\t\t\t\t\t\tzipCrypto,\n\t\t\t\t\t\tsignature,\n\t\t\t\t\t\tuncompressedSize,\n\t\t\t\t\t\tlevel,\n\t\t\t\t\t\tencryptionStrength,\n\t\t\t\t\t\tcompressionMethod\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tawait zipWriter.add(name, child.reader, Object.assign({\n\t\t\t\tdirectory: child.directory\n\t\t\t}, Object.assign({}, options, zipEntryOptions, childOptions, {\n\t\t\t\tonprogress: async indexProgress => {\n\t\t\t\t\tif (options.onprogress) {\n\t\t\t\t\t\tentryOffsets.set(name, indexProgress);\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait options.onprogress(Array.from(entryOffsets.values()).reduce((previousValue, currentValue) => previousValue + currentValue), totalSize);\n\t\t\t\t\t\t\t// eslint-disable-next-line no-unused-vars\n\t\t\t\t\t\t} catch (_) {\n\t\t\t\t\t\t\t// ignored\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})));\n\t\t\tawait process(zipWriter, child);\n\t\t}\n\t}\n}\n\nfunction addFileSystemHandle(zipEntry, handle, options) {\n\treturn addFile(zipEntry, handle, []);\n\n\tasync function addFile(parentEntry, handle, addedEntries) {\n\t\tif (handle) {\n\t\t\ttry {\n\t\t\t\tif (handle.isFile || handle.isDirectory) {\n\t\t\t\t\thandle = await transformToFileSystemhandle(handle);\n\t\t\t\t}\n\t\t\t\tif (handle.kind == \"file\") {\n\t\t\t\t\tconst file = await handle.getFile();\n\t\t\t\t\taddedEntries.push(\n\t\t\t\t\t\tparentEntry.addData(file.name, {\n\t\t\t\t\t\t\tReader: function () {\n\t\t\t\t\t\t\t\tconst readable = file.stream();\n\t\t\t\t\t\t\t\tconst size = file.size;\n\t\t\t\t\t\t\t\treturn { readable, size };\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\toptions: Object.assign({}, { lastModDate: new Date(file.lastModified) }, options),\n\t\t\t\t\t\t\tuncompressedSize: file.size\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t} else if (handle.kind == \"directory\") {\n\t\t\t\t\tconst directoryEntry = parentEntry.addDirectory(handle.name);\n\t\t\t\t\taddedEntries.push(directoryEntry);\n\t\t\t\t\tfor await (const childHandle of handle.values()) {\n\t\t\t\t\t\tawait addFile(directoryEntry, childHandle, addedEntries);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconst message = error.message + (handle ? \" (\" + handle.name + \")\" : \"\");\n\t\t\t\tthrow new Error(message);\n\t\t\t}\n\t\t}\n\t\treturn addedEntries;\n\t}\n}\n\nasync function transformToFileSystemhandle(entry) {\n\tconst handle = {\n\t\tname: entry.name\n\t};\n\tif (entry.isFile) {\n\t\thandle.kind = \"file\";\n\t\thandle.getFile = () =>\n\t\t\tnew Promise((resolve, reject) => entry.file(resolve, reject));\n\t}\n\tif (entry.isDirectory) {\n\t\thandle.kind = \"directory\";\n\t\tconst handles = await transformToFileSystemhandles(entry);\n\t\thandle.values = () => handles;\n\t}\n\treturn handle;\n}\n\nasync function transformToFileSystemhandles(entry) {\n\tconst entries = [];\n\tfunction readEntries(directoryReader, resolve, reject) {\n\t\tdirectoryReader.readEntries(async (entriesPart) => {\n\t\t\tif (!entriesPart.length) {\n\t\t\t\tresolve(entries);\n\t\t\t} else {\n\t\t\t\tfor (const entry of entriesPart) {\n\t\t\t\t\tentries.push(await transformToFileSystemhandle(entry));\n\t\t\t\t}\n\t\t\t\treadEntries(directoryReader, resolve, reject);\n\t\t\t}\n\t\t}, reject);\n\t}\n\tawait new Promise((resolve, reject) =>\n\t\treadEntries(entry.createReader(), resolve, reject)\n\t);\n\treturn {\n\t\t[Symbol.iterator]() {\n\t\t\tlet entryIndex = 0;\n\t\t\treturn {\n\t\t\t\tnext() {\n\t\t\t\t\tconst result = {\n\t\t\t\t\t\tvalue: entries[entryIndex],\n\t\t\t\t\t\tdone: entryIndex === entries.length\n\t\t\t\t\t};\n\t\t\t\t\tentryIndex++;\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t};\n}\n\nfunction resetFS(fs) {\n\tfs.entries = [];\n\tfs.root = new ZipDirectoryEntry(fs);\n}\n\nfunction addChild(parent, name, params, directory) {\n\tif (parent.directory) {\n\t\treturn directory ? new ZipDirectoryEntry(parent.fs, name, params, parent) : new ZipFileEntry(parent.fs, name, params, parent);\n\t} else {\n\t\tthrow new Error(\"Parent entry is not a directory\");\n\t}\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}