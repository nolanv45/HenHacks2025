{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport { neverReached as o } from \"../../../../../../../core/compilerUtils.js\";\nimport { packFloatRGBA as e } from \"../../../../../../../core/floatRGBA.js\";\nimport { DecodeSymbolColor as r } from \"./DecodeSymbolColor.glsl.js\";\nimport { ShaderOutput as t } from \"../../../../core/shaderLibrary/ShaderOutput.js\";\nimport { RgbaFloatEncoding as n } from \"../../../../core/shaderLibrary/util/RgbaFloatEncoding.glsl.js\";\nimport { Float4DrawUniform as a } from \"../../../../core/shaderModules/Float4DrawUniform.js\";\nimport { glsl as d, If as l } from \"../../../../core/shaderModules/glsl.js\";\nimport { IntegerDrawUniform as c } from \"../../../../core/shaderModules/IntegerDrawUniform.js\";\nimport { Texture2DDrawUniform as i } from \"../../../../core/shaderModules/Texture2DDrawUniform.js\";\nimport { olidEnabled as s } from \"../../../../effects/geometry/olidUtils.js\";\nimport { VertexAttribute as x } from \"../../../../lib/VertexAttribute.js\";\nvar C;\n!function (o) {\n  o[o.Uniform = 0] = \"Uniform\", o[o.Varying = 1] = \"Varying\", o[o.COUNT = 2] = \"COUNT\";\n}(C || (C = {}));\nconst m = 429496.7296;\nfunction f(o, r) {\n  e(o / m * .5 + .5, r);\n}\nfunction u(e, r) {\n  switch (r.componentData) {\n    case C.Varying:\n      return v(e, r);\n    case C.Uniform:\n      return p(e, r);\n    case C.COUNT:\n      return;\n    default:\n      o(r.componentData);\n  }\n}\nfunction v(o, e) {\n  const {\n    vertex: a,\n    fragment: l\n  } = o;\n  a.include(n), a.uniforms.add(new i(\"componentColorTex\", o => o.componentParameters.texture.texture)), o.attributes.add(x.COMPONENTINDEX, \"float\"), o.varyings.add(\"vExternalColorMixMode\", \"mediump float\"), o.varyings.add(\"vExternalColor\", \"vec4\");\n  const c = e.output === t.ObjectAndLayerIdColor;\n  c && o.varyings.add(\"vObjectAndLayerIdColor\", \"vec4\"), o.include(r), a.constants.add(\"stride\", \"float\", s() ? 3 : 2), a.code.add(d`vec2 getComponentTextureCoordinates(float componentIndex, float typeOffset) {\nfloat index = componentIndex * stride + typeOffset;\nfloat texSize = float(textureSize(componentColorTex, 0).x);\nfloat coordX = mod(index, texSize);\nfloat coordY = floor(index / texSize);\nreturn vec2(coordX, coordY) + 0.5;\n}`), a.code.add(d`\n  vec4 _readComponentColor() {\n    vec2 textureCoordinates = getComponentTextureCoordinates(componentIndex, 0.0);\n    return texelFetch(componentColorTex, ivec2(textureCoordinates), 0);\n   }\n\n  float readElevationOffset() {\n    vec2 textureCoordinates = getComponentTextureCoordinates(componentIndex, 1.0);\n    vec4 encodedElevation = texelFetch(componentColorTex, ivec2(textureCoordinates), 0);\n    return uninterpolatedRGBAToFloat(encodedElevation) * ${d.float(m)};\n  }\n\n  ${c ? d`\n          void forwardObjectAndLayerIdColor() {\n            vec2 textureCoordinates = getComponentTextureCoordinates(componentIndex, 2.0);\n            vObjectAndLayerIdColor = texelFetch(componentColorTex, ivec2(textureCoordinates), 0);\n          }` : d`void forwardObjectAndLayerIdColor() {}`}\n\n  vec4 forwardExternalColor(out bool castShadows) {\n    vec4 componentColor = _readComponentColor() * 255.0;\n\n    float shadowFlag = mod(componentColor.b * 255.0, 2.0);\n    componentColor.b -= shadowFlag;\n    castShadows = shadowFlag >= 1.0;\n\n    int decodedColorMixMode;\n    vExternalColor = decodeSymbolColor(componentColor, decodedColorMixMode) * 0.003921568627451; // = 1/255;\n    vExternalColorMixMode = float(decodedColorMixMode) + 0.5; // add 0.5 to avoid interpolation artifacts\n\n    return vExternalColor;\n  }\n`), l.code.add(d`\n  void readExternalColor(out vec4 externalColor, out int externalColorMixMode) {\n    externalColor = vExternalColor;\n    externalColorMixMode = int(vExternalColorMixMode);\n  }\n\n  void outputObjectAndLayerIdColor() {\n     ${c ? d`fragColor = vObjectAndLayerIdColor;` : \"\"}\n  }\n`);\n}\nfunction p(o, e) {\n  const {\n    vertex: r,\n    fragment: n\n  } = o;\n  o.varyings.add(\"vExternalColor\", \"vec4\"), r.uniforms.add(new a(\"externalColor\", o => o.componentParameters.externalColor)).code.add(d`float readElevationOffset() {\nreturn 0.0;\n}\nvoid forwardObjectAndLayerIdColor() {}\nvec4 forwardExternalColor(out bool castShadows) {\nvExternalColor = externalColor;\ncastShadows = true;\nreturn externalColor;\n}`);\n  const i = e.output === t.ObjectAndLayerIdColor;\n  n.uniforms.add(new c(\"externalColorMixMode\", o => o.componentParameters.externalColorMixMode)).code.add(d`\n    void readExternalColor(out vec4 color, out int colorMixMode) {\n      color = vExternalColor;\n      colorMixMode = externalColorMixMode;\n    }\n\n    void outputObjectAndLayerIdColor() {\n      ${l(i, \"fragColor = vec4(0, 0, 0, 0);\")}\n    }\n  `);\n}\nexport { u as ComponentData, C as ComponentDataType, f as encodeElevationOffset, m as maxElevationOffset };","map":{"version":3,"names":["neverReached","o","packFloatRGBA","e","DecodeSymbolColor","r","ShaderOutput","t","RgbaFloatEncoding","n","Float4DrawUniform","a","glsl","d","If","l","IntegerDrawUniform","c","Texture2DDrawUniform","i","olidEnabled","s","VertexAttribute","x","C","Uniform","Varying","COUNT","m","f","u","componentData","v","p","vertex","fragment","include","uniforms","add","componentParameters","texture","attributes","COMPONENTINDEX","varyings","output","ObjectAndLayerIdColor","constants","code","float","externalColor","externalColorMixMode","ComponentData","ComponentDataType","encodeElevationOffset","maxElevationOffset"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/node_modules/@arcgis/core/views/3d/webgl-engine/collections/Component/Material/shader/ComponentData.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{neverReached as o}from\"../../../../../../../core/compilerUtils.js\";import{packFloatRGBA as e}from\"../../../../../../../core/floatRGBA.js\";import{DecodeSymbolColor as r}from\"./DecodeSymbolColor.glsl.js\";import{ShaderOutput as t}from\"../../../../core/shaderLibrary/ShaderOutput.js\";import{RgbaFloatEncoding as n}from\"../../../../core/shaderLibrary/util/RgbaFloatEncoding.glsl.js\";import{Float4DrawUniform as a}from\"../../../../core/shaderModules/Float4DrawUniform.js\";import{glsl as d,If as l}from\"../../../../core/shaderModules/glsl.js\";import{IntegerDrawUniform as c}from\"../../../../core/shaderModules/IntegerDrawUniform.js\";import{Texture2DDrawUniform as i}from\"../../../../core/shaderModules/Texture2DDrawUniform.js\";import{olidEnabled as s}from\"../../../../effects/geometry/olidUtils.js\";import{VertexAttribute as x}from\"../../../../lib/VertexAttribute.js\";var C;!function(o){o[o.Uniform=0]=\"Uniform\",o[o.Varying=1]=\"Varying\",o[o.COUNT=2]=\"COUNT\"}(C||(C={}));const m=429496.7296;function f(o,r){e(o/m*.5+.5,r)}function u(e,r){switch(r.componentData){case C.Varying:return v(e,r);case C.Uniform:return p(e,r);case C.COUNT:return;default:o(r.componentData)}}function v(o,e){const{vertex:a,fragment:l}=o;a.include(n),a.uniforms.add(new i(\"componentColorTex\",(o=>o.componentParameters.texture.texture))),o.attributes.add(x.COMPONENTINDEX,\"float\"),o.varyings.add(\"vExternalColorMixMode\",\"mediump float\"),o.varyings.add(\"vExternalColor\",\"vec4\");const c=e.output===t.ObjectAndLayerIdColor;c&&o.varyings.add(\"vObjectAndLayerIdColor\",\"vec4\"),o.include(r),a.constants.add(\"stride\",\"float\",s()?3:2),a.code.add(d`vec2 getComponentTextureCoordinates(float componentIndex, float typeOffset) {\nfloat index = componentIndex * stride + typeOffset;\nfloat texSize = float(textureSize(componentColorTex, 0).x);\nfloat coordX = mod(index, texSize);\nfloat coordY = floor(index / texSize);\nreturn vec2(coordX, coordY) + 0.5;\n}`),a.code.add(d`\n  vec4 _readComponentColor() {\n    vec2 textureCoordinates = getComponentTextureCoordinates(componentIndex, 0.0);\n    return texelFetch(componentColorTex, ivec2(textureCoordinates), 0);\n   }\n\n  float readElevationOffset() {\n    vec2 textureCoordinates = getComponentTextureCoordinates(componentIndex, 1.0);\n    vec4 encodedElevation = texelFetch(componentColorTex, ivec2(textureCoordinates), 0);\n    return uninterpolatedRGBAToFloat(encodedElevation) * ${d.float(m)};\n  }\n\n  ${c?d`\n          void forwardObjectAndLayerIdColor() {\n            vec2 textureCoordinates = getComponentTextureCoordinates(componentIndex, 2.0);\n            vObjectAndLayerIdColor = texelFetch(componentColorTex, ivec2(textureCoordinates), 0);\n          }`:d`void forwardObjectAndLayerIdColor() {}`}\n\n  vec4 forwardExternalColor(out bool castShadows) {\n    vec4 componentColor = _readComponentColor() * 255.0;\n\n    float shadowFlag = mod(componentColor.b * 255.0, 2.0);\n    componentColor.b -= shadowFlag;\n    castShadows = shadowFlag >= 1.0;\n\n    int decodedColorMixMode;\n    vExternalColor = decodeSymbolColor(componentColor, decodedColorMixMode) * 0.003921568627451; // = 1/255;\n    vExternalColorMixMode = float(decodedColorMixMode) + 0.5; // add 0.5 to avoid interpolation artifacts\n\n    return vExternalColor;\n  }\n`),l.code.add(d`\n  void readExternalColor(out vec4 externalColor, out int externalColorMixMode) {\n    externalColor = vExternalColor;\n    externalColorMixMode = int(vExternalColorMixMode);\n  }\n\n  void outputObjectAndLayerIdColor() {\n     ${c?d`fragColor = vObjectAndLayerIdColor;`:\"\"}\n  }\n`)}function p(o,e){const{vertex:r,fragment:n}=o;o.varyings.add(\"vExternalColor\",\"vec4\"),r.uniforms.add(new a(\"externalColor\",(o=>o.componentParameters.externalColor))).code.add(d`float readElevationOffset() {\nreturn 0.0;\n}\nvoid forwardObjectAndLayerIdColor() {}\nvec4 forwardExternalColor(out bool castShadows) {\nvExternalColor = externalColor;\ncastShadows = true;\nreturn externalColor;\n}`);const i=e.output===t.ObjectAndLayerIdColor;n.uniforms.add(new c(\"externalColorMixMode\",(o=>o.componentParameters.externalColorMixMode))).code.add(d`\n    void readExternalColor(out vec4 color, out int colorMixMode) {\n      color = vExternalColor;\n      colorMixMode = externalColorMixMode;\n    }\n\n    void outputObjectAndLayerIdColor() {\n      ${l(i,\"fragColor = vec4(0, 0, 0, 0);\")}\n    }\n  `)}export{u as ComponentData,C as ComponentDataType,f as encodeElevationOffset,m as maxElevationOffset};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}