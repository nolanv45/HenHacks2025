{"ast":null,"code":"/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global TransformStream */\n// deno-lint-ignore-file no-this-alias\n\nimport { Crc32 } from \"./codecs/crc32.js\";\nimport { ERR_INVALID_PASSWORD, ERR_ABORT_CHECK_PASSWORD, getRandomValues } from \"./common-crypto.js\";\nconst HEADER_LENGTH = 12;\nclass ZipCryptoDecryptionStream extends TransformStream {\n  constructor({\n    password,\n    passwordVerification,\n    checkPasswordOnly\n  }) {\n    super({\n      start() {\n        Object.assign(this, {\n          password,\n          passwordVerification\n        });\n        createKeys(this, password);\n      },\n      transform(chunk, controller) {\n        const zipCrypto = this;\n        if (zipCrypto.password) {\n          const decryptedHeader = decrypt(zipCrypto, chunk.subarray(0, HEADER_LENGTH));\n          zipCrypto.password = null;\n          if (decryptedHeader[HEADER_LENGTH - 1] != zipCrypto.passwordVerification) {\n            throw new Error(ERR_INVALID_PASSWORD);\n          }\n          chunk = chunk.subarray(HEADER_LENGTH);\n        }\n        if (checkPasswordOnly) {\n          controller.error(new Error(ERR_ABORT_CHECK_PASSWORD));\n        } else {\n          controller.enqueue(decrypt(zipCrypto, chunk));\n        }\n      }\n    });\n  }\n}\nclass ZipCryptoEncryptionStream extends TransformStream {\n  constructor({\n    password,\n    passwordVerification\n  }) {\n    super({\n      start() {\n        Object.assign(this, {\n          password,\n          passwordVerification\n        });\n        createKeys(this, password);\n      },\n      transform(chunk, controller) {\n        const zipCrypto = this;\n        let output;\n        let offset;\n        if (zipCrypto.password) {\n          zipCrypto.password = null;\n          const header = getRandomValues(new Uint8Array(HEADER_LENGTH));\n          header[HEADER_LENGTH - 1] = zipCrypto.passwordVerification;\n          output = new Uint8Array(chunk.length + header.length);\n          output.set(encrypt(zipCrypto, header), 0);\n          offset = HEADER_LENGTH;\n        } else {\n          output = new Uint8Array(chunk.length);\n          offset = 0;\n        }\n        output.set(encrypt(zipCrypto, chunk), offset);\n        controller.enqueue(output);\n      }\n    });\n  }\n}\nexport { ZipCryptoDecryptionStream, ZipCryptoEncryptionStream, ERR_INVALID_PASSWORD };\nfunction decrypt(target, input) {\n  const output = new Uint8Array(input.length);\n  for (let index = 0; index < input.length; index++) {\n    output[index] = getByte(target) ^ input[index];\n    updateKeys(target, output[index]);\n  }\n  return output;\n}\nfunction encrypt(target, input) {\n  const output = new Uint8Array(input.length);\n  for (let index = 0; index < input.length; index++) {\n    output[index] = getByte(target) ^ input[index];\n    updateKeys(target, input[index]);\n  }\n  return output;\n}\nfunction createKeys(target, password) {\n  const keys = [0x12345678, 0x23456789, 0x34567890];\n  Object.assign(target, {\n    keys,\n    crcKey0: new Crc32(keys[0]),\n    crcKey2: new Crc32(keys[2])\n  });\n  for (let index = 0; index < password.length; index++) {\n    updateKeys(target, password.charCodeAt(index));\n  }\n}\nfunction updateKeys(target, byte) {\n  let [key0, key1, key2] = target.keys;\n  target.crcKey0.append([byte]);\n  key0 = ~target.crcKey0.get();\n  key1 = getInt32(Math.imul(getInt32(key1 + getInt8(key0)), 134775813) + 1);\n  target.crcKey2.append([key1 >>> 24]);\n  key2 = ~target.crcKey2.get();\n  target.keys = [key0, key1, key2];\n}\nfunction getByte(target) {\n  const temp = target.keys[2] | 2;\n  return getInt8(Math.imul(temp, temp ^ 1) >>> 8);\n}\nfunction getInt8(number) {\n  return number & 0xFF;\n}\nfunction getInt32(number) {\n  return number & 0xFFFFFFFF;\n}","map":{"version":3,"names":["Crc32","ERR_INVALID_PASSWORD","ERR_ABORT_CHECK_PASSWORD","getRandomValues","HEADER_LENGTH","ZipCryptoDecryptionStream","TransformStream","constructor","password","passwordVerification","checkPasswordOnly","start","Object","assign","createKeys","transform","chunk","controller","zipCrypto","decryptedHeader","decrypt","subarray","Error","error","enqueue","ZipCryptoEncryptionStream","output","offset","header","Uint8Array","length","set","encrypt","target","input","index","getByte","updateKeys","keys","crcKey0","crcKey2","charCodeAt","byte","key0","key1","key2","append","get","getInt32","Math","imul","getInt8","temp","number"],"sources":["C:/Users/nolan/tasks/HenHacks2025/henhack25/node_modules/@zip.js/zip.js/lib/core/streams/zip-crypto-stream.js"],"sourcesContent":["/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global TransformStream */\n// deno-lint-ignore-file no-this-alias\n\nimport { Crc32 } from \"./codecs/crc32.js\";\nimport {\n\tERR_INVALID_PASSWORD,\n\tERR_ABORT_CHECK_PASSWORD,\n\tgetRandomValues\n} from \"./common-crypto.js\";\n\nconst HEADER_LENGTH = 12;\n\nclass ZipCryptoDecryptionStream extends TransformStream {\n\n\tconstructor({ password, passwordVerification, checkPasswordOnly }) {\n\t\tsuper({\n\t\t\tstart() {\n\t\t\t\tObject.assign(this, {\n\t\t\t\t\tpassword,\n\t\t\t\t\tpasswordVerification\n\t\t\t\t});\n\t\t\t\tcreateKeys(this, password);\n\t\t\t},\n\t\t\ttransform(chunk, controller) {\n\t\t\t\tconst zipCrypto = this;\n\t\t\t\tif (zipCrypto.password) {\n\t\t\t\t\tconst decryptedHeader = decrypt(zipCrypto, chunk.subarray(0, HEADER_LENGTH));\n\t\t\t\t\tzipCrypto.password = null;\n\t\t\t\t\tif (decryptedHeader[HEADER_LENGTH - 1] != zipCrypto.passwordVerification) {\n\t\t\t\t\t\tthrow new Error(ERR_INVALID_PASSWORD);\n\t\t\t\t\t}\n\t\t\t\t\tchunk = chunk.subarray(HEADER_LENGTH);\n\t\t\t\t}\n\t\t\t\tif (checkPasswordOnly) {\n\t\t\t\t\tcontroller.error(new Error(ERR_ABORT_CHECK_PASSWORD));\n\t\t\t\t} else {\n\t\t\t\t\tcontroller.enqueue(decrypt(zipCrypto, chunk));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass ZipCryptoEncryptionStream extends TransformStream {\n\n\tconstructor({ password, passwordVerification }) {\n\t\tsuper({\n\t\t\tstart() {\n\t\t\t\tObject.assign(this, {\n\t\t\t\t\tpassword,\n\t\t\t\t\tpasswordVerification\n\t\t\t\t});\n\t\t\t\tcreateKeys(this, password);\n\t\t\t},\n\t\t\ttransform(chunk, controller) {\n\t\t\t\tconst zipCrypto = this;\n\t\t\t\tlet output;\n\t\t\t\tlet offset;\n\t\t\t\tif (zipCrypto.password) {\n\t\t\t\t\tzipCrypto.password = null;\n\t\t\t\t\tconst header = getRandomValues(new Uint8Array(HEADER_LENGTH));\n\t\t\t\t\theader[HEADER_LENGTH - 1] = zipCrypto.passwordVerification;\n\t\t\t\t\toutput = new Uint8Array(chunk.length + header.length);\n\t\t\t\t\toutput.set(encrypt(zipCrypto, header), 0);\n\t\t\t\t\toffset = HEADER_LENGTH;\n\t\t\t\t} else {\n\t\t\t\t\toutput = new Uint8Array(chunk.length);\n\t\t\t\t\toffset = 0;\n\t\t\t\t}\n\t\t\t\toutput.set(encrypt(zipCrypto, chunk), offset);\n\t\t\t\tcontroller.enqueue(output);\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport {\n\tZipCryptoDecryptionStream,\n\tZipCryptoEncryptionStream,\n\tERR_INVALID_PASSWORD\n};\n\nfunction decrypt(target, input) {\n\tconst output = new Uint8Array(input.length);\n\tfor (let index = 0; index < input.length; index++) {\n\t\toutput[index] = getByte(target) ^ input[index];\n\t\tupdateKeys(target, output[index]);\n\t}\n\treturn output;\n}\n\nfunction encrypt(target, input) {\n\tconst output = new Uint8Array(input.length);\n\tfor (let index = 0; index < input.length; index++) {\n\t\toutput[index] = getByte(target) ^ input[index];\n\t\tupdateKeys(target, input[index]);\n\t}\n\treturn output;\n}\n\nfunction createKeys(target, password) {\n\tconst keys = [0x12345678, 0x23456789, 0x34567890];\n\tObject.assign(target, {\n\t\tkeys,\n\t\tcrcKey0: new Crc32(keys[0]),\n\t\tcrcKey2: new Crc32(keys[2]),\n\t});\n\tfor (let index = 0; index < password.length; index++) {\n\t\tupdateKeys(target, password.charCodeAt(index));\n\t}\n}\n\nfunction updateKeys(target, byte) {\n\tlet [key0, key1, key2] = target.keys;\n\ttarget.crcKey0.append([byte]);\n\tkey0 = ~target.crcKey0.get();\n\tkey1 = getInt32(Math.imul(getInt32(key1 + getInt8(key0)), 134775813) + 1);\n\ttarget.crcKey2.append([key1 >>> 24]);\n\tkey2 = ~target.crcKey2.get();\n\ttarget.keys = [key0, key1, key2];\n}\n\nfunction getByte(target) {\n\tconst temp = target.keys[2] | 2;\n\treturn getInt8(Math.imul(temp, (temp ^ 1)) >>> 8);\n}\n\nfunction getInt8(number) {\n\treturn number & 0xFF;\n}\n\nfunction getInt32(number) {\n\treturn number & 0xFFFFFFFF;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}